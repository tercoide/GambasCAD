' Gambas class file

'' Llena la tabla de propiedades
Public Sub FillProperties(cEntities As Collection, Optional sFilter As String = "")

    Dim cTypes As New Collection
    Dim cProperties As New Collection
    'Dim cmbLayers As New ComboBox()
    Dim e As Entity
    Dim l As Layer, LastLayer As String
    Dim sv As String = "<< " & ("varies") & " >>"
    Dim sProp As Variant
    Dim i As Integer

    If cEntities.Count = 0 Then
        tblProperties.Clear
        Return
    Endif
    ' cmbLayers.Insert(sv)
    ' For Each l In gcd.Drawing.Layers
    '     cmbLayers.Insert(l.Name)
    ' Next

    sFilter = UCase(sFilter)

    ' RECOLECTO LAS PROPIEDADES EN UNA COLECCION
    For Each e In cEntities
        If sFilter <> "" And (sFilter <> e.Gender) Then Continue

        ' veo el tipo
        If Not cTypes.Exist(e.Gender) Then cTypes.Add(e.Gender, e.Gender)

        ' GENERAL
        AddPropToCol(cProperties, "layer", e.pLayer.Name)                               'LAYER
        AddPropToCol(cProperties, "color", e.Colour)                                    'COLOR
        AddPropToCol(cProperties, "linetype", e.LineType.Name)                          'LINETYPE
        AddPropToCol(cProperties, "linewIdth", e.LineWIdth)                             'LINEWIDTH

        ' GEOMETRY
        Select Case E.Gender
            Case "LINE", "LWPOLYLINE", "SOLID", "POLYLINE", "POLYLINE_2D", "SPLINE", "POINT", "RAY", "VERTEX", "VERTEX_2D"
                AddPropToCol(cProperties, "points", Utils.FloatToString(e.p))                                 'POINTS
            Case "CIRCLE", "ARC", "ELLIPSE"
                AddPropToCol(cProperties, "center", Utils.FloatToString(e.p))                                 'CENTER
                AddPropToCol(cProperties, "radius", e.fParam[0])                         'radius
                If e.Gender = "ARC" Then
                    AddPropToCol(cProperties, "start", e.fParam[1])                       'start
                    AddPropToCol(cProperties, "end", e.fParam[2])                         'end
                Endif
            Case "INSERT", "TEXT", "MTEXT"
                AddPropToCol(cProperties, "base point", Utils.FloatToString(e.p))                              'BASE POINTS
                If e.Gender = "INSERT" Then
                    AddPropToCol(cProperties, "scaleX", e.fParam[cadInsert.ipaEscX])
                    AddPropToCol(cProperties, "scaleY", e.fParam[cadInsert.ipaEscY])
                    AddPropToCol(cProperties, "rotation", e.fParam[cadInsert.ipaRotacion])
                Endif
            Case Like "*DIM"
                AddPropToCol(cProperties, "base point", Utils.FloatToString(e.p))                              'BASE POINTS
        End Select

        'CONTENTS
        Select Case E.Gender
            Case "TEXT"
                AddPropToCol(cProperties, "text", e.sParam[cadText.sdaText])               'TEXT
                AddPropToCol(cProperties, "style", e.sParam[cadText.sdaStyle])             'STYLE
            Case "MTEXT"
                AddPropToCol(cProperties, "text", e.sParam[cadmText.sdaText])               'TEXT
                AddPropToCol(cProperties, "style", e.sParam[cadMText.sdaStyle])             'STYLE
            Case "INSERT"
                AddPropToCol(cProperties, "block", e.pBlock.name)               'TEXT
        End Select

        ' FORMAT
        Select Case E.Gender
            Case "TEXT"
                AddPropToCol(cProperties, "vertical justification", e.fParam[cadText.ipaVertJustif])
                AddPropToCol(cProperties, "alignment", e.fParam[cadText.ipaAttchmPoint])
                AddPropToCol(cProperties, "style", e.sParam[cadText.sdaStyle])
            Case "MTEXT"
                AddPropToCol(cProperties, "text", e.sParam[cadmText.sdaText])               'TEXT
                AddPropToCol(cProperties, "style", e.sParam[cadMText.sdaStyle])             'STYLE
            Case "INSERT"
                AddPropToCol(cProperties, "block", e.pBlock.name)               'TEXT
        End Select

    Next

    cmbEntityType.Clear
    cmbEntityType.Add(("All types"))
    For Each sProp In cTypes
        cmbEntityType.Add(sProp)
    Next

    ' ARMO LA TABLA DE PROPIEDADES
    tblProperties.Rows.Count = cProperties.Count
    tblProperties.Columns.Count = 2
    For Each sProp In cProperties

        tblProperties[i, 0].Text = UCase$(Left(cProperties.Key, 1)) & Mid(cProperties.Key, 2)

        If TypeOf(sProp) = gb.String Then
            tblProperties[i, 1].Text = sProp
        Else If TypeOf(sProp) = gb.Float Then
            tblProperties[i, 1].Text = sProp
        Else If TypeOf(sProp) = gb.Object Then
            tblProperties[i, 1].Text = Utils.FloatToString(sProp)
        Else
            tblProperties[i, 1].Text = sProp

        End If

        tblProperties[i, 1].Font.Bold = True
        Inc i
    Next

    Return

End

Public Sub cmbEntityType_Click()

    If cmbEntityType.Index > 0 Then
        FillProperties(gcd.Drawing.Sheet.EntitiesSelected, cmbEntityType.Text)
    Else
        FillProperties(gcd.Drawing.Sheet.EntitiesSelected)
    End If

End

Public Sub tblProperties_Click()

    Dim s, sProp As String, iProp As Integer
    Dim sLayers, sLinetypes, sStyles, sDimStyles As New String[]
    Dim lay As Layer, lty As LineType, dst As DimStyle, sty As TextStyle
    Dim flxPoints As Float[]

    If tblProperties.Column = 0 Then tblProperties.Column = 1

    sProp = LCase(tblProperties[tblProperties.Row, 0].Text)

    ' lleno los combos de edicion
    For Each lay In gcd.Drawing.Layers
        sLayers.Add(lay.Name)
    Next

    For Each lty In gcd.Drawing.LineTypes
        sLinetypes.Add(lty.Name)
    Next

    For Each dst In gcd.Drawing.DimStyles
        sDimStyles.Add(dst.Name)
    Next
    For Each sty In gcd.Drawing.TextStyles
        sStyles.Add(sty.Name)
    Next

    Select Case sProp
        Case "color"
            iProp = fColors.ShowModal()
            If iprop >= 0 Then
                tblProperties[tblProperties.Row, 1].Text = iProp - 1
                tblProperties[tblProperties.Row, 1].Tag = True
            End If

        Case "layer"
            tblProperties.Edit(sLayers, True)
        Case "linetype"
            tblProperties.Edit(sLinetypes, True)
        Case "dimstyle"
            tblProperties.Edit(sDimStyles, True)
        Case "style"
            tblProperties.Edit(sStyles, True)
        Case "points", "center", "base point"
            flxPoints = Utils.StringToFloatArray(tblProperties[tblProperties.Row, 1].Text)

            tblProperties[tblProperties.Row, 1].Tag = fPointsEdit.EditPoints(flxPoints)
        Case Else
            tblProperties.Edit()

    End Select

End

Public Sub tblProperties_Save(Row As Integer, Column As Integer, Value As String)

    Dim s, sProp As String

    sProp = LCase(tblProperties[Row, 0].Text)

    Select Case sProp

        Case Else
            tblProperties[row, Column].Text = value
            tblProperties[row, Column].Tag = value

    End Select

End

'' agrego la propiedad a la coleccion si es que no existe (retorna True en este caso)
Public Function AddPropToCol(cProperties As Collection, sPropName As String, sValue As Variant, Optional sVariesText As String = "<< " & ("varies") & " >>") As Boolean

    If cProperties.Exist(sPropName) Then
        If sValue <> cProperties[sPropName] Then
            cProperties[sPropName] = sVariesText
            Return False
        End If
    Else
        cProperties.Add(sValue, sPropName)
        Return True

    Endif

End
