' Gambas class file

Public cPaperSizes As New Collection
Public snxAreaToPrint As New Single[]
Public SavingStyle As Boolean = False
Public CombosFilled As Boolean = False

Public Sub btnCAncel_Click()

    gcd.clsJobCallBack = Null
    gcd.DrawingReady = True
    cadSelection.AllowPolySelection = True
    cadSelection.AllowGripEdit = True
    cadSelection.AllowSingleSelection = True
    cadSelection.AllowRectSelection = True
    Me.Close(0)

End

Public Sub Form_Activate()

    ' Obtengo la impresion
    ' frmPrinter.Text = Printer1.Name

    ' es posible que haya vuelto de buscar un area de impresion

    snxAreaToPrint = New Single[]
    snxAreaToPrint.Add(cadSelection.selStartXr)
    snxAreaToPrint.Add(cadSelection.selStartYr)
    snxAreaToPrint.Add(cadSelection.selEndXr)
    snxAreaToPrint.Add(cadSelection.selEndyr)

End

Public Sub form_Close()

    gcd.DrawingReady = True

End

Public Sub Form_Open()

    ' obtengo la lista de impresoras

    Dim stxPrinters As New String[]
    Dim sSize As Variant
    Dim pstyPrintStyle As PrintStyle

    If Not CombosFilled Then
        stxPrinters = Printer.List

        LoadStyles

        cmbPrinter.List = stxPrinters
        cmbPrinter.Add(("Print to PDF file"), 0)
        'cmbPrinter.Add(("Print to SVG file"), 1)

        cPaperSizes.Clear
        cPaperSizes.Add("A0 841mm X 1189mm", "A0")
        cPaperSizes.Add("A1 594mm X 841mm", "A1")
        cPaperSizes.Add("A2 420mm X 594mm", "A2")
        cPaperSizes.Add("A3 297mm X 420mm", "A3")
        cPaperSizes.Add("A4 210mm X 297mm", "A4")
        cPaperSizes.Add("A5 148mm X 210mm", "A5")
        cPaperSizes.Add("Custom size in mm", "CU")

        cmbPaperSize.Clear
        For Each sSize In cPaperSizes
            cmbPaperSize.Add(sSize)
        Next

        cmbScale.Clear
        cmbScale.Add("Custom")
        cmbScale.Add("1000:1")
        cmbScale.Add("200:1")
        cmbScale.Add("100:1")
        cmbScale.Add("75:1")
        cmbScale.Add("50:1")
        cmbScale.Add("20:1")
        cmbScale.Add("10:1")
        cmbScale.Add("1:1")
        cmbScale.Add("1:10")
        cmbScale.Add("1:20")
        cmbScale.Add("1:50")
        cmbScale.Add("1:75")
        cmbScale.Add("1:100")
        cmbScale.Add("1:200")
        cmbScale.Add("1:1000")

    End If
    CombosFilled = True

End

Public Sub SetStyle(ps As PrintStyle)

    If vlbScalePaper.Value = 0 Or vlbScaleDraw.Value = 0 Then
        Message.Error(("Wrong scale"))
        Return
    Endif

    If vlbWIdth.Value = 0 Or vlbHeight.Value = 0 Then
        Message.Error(("Wrong paper size"))
        Return

    Endif

    ' coloco todo los parametros en el estilo de impresion en uso
    With ps
        .ColorStyle = -((1 * radGray.Value) + (2 * radColor.Value))

        .PrintScale = vlbScalePaper.Value / vlbScaleDraw.Value  ' para aplicar la escala correcta debe setearse la impresora como "A3 sin margenes" por ej
        .ScaleDrawingUnit = vlbScaleDraw.Value
        .ScalePaper = vlbScalePaper.Value

        If radFitToPage.Value Then .PrintScale = -1
        .PaperSizeW = vlbWIdth.Value
        .PaperSizeH = vlbHeight.Value
        .PaperName = cmbPaperSize.Text

        ' margenes
        .PrintOffsetX = vlbLeft.Value
        .PrintOffsetY = vlbTop.Value
        If radFitTopLeft.Value Then
            .CenteringStyle = 1
        Else If radFitCenter.Value Then
            .CenteringStyle = 2
        Else If radFitCustom.Value Then
            .CenteringStyle = 0
        End If

        If radLandscape.Value Then .PrintOrientation = Printer.Landscape Else .PrintOrientation = Printer.Portrait

        .PrintInvert = chkInvert.Value
        If Me.radAreaWindow.Value Then .PrintArea = 2
        If Me.radAreaAll.Value Then .PrintArea = 0
        If Me.radAreaView.Value Then .PrintArea = 1

        .PrintAreaX0 = snxAreaToPrint[0]
        .PrintAreaY0 = snxAreaToPrint[1]
        .PrintAreaX1 = snxAreaToPrint[2]
        .PrintAreaY1 = snxAreaToPrint[3]

    End With

    gcd.Drawing.CurrPrintStyle = ps

End

Public Sub btnPrint_Click()

    gcd.debuginfo("Printing")
    gcd.DrawingReady = False

    SetStyle(gcd.Drawing.CurrPrintStyle)

    'Debug "Printer sizes pre", Printer1.PaperHeight, Printer1.PaperWidth

    'Printer1.Orientation = gcd.Drawing.CurrPrintStyle.PrintOrientation  ' esto conviene no tocar porque sino lo siguiente no funciona
    Printer1.PaperHeight = gcd.Drawing.CurrPrintStyle.PaperSizeH
    Printer1.PaperWIdth = gcd.Drawing.CurrPrintStyle.PaperSizeW
    'Debug "Printer sizes desired", gcd.Drawing.CurrPrintStyle.PaperSizeH, gcd.Drawing.CurrPrintStyle.PaperSizeW
    'Debug "Printer sizes post", Printer1.PaperHeight, Printer1.PaperWidth

    If cmbPrinter.Index = 0 Then

        Printer1.OutputFile = Utils.PathFromFile(gcd.Drawing.FileName) &/ Utils.FileWithoutExtension(gcd.Drawing.FileName) & ".pdf"
        ' Else If cmbPrinter.Index = 1 Then
        '
        '     Printer1.OutputFile = Utils.PathFromFile(gcd.Drawing.FileName) &/ Utils.FileWithoutExtension(gcd.Drawing.FileName) & ".pdf"

    Else
        Printer1.OutputFile = ""
        Printer1.Name = cmbPrinter.Text
    End If

    Printer1.Print

End

Public Sub cmbPaperSize_Click()

    Dim sParts As String[]

    If Left(cmbPaperSize.Text, 1) = "A" Then

        vlbHeight.Enabled = False
        vlbWIdth.Enabled = False
        lblHeight.Enabled = False
        lblWIdth.Enabled = False

        sParts = Split(cmbPaperSize.Text, " ")

        If radPortrait.Value Then
            vlbWIdth.Text = Left(sParts[1], -2)
            vlbHeight.Text = Left(sParts[3], -2)
        Else
            vlbWIdth.Text = Left(sParts[3], -2)
            vlbHeight.Text = Left(sParts[1], -2)

        End If

    Else
        vlbHeight.Enabled = True
        vlbWIdth.Enabled = True
        lblHeight.Enabled = True
        lblWIdth.Enabled = True

    Endif

End

Public Sub run()

    gcd.DrawingReady = False

    Me.ShowModal

End

Public Sub cmbScale_Click()

    Dim sScales As String[]

    If IsNumber(Left(cmbScale.Text, 1)) Then
        sScales = Split(cmbScale.Text, ":")

        lblScale1.Enabled = False
        lblScale2.Enabled = False
        vlbScaleDraw.Enabled = False
        vlbScalePaper.Enabled = False
        vlbScalePaper.Value = sScales[0]
        vlbScaleDraw.Value = sScales[1]
        radScale.Value = True
    Else
        lblScale1.Enabled = True
        lblScale2.Enabled = True
        vlbScaleDraw.Enabled = True
        vlbScalePaper.Enabled = True
    Endif

End

Public Sub radFitCustom_Click()

    vlbTop.Enabled = True
    vlbLeft.Enabled = True
    lblFit1.Enabled = True
    lblFit2.Enabled = True

End

Public Sub radFit_Click()

    vlbTop.Enabled = False
    vlbLeft.Enabled = False
    lblFit1.Enabled = False
    lblFit2.Enabled = False

End

Public Sub btnPrintWindow_Click()

    gcd.DrawingReady = True
    Me.radAreaWindow.Value = True
    gcd.clsJobCallBack = cadPrint ' necesitamos volver aca luego de que marque un area
    gcd.clsJob = cadSelection
    cadSelection.AllowPolySelection = False
    cadSelection.AllowGripEdit = False
    cadSelection.AllowSingleSelection = False
    gcd.clsJob.start()

    Me.Close()

End

Public Sub radFitToPage_Click()

    radFitTopLeft.Enabled = False
    radFitCenter.Enabled = False
    radFitCustom.Enabled = False
    vlbLeft.Enabled = False
    vlbTop.Enabled = False
    vlbScaleDraw.Value = 1
    vlbScalePaper.Value = 1

End

Public Sub radScale_Click()

    radFitTopLeft.Enabled = True
    radFitCenter.Enabled = True
    radFitCustom.Enabled = True
    vlbLeft.Enabled = True
    vlbTop.Enabled = True

End

Public Sub radLandscape_Click()

    cmbPaperSize_Click

End

Public Sub radPortrait_Click()

    cmbPaperSize_Click

End

Public Sub printer1_Begin()

End

Public Sub printer1_Paginate()

    Printer1.FullPage = True
    Printer1.Count = 1

End

Public Sub printer1_End()

    gcd.debuginfo("Print done")
    gcd.clsJobCallBack = Null
    cadSelection.AllowPolySelection = True
    cadSelection.AllowGripEdit = True
    cadSelection.AllowSingleSelection = True
    cadSelection.AllowRectSelection = True
    Me.Close(0)

End

Public Sub Printer1_Draw()

    If gcd.Drawing.Sheet.IsModel Then PrintModel(gcd.Drawing.CurrPrintStyle) Else PrintSheet(gcd.Drawing.Sheet)

End

Public Sub PrintModel(psy As PrintStyle)

    Dim flxLimits As New Float[]
    Dim scaleX, scaleY As Float

    Dim dX, dY, sX, sY As Float

    'gcd.debuginfo("Printing pages")
    '  Dim jPrint As New JSONCollection

    ' DETERMINO LO QUE HAY QUE IMPRIMIR
    If PSY.PrintArea = 0 Then ' all drawing

        flxLimits = clsEntities.ComputeLimits(gcd.Drawing.Sheet.Entities)

        PSY.PrintAreaX0 = flxLimits[0]
        PSY.PrintAreaY0 = flxLimits[1]
        PSY.PrintAreaX1 = flxLimits[2]
        PSY.PrintAreaY1 = flxLimits[3]

    Else If PSY.PrintArea = 1 Then ' viewport

        PSY.PrintAreaX0 = gcd.Xreal(0)
        PSY.PrintAreaY1 = gcd.Yreal(0)
        PSY.PrintAreaX1 = gcd.Xreal(fmain.GLArea1.WIdth)
        PSY.PrintAreaY0 = gcd.Yreal(fmain.GLArea1.h)

    Else

        ' nada porque ya estan seteados

    End If

    If ((PSY.PrintAreaX1 - PSY.PrintAreaX0) = 0) Or ((PSY.PrintAreaY1 - PSY.PrintAreaY0) = 0) Then
        Message.Error(("Wrong print area"))
        Printer1.Cancel
        Return
    Endif

    ' '==============================TEST 1==========================================
    ' ' De no mediar escalado y centrado, la impresion ocurrente entre
    '
    ' '   0,0 +-------------------------------+
    ' '       |                               |
    ' '       |                               |
    ' '       |                               |
    ' '       |                               |
    ' '       |                               |
    ' '       +-------------------------------+ Paint.W, Paint.H (ambos positivos)
    '
    ' '   Pero en OpenGL (y por ende las coordenadas de los dibujos)
    ' '       +-------------------------------+ Xmax,Ymax
    ' '       |                               |
    ' '       |                               |
    ' '       |            0;0                |
    ' '       |                               |
    ' '       |                               |
    ' '       +-------------------------------+
    '      -Xmin,-Ymin

    '==============================ACTUAL PRINT==========================================

    Paint.Reset ' vuelvo escalas y traslados a cero

    ' APLICO LA ESCALA

    If PSY.PrintScale = -1 Then ' fit to page

        Paint.Translate(Paint.W / 2, Paint.H / 2) ' centro el dibujo
        ' trato de meter centrado
        If (PSY.PrintAreaX1 - PSY.PrintAreaX0) > 1e-10 Then scaleX = Paint.w / (PSY.PrintAreaX1 - PSY.PrintAreaX0) Else scaleX = 1e10
        If (PSY.PrintAreaY1 - PSY.PrintAreaY0) > 1e-10 Then scaleY = Paint.H / (PSY.PrintAreaY1 - PSY.PrintAreaY0) Else scaleY = 1e10

        If ScaleX < ScaleY Then gcd.PrintingScale = ScaleX Else gcd.PrintingScale = Scaley
        Paint.Scale(gcd.PrintingScale * 0.85, -gcd.PrintingScale * 0.85)

        dx = -(PSY.PrintAreaX1 + PSY.PrintAreaX0) / 2
        dy = -(PSY.PrintAreaY1 + PSY.PrintAreaY0) / 2
        ' centro el dibujo
        'Paint.Translate(-(PSY.PrintAreaX1 + PSY.PrintAreaX0) / 2, -(PSY.PrintAreaY1 + PSY.PrintAreaY0) / 2)
    Else ' tengo que aplicar cierta escala y ciertos margenes

        'Paint.Translate(0, -Paint.H) '
        ' Escala basica de impresion, luego de esto, la escala a aplicar seran 1 unidad=1 m
        sX = Paint.WIdth / Printer1.PaperWIdth
        sY = Paint.Height / Printer1.PaperHeight
        ' primero aplico la escala, Unidades de dibujo:Metros
        gcd.PrintingScale = PSY.PrintScale * 1000 ' para pasar de mm a metros
        sX *= gcd.PrintingScale
        sY *= gcd.PrintingScale

        ' ahora los margenes solicitados

        If PSY.CenteringStyle = 0 Then 'custom
            Paint.Translate(0, Paint.H) ' centro el dibujo
            Paint.Scale(sX, -sY)
            dX = -PSY.PrintAreaX0
            dY = -PSY.PrintAreaY0

            dX += PSY.PrintOffsetX * gcd.PrintingScale
            dY += PSY.PrintOffsetY * gcd.PrintingScale

        Else If PSY.CenteringStyle = 1 Then ' top left
            'Paint.Translate(-PSY.PrintAreaX0 * gcd.PrintingScale, -PSY.PrintAreaY0 * gcd.PrintingScale)
            Paint.Translate(0, Paint.H) ' centro el dibujo
            Paint.Scale(sX, -sY)

            dX = -PSY.PrintAreaX0
            dY = -PSY.PrintAreaY0

        Else If PSY.CenteringStyle = 2 Then ' centered
            Paint.Translate(Paint.w / 2, Paint.H / 2) ' centro el dibujo
            Paint.Scale(sX, -sY)

            dx = -(PSY.PrintAreaX1 + PSY.PrintAreaX0) / 2
            dy = -(PSY.PrintAreaY1 + PSY.PrintAreaY0) / 2

        Endif
        'Paint.Translate(dX, dY)

    End If

    Dim L As Layer, E, E2 As Entity
    For Each E2 In gcd.Drawing.Sheet.Entities
        If e2.pLayer.Visible Then

            If Not e2.Visible Then Continue
            If PSY.PrintArea <> 0 Then E = clsEntities.TrimmedEntity(E2, PSY.PrintAreaX0, PSY.PrintAreaY0, PSY.PrintAreaX1, PSY.PrintAreaY1) Else e = e2
            If IsNull(e) Then Continue
            If psy.ColorStyle = 0 Then
                Paint.Brush = Paint.Color(Color.Black)
            Else If psy.ColorStyle = 1 Then
                Paint.Brush = Paint.Color(Color.Black)
            Else If psy.ColorStyle = 2 Then
                If E.Colour = 0 Or E.Colour >= 255 Or E.Colour = 8 Then
                    Paint.Brush = Paint.Color(Color.Black)
                Else
                    Paint.Brush = Paint.Color(gcd.GetGBColor(E.Colour, e.pLayer))
                End If
            End If

            ' TODO: aplicar las puntas segun color de la entidad
            Paint.LineWIdth = gcd.GetLineWt(e.LineWidth, e.pLayer) / gcd.PrintingScale * 0.25 ' punta 0.15mm
            Paint.Save  ' guardamos la matriz de transformacion por si la entidad la modifica
            ' If InStr("TEXT MTEXT ATTRIB ATTDEF", e.Gender) Then
            '     paint.Font.Size = Abs(e.fParam[cadText.ipaTextHeight] / gcd.PrintingScale * 2)   ' TODO: verificar
            ' End If
            clsEntities.Translate(e, dx, dy)
            clsEntities.Draw2(e)
            clsEntities.Translate(e, -dx, -dy)
            Paint.Restore ' restauramos la matriz

        End If
    Next

End

Public Sub PrintModelBackup(psy As PrintStyle)

    Dim flxLimits As New Float[]
    Dim scaleX, scaleY As Float

    Dim dX, dY, sX, sY As Float

    'gcd.debuginfo("Printing pages")
    '  Dim jPrint As New JSONCollection

    ' DETERMINO LO QUE HAY QUE IMPRIMIR
    If PSY.PrintArea = 0 Then ' all drawing

        flxLimits = clsEntities.ComputeLimits(gcd.Drawing.Sheet.Entities)

        PSY.PrintAreaX0 = flxLimits[0]
        PSY.PrintAreaY0 = flxLimits[1]
        PSY.PrintAreaX1 = flxLimits[2]
        PSY.PrintAreaY1 = flxLimits[3]

    Else If PSY.PrintArea = 1 Then ' viewport

        PSY.PrintAreaX0 = gcd.Xreal(0)
        PSY.PrintAreaY1 = gcd.Yreal(0)
        PSY.PrintAreaX1 = gcd.Xreal(fmain.GLArea1.WIdth)
        PSY.PrintAreaY0 = gcd.Yreal(fmain.GLArea1.h)

    Else

        ' nada porque ya estan seteados

    End If

    If ((PSY.PrintAreaX1 - PSY.PrintAreaX0) = 0) Or ((PSY.PrintAreaY1 - PSY.PrintAreaY0) = 0) Then
        Message.Error(("Wrong print area"))
        Printer1.Cancel
        Return
    Endif

    ' '==============================TEST 1==========================================
    ' ' De no mediar escalado y centrado, la impresion ocurrente entre
    '
    ' '   0,0 +-------------------------------+
    ' '       |                               |
    ' '       |                               |
    ' '       |                               |
    ' '       |                               |
    ' '       |                               |
    ' '       +-------------------------------+ Paint.W, Paint.H (ambos positivos)
    '
    ' '   Pero en OpenGL (y por ende las coordenadas de los dibujos)
    ' '       +-------------------------------+ Xmax,Ymax
    ' '       |                               |
    ' '       |                               |
    ' '       |            0;0                |
    ' '       |                               |
    ' '       |                               |
    ' '       +-------------------------------+
    '      -Xmin,-Ymin

    '==============================ACTUAL PRINT==========================================

    Paint.Reset ' vuelvo escalas y traslados a cero

    ' APLICO LA ESCALA

    If PSY.PrintScale = -1 Then ' fit to page

        Paint.Translate(Paint.W / 2, Paint.H / 2) ' centro el dibujo
        ' trato de meter centrado
        If (PSY.PrintAreaX1 - PSY.PrintAreaX0) > 1e-10 Then scaleX = Paint.w / (PSY.PrintAreaX1 - PSY.PrintAreaX0) Else scaleX = 1e10
        If (PSY.PrintAreaY1 - PSY.PrintAreaY0) > 1e-10 Then scaleY = Paint.H / (PSY.PrintAreaY1 - PSY.PrintAreaY0) Else scaleY = 1e10

        If ScaleX < ScaleY Then gcd.PrintingScale = ScaleX Else gcd.PrintingScale = Scaley
        Paint.Scale(gcd.PrintingScale * 0.85, -gcd.PrintingScale * 0.85)

        ' centro el dibujo
        Paint.Translate(-(PSY.PrintAreaX1 + PSY.PrintAreaX0) / 2, -(PSY.PrintAreaY1 + PSY.PrintAreaY0) / 2)
    Else ' tengo que aplicar cierta escala y ciertos margenes

        'Paint.Translate(0, -Paint.H) '
        ' Escala basica de impresion, luego de esto, la escala a aplicar seran 1 unidad=1 m
        sX = Paint.WIdth / Printer1.PaperWIdth
        sY = Paint.Height / Printer1.PaperHeight
        ' primero aplico la escala, Unidades de dibujo:Metros
        gcd.PrintingScale = PSY.PrintScale * 1000 ' para pasar de mm a metros
        sX *= gcd.PrintingScale
        sY *= gcd.PrintingScale

        ' ahora los margenes solicitados

        If PSY.CenteringStyle = 0 Then 'custom
            Paint.Translate(0, Paint.H) ' centro el dibujo
            Paint.Scale(sX, -sY)
            dX = -PSY.PrintAreaX0
            dY = -PSY.PrintAreaY0

            dX += PSY.PrintOffsetX * gcd.PrintingScale
            dY += PSY.PrintOffsetY * gcd.PrintingScale

        Else If PSY.CenteringStyle = 1 Then ' top left
            'Paint.Translate(-PSY.PrintAreaX0 * gcd.PrintingScale, -PSY.PrintAreaY0 * gcd.PrintingScale)
            Paint.Translate(0, Paint.H) ' centro el dibujo
            Paint.Scale(sX, -sY)

            dX = -PSY.PrintAreaX0
            dY = -PSY.PrintAreaY0

        Else If PSY.CenteringStyle = 2 Then ' centered
            Paint.Translate(Paint.w / 2, Paint.H / 2) ' centro el dibujo
            Paint.Scale(sX, -sY)

            dx = -(PSY.PrintAreaX1 + PSY.PrintAreaX0) / 2
            dy = -(PSY.PrintAreaY1 + PSY.PrintAreaY0) / 2

        Endif
        Paint.Translate(dX, dY)

    End If

    Dim L As Layer, E, E2 As Entity
    For Each E2 In gcd.Drawing.Sheet.Entities
        If e2.pLayer.Visible Then

            If Not e2.Visible Then Continue
            If PSY.PrintArea <> 0 Then E = clsEntities.TrimmedEntity(E2, PSY.PrintAreaX0, PSY.PrintAreaY0, PSY.PrintAreaX1, PSY.PrintAreaY1) Else e = e2
            If IsNull(e) Then Continue
            If psy.ColorStyle = 0 Then
                Paint.Brush = Paint.Color(Color.Black)
            Else If psy.ColorStyle = 1 Then
                Paint.Brush = Paint.Color(Color.Black)
            Else If psy.ColorStyle = 2 Then
                If E.Colour = 0 Or E.Colour >= 255 Or E.Colour = 8 Then
                    Paint.Brush = Paint.Color(Color.Black)
                Else
                    Paint.Brush = Paint.Color(gcd.GetGBColor(E.Colour, e.pLayer))
                End If
            End If

            ' TODO: aplicar las puntas segun color de la entidad
            Paint.LineWIdth = gcd.GetLineWt(e.LineWidth, e.pLayer) / gcd.PrintingScale  ' punta 0.15mm
            Paint.Save  ' guardamos la matriz de transformacion por si la entidad la modifica
            ' If InStr("TEXT MTEXT ATTRIB ATTDEF", e.Gender) Then
            '     paint.Font.Size = Abs(e.fParam[cadText.ipaTextHeight] / gcd.PrintingScale * 2)   ' TODO: verificar
            ' End If

            gcd.CCC[e.gender].draw2(e)
            Paint.Restore ' restauramos la matriz

        End If
    Next

End

Public Sub PrintSheet(s As Sheet)

    Dim flxLimits As New Float[]
    Dim scaleX, scaleY As Float
    Dim dX, dY, sX, sY As Float

    gcd.debuginfo("Printing pages")
    '  Dim jPrint As New JSONCollection

    gcd.debuginfo("Printing")
    gcd.DrawingReady = False

    Paint.Reset ' vuelvo escalas y traslados a cero

    ' fMain.Printer1.Paper = cmbPaperSize.Text  ' REEMPLAZADO POR LOS SIGUIENTES
    Printer1.PaperHeight = S.pPrintStyle.PaperSizeH
    Printer1.PaperWIdth = S.pPrintStyle.PaperSizeW
    Printer1.Orientation = S.pPrintStyle.PrintOrientation

    sX = Paint.WIdth / Printer1.PaperWIdth
    sY = Paint.Height / Printer1.PaperHeight
    ' primero aplico la escala, Unidades de dibujo:Metros
    gcd.PrintingScale = 1' 000 ' S.pPrintStyle.PrintScale * 1000 ' para pasar de mm a metros
    sX *= gcd.PrintingScale
    sY *= gcd.PrintingScale

    Paint.Translate(0, Paint.H) ' centro el dibujo
    Paint.Scale(sX, -sY)

    dX = -S.pPrintStyle.PrintAreaX0
    dY = -S.pPrintStyle.PrintAreaY0
    Paint.Translate(dX, dY)

    If cmbPrinter.Index = 0 Then
        Printer1.OutputFile = User.Home &/ "print.pdf"
    Else
        Printer1.OutputFile = ""
        Printer1.Name = cmbPrinter.Text
    End If

    ' APLICO LA ESCALA

    Dim L As Layer, E, E2 As Entity

    gcd.PrintingScale = 0.1
    For Each E2 In gcd.Drawing.Sheet.Entities
        If e2.pLayer.Visible Then

            If Not e2.Visible Then Continue
            e = e2
            If IsNull(e) Then Continue
            If e.LineWIdth = 0 Then e.LineWIdth = 1
            ' If jPrint.Exist("Monochrome") Then
            '   If jPrint["Monochrome"] Then
            '     e.colour = 255
            '   Endif
            ' Endif
            Paint.Brush = Paint.Color(Color.Black)

            ' TODO: aplicar las puntas segun color de la entidad
            Paint.LineWIdth = 0.15 / 10  ' punta 0.15mm
            Paint.Save  ' guardamos la matriz de transformacion por si la entidad la modifica
            ' If InStr("TEXT MTEXT ATTRIB ATTDEF", e.Gender) Then
            '     paint.Font.Size = Abs(e.fParam[cadText.ipaTextHeight] / gcd.PrintingScale * 2)   ' TODO: verificar
            ' End If

            gcd.CCC[e.gender].draw2(e)
            Paint.Restore ' restauramos la matriz

        End If
    Next

End

Public Sub btnCreateNewPrintStyle_Click()

    Dim ps As New PrintStyle

    SetStyle(ps)

    ps.Name = txtNewPrintStyle.Text

    ' verifico que no exista
    If gcd.PrintStyles.Exist(ps.Name) Then
        If Message.Question(("There is a PrintStyle with that name, overwrite?"), ("Yes"), "No") = 1 Then
            gcd.PrintStyles.Remove(ps.Name)
            gcd.PrintStyles.Add(ps, ps.Name)
        Else
            Return
        End If
    Endif
    gcd.PrintStyles.Add(ps, ps.Name)
    txtNewPrintStyle.Text = ""
    LoadStyles

End

Public Sub LoadStyles()

    Dim ps As PrintStyle

    cmbPrintStyles.Clear
    For Each ps In gcd.PrintStyles
        cmbPrintStyles.Add(ps.Name)
    Next

End

Public Sub btnUsePrintStyle_Click()

    ' la inversa q setear styles
    Dim ps As PrintStyle

    ps = gcd.PrintStyles[cmbPrintStyles.Text]

    If ps.ColorStyle = 0 Then radMono.Value = True
    If ps.ColorStyle = 1 Then radGray.Value = True
    If ps.ColorStyle = 2 Then radColor.Value = True

    vlbScalePaper.Value = ps.ScalePaper
    vlbScaleDraw.Value = ps.ScaleDrawingUnit

    If ps.PrintScale = -1 Then radFitToPage.Value = True

    vlbWIdth.Value = ps.PaperSizeW
    vlbHeight.Value = ps.PaperSizeH
    ' pongo el tamaño?
    Try cmbPaperSize.Text = ps.PaperName

    ' margenes
    vlbLeft.Value = ps.PrintOffsetX
    vlbTop.Value = ps.PrintOffsetY

    If ps.CenteringStyle = 1 Then
        radFitTopLeft.Value = True
    Else If ps.CenteringStyle = 2 Then
        radFitCenter.Value = True
    Else If ps.CenteringStyle = 0 Then
        radFitCustom.Value = True
    End If

    If ps.PrintOrientation = Printer.Landscape Then radLandscape.Value = True Else radPortrait.Value = True
    If ps.PrintInvert Then chkInvert.Value = True

    If ps.PrintArea = 2 Then Me.radAreaWindow.Value = True
    If ps.PrintArea = 0 Then Me.radAreaAll.Value = True
    If ps.PrintArea = 1 Then Me.radAreaView.Value = True

    snxAreaToPrint[0] = ps.PrintAreaX0
    snxAreaToPrint[1] = ps.PrintAreaY0
    snxAreaToPrint[2] = ps.PrintAreaX1
    snxAreaToPrint[3] = ps.PrintAreaY1

    gcd.Drawing.CurrPrintStyle = ps

End

Public Sub btnFullPreview_Click()

    SetStyle(gcd.Drawing.CurrPrintStyle)

    fPrintPreview.ShowModal()

End
