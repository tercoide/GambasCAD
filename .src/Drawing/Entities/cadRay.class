' Gambas class file

' GambasCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
Create Static
'Fast
Inherits CadLine
Public Const Gender As String = "RAY"
Public Const DrawingOrder As Integer = 1        ' 1 = draws first
Public Const CmdLineHelper As String = ("an infinite ray")
Public Const ParamType As String = "PP"                             ' that is Point, Point; could be Color Text, etc
Public Const ParamHelper As String = "Start point;Ray direction"

Private p2 As New Float[]

Private Sub MakeRay(p As Float[])

    p2.Clear

    p2.Add(P[0])
    p2.Add(P[1])

    p2.Add((P[2] - p[0]) * 1e10)
    p2.Add((P[3] - p[1]) * 1e10)

    p2.Add(P[0])
    p2.Add(P[1])

    p2.Add((P[2] - p[0]) * -1e10)
    p2.Add((P[3] - p[1]) * -1e10)

End

Public Sub Draw(oE As Entity)

    If Not oE.Visible Then Return

    MakeRay(oe.p)

    glx.DrawLines(p2, gcd.GetGBColor(oE.Colour, oe.pLayer), gcd.GetLineWt(oE.LineWIdth, oe.pLayer), oE.LineType.TrameLength)

End

'' A fat version of the line
Public Sub DrawSelected(oE As Entity)

    Dim i As Integer
    Dim iLineType As Integer

    ' If oe.LineType = gcd.stiDashed Then iLineType = 0 Else iLineType = gcd.stiDashed
    MakeRay(oe.p)

    'glx.DrawLines(p2, config.WindowBackColor, gcd.GetLineWt(oE.LineWIdth, oe.pLayer), iLineType)

    glx.DrawLines(p2, Color.Gradient(gcd.GetGBColor(oE.Colour, oe.pLayer), Config.ModelBackgroundColor), gcd.GetLineWt(oE.LineWIdth, oe.pLayer), oE.LineType.TrameLength)

End
'' A fat version of the line

Public Sub DrawRemark(oE As Entity)

    If Not oE.Visible Then Return

    MakeRay(oe.P)

    glx.DrawLines(P2, Color.Gradient(gcd.GetGBColor(oE.Colour, oe.pLayer), Config.WhiteAndBlack), gcd.GetLineWt(oE.LineWIdth, oe.pLayer) + 1, oE.LineType.TrameLength)

End

'' The paint version of the entity
Public Function Draw2(oE As Entity)

    paint.MoveTo(oE.p[0], oE.p[1])
    paint.LineTo(oE.p[2], oE.p[3])
    paint.Stroke

End

' '' Creo los puntos de interes
' '' Build point of interest
'
' Public Function BuildPOI(oE As Entity) As Integer
'
'     ' si este valor no es provisto , estos POI son de la ultima entidad
'
'     oe.PoiPoints.Clear
'     oe.PoiType.Clear
'
'     ' points: end-mid-end
'     oe.poiPoints.insert([oE.p[0], oE.p[1]])
'     oe.poiType.Add(gcd.poiEndPoint)
'
'     oe.poiPoints.insert([(oE.P[0] + oE.P[2]) / 2, (oE.P[1] + oE.P[3]) / 2])   ' mid
'     oe.poiType.Add(gcd.poiMIdPoint)
'     'gcd.CurrDrawing.poiEntities.Add(arrIndex)
'
'     oe.poiPoints.insert([oE.p[2], oE.p[3]])
'     oe.poiType.Add(gcd.poiEndPoint)
'     'gcd.CurrDrawing.poiEntities.Add(arrIndex)
'
'     ' line
'     ' gcd.CurrDrawing.poiLines.insert([oE.p[0], oE.p[1], oE.p[2], oE.p[3]])
'     ' gcd.CurrDrawing.poiLinesEntities.Add(arrIndex)
'     'gcd.CurrDrawing.poiLinesRelPoint.Insert([0, 1])
'
' End

Public Sub ExportDXFCol(e As Entity, ByRef stxExport As String[]) As Boolean

    ' stxExport.insert(["RAY", dxf.codEntity])
    ' Los datos comunes a todas las entidades son guardados por la rutina que llama a esta
    stxExport.insert(["AcDbRay", "100"])
    stxExport.insert([CStr(e.p[0]), dxf.codX0])  ' Start
    stxExport.insert([CStr(e.p[1]), dxf.codY0])
    stxExport.insert([CStr(e.p[2]), DXF.codX1])  ' End
    stxExport.insert([CStr(e.p[3]), dxf.codY1])

End
