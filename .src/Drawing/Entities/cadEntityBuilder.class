' Gambas class file

' GambasCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA

Create Static

' Pixeles
Public Const Gender As String = "BUILDER"
Public LastMouseDownX As Integer    ' change in MouseDown
Public LastMouseDownY As Integer
Public SelStartX As Integer         ' change in MouseDown
Public SelStartY As Integer
Public SelEndX As Integer           ' change in MouseMove/MouseUp
Public SelEndY As Integer

' Metros
Public SelStartXr As Float          ' Seleccion libre rectangular
Public SelStartZr As Float          ' en metros
Public SelEndXr As Float            ' aca Y es Z
Public SelEndZr As Float

Public LastX As Float               ' change in MouseMove/MouseUp
Public LastY As Float
Public LastPoint As Boolean

Public LastMouseX As Integer               ' change in MouseMove/MouseUp
Public LastMouseY As Integer

' indicadores
'Public StepsDone As Integer = 0          ' La cantidad de puntos que marco para el trabajo actual--->Gurdado en la entidad
Public StepsTotal As Integer = 0          ' Tomado de la lista de tipo de paramtros
Public PointsTotal As Integer = 0          ' Tomado de la lista de tipo de paramtros
Public NextParamType As String          ' What kind of input the element expects P=point, F=float, C=color, S=string, M=mixed either Point, or Float that is taken from Max(Px-Px', Pz-Pz')
Public ParamHelperList As String[]
Public ParamDefault As String[]
Public prompt As String

' indices de valores ingresados
Public iPoints As Integer
Public iFloat As Integer
Public iString As Integer

Public iCounter As Integer

Public elem As Entity
Public PoiChecking As Boolean = True
Public EntityChecking As Boolean = False
Public LastEntity As Entity

Public XYreal As Float[]

Public Const ContextMenu As String = ("Cancel;_CANCEL;;") ' el menu para el boton derecho, los comendos en mayusculas NO se traducen

Public Function Start(Optional ElemToBuild As Variant, Optional Mode As Integer = -1)

    ' Parameters that we can process

    ' P point x,y
    ' + add a point every time, used like this "P+"
    ' F float, text entered (mouse is ignored)
    ' T text
    ' A angle, can be given by mouse or text
    ' L distance, idem
    ' R Float or distance to a perpendicular to a line from las 2 points
    ' M Mixed data

    ' TODO: implement
    ' C color, can be given by typing the color

    ' B boolean yes/no si/no
    ' D date

    ' limpiamos la seleccion

    Dim IsSet As Boolean

    LastPoint = False
    clsEntities.DeSelection()

    clsEntities.GLGenDrawListSel(0)

    ' Verify if its a valid class to build
    If TypeOf(ElemToBuild) <> gb.Object Then                                            ' not Entity class given

        If LastEntity Then                                            ' we know the last element, try to create a new one
            elem = Gcd.CCC[LastEntity.gender].newentity()

        Else                                                                            ' the is no way to know what element was done last

            DrawingAIds.ErrorMessage = ("Can't create entity")
            gcd.clsJob = cadSelection                                               ' back to select mode
            gcd.clsJobPrevious = cadSelection
            Return

        End If

    Else                                                                                ' Valid entity
        ' start building the element
        elem = elemtobuild.newentity()

    End If
    ' ' TODO LO DE ABAJO SE HACE EN LA Gcd.CCC[e.gender]
    ' clsEntities.FillEntity(elem)
    ' IsSet = Gcd.CCC[elem.gender].setEntity(elem)
    ' If Not IsSet Then
    '     clsEntities.setEntity(elem)
    ' End If
    ' reset from previous element

    gcd.StepsDone = 0

    Try elem.colour = gcd.CurrentColor()
    elem.LineWIdth = gcd.Drawing.CurrLineWt
    If elem.LineWIdth = 0 Then elem.LineWIdth = 1
    If gcd.Drawing.Sheet.IsModel Then elem.PaperSpace = False Else elem.PaperSpace = True

    iPoints = 0
    iFloat = 0
    iString = 0

    Pointstotal = elem.p.count / 2                                          ' at this point P is either set or 0 if non determined
    StepsTotal = Len(Gcd.CCC[elem.gender].ParamType)

    ' get the helper list, and parameter types from the element
    Try Paramhelperlist = Split(Gcd.CCC[elem.gender].ParamHelper, ";")                      ' optional
    Try Paramdefault = Split(Gcd.CCC[elem.gender].ParamDefault, ";")                        ' optional

    NextParamType = UCase(Mid(Gcd.CCC[elem.gender].ParamType, Gcd.StepsDone + 1, 1))
    'DrawingAIds.CmdLineHelperNext = ParamHelperList[Gcd.StepsDone]

    If mode >= 0 Then
        Try elem.iParam[Gcd.CCC[elem.gender].iiiMode] = mode

    End If

    If gcd.SnapMode <> 0 Then gcd.SnapMode = Config.SnapModeSaved       ' volvemos de un SnapMode forzado por el user

    ' armamos el menu contextual y lo asignamos a la GL area
    gcd.Drawing.Sheet.GlSheet.PopupMenu = elem.Gender

    'If Utils.MenuMaker(fMain, "mEntityBuilder", Gcd.CCC[elem.gender].ContextMenu & Me.ContextMenu) Then fMain.GLArea1.PopupMenu = "mEntityBuilder" Else Stop

    fMain.KeysAccumulator = ""
    Me.prompt = Gcd.CCC[elem.gender].prompt

    gcd.DrawHoveredEntity = False

End

' DEPRECADO
' Public Sub KeyPress()
'
'
'     If NextParamType Then Gcd.CCC[elem.gender].NewParameter(elem, ["text", fMain.KeysAccumulator])
'
'     gcd.redraw
'
' End

Public Function KeyText(EnteredText As String) ' esta rutina es llamada por FCAD en el evento FCAD_KeyPress cuando recibe una texto + <Enter>

    ' Lets see what are we expecting
    Dim Xt, yt As Float, sText, ErrTxt As String, Relative As Boolean
    Dim bResult As Boolean

    ' primero veo si el entorno nos pide algo
    Select Case UCase(EnteredText)
        Case "_CANCEL"
            Me.Cancel
            Return
        Case "_MIDPOINT", "_MID"
            gcd.SnapMode = gcd.poiMIdPoint
        Case "_ENDPOINT", "_END"
            gcd.SnapMode = gcd.poiEndPoint
        Case "_PERPENDICULAR", "_PER"
            gcd.SnapMode = gcd.poiPerpendicular
        Case "_NEAREST", "_NEA"
            gcd.SnapMode = gcd.poiNearest
        Case "_CENTER", "_CEN"
            gcd.SnapMode = gcd.poiCenter
        Case "_INTERSECTION", "_INT"
            gcd.SnapMode = gcd.poiIntersection
        Case "_BASEPOINT", "_BAS"
            gcd.SnapMode = gcd.poiBasePoint
        Case "_TANGENT", "_TAN"
            gcd.SnapMode = gcd.poiTangent
        Case "_QUADRANT", "_QUA"
            gcd.SnapMode = gcd.poiQuadrant
    End Select

    Select Case NextParamType

        Case "P", "+", "M"
            errtxt = ", expected a valId point like 12.4,9.5  or @12.34,10.5"
            ' lets filter
            EnteredText = Trim$(UCase$(EnteredText))
            sText = Left(EnteredText, 1)
            ' So we expect a position x,y , but in some cases it can be
            ' C = close
            ' U = undo, delete last segment
            ' and others

            If InStr("@0123456789.", sText) > 0 Then ' es un numero
                If InStr(EnteredText, "@") > 0 Then    ' may be a point
                    Relative = True
                    EnteredText = Replace(EnteredText, "@", "")
                Endif
                Xt = CFloat(Eval(Split(EnteredText, ",")[0]))
                yt = CFloat(Eval(Split(EnteredText, ",")[1]))

                If Relative And (elem.P.count > 2) Then
                    xt += Me.LastX
                    yt += Me.LastY

                Endif
                Me.LastX = xt
                Me.LastY = yt

                If Gcd.CCC[elem.gender].NewParameter(elem, ["point", xt, yt], True) Then
                    ' last point
                    gcd.Drawing.LastPoint.Clear
                    gcd.Drawing.LastPoint.Insert([xt, yt])
                    AdvanceStep
                End If

            Else    ' es una letra

                If Gcd.CCC[elem.gender].NewParameter(elem, ["text", EnteredText], True) Then AdvanceStep

            End If

            ' esto no se maneja mas a este nivel, cada entidad lo maneja en NewParameter

            ' If Left(EnteredText, 1) = "C" Then          ' close the element
            '     ' got othe first point and exit
            '     If Gcd.CCC[elem.gender].NewParameter(elem, ["close"]) Then Me.Finish
            '
            ' Else If Left(EnteredText, 1) = "U" Then     ' undo last command and go
            '
            '     If Gcd.CCC[elem.gender].NewParameter(elem, ["undo"]) Then Me.Finish
            '
            ' Else
            '

        Case "T"
            errtxt = ", expected text, not a point"
            ' its a valid input?
            If EnteredText = "" Then

                sText = ParamDefault[gcd.StepsDone]

            Else

                sText = EnteredText

            End If

            If Gcd.CCC[elem.gender].NewParameter(elem, ["text", sText], True) Then AdvanceStep

        Case "F", "A", "L", "R"                ' Float, Mixed, Angle, Longitud
            errtxt = "enter a valId text size"

            If EnteredText = "" Or EnteredText = "U" Then
                Try bResult = Gcd.CCC[elem.gender].NewParameter(elem, ["float", ParamDefault[gcd.StepsDone]], True)

            Else

                bResult = Gcd.CCC[elem.gender].NewParameter(elem, ["float", CFloat(EnteredText)], True)

            Endif

            If bResult Then AdvanceStep

        Case "C"                                ' color
            If Dialog.SelectColor() Then
                elem.fParam[iFloat] = CFloat(Dialog.Color)
                Inc iFloat
                AdvanceStep

            Endif
            Key.Cod

    End Select

Finally
    '
    Return
    '
Catch
    '
    '   ' unexpected input
    DrawingAIds.ErrorMessage = ("Bad input" & ErrTxt)

End

Public Sub KeyUp(iCode As Integer)

    If icode = Key.ControlKey Then gcd.Orthogonal = False

End

Public Sub AdvanceStep()

    Inc gcd.StepsDone
    If gcd.StepsDone = StepsTotal Then

        Me.Finish
    Else

        ' prepare next stuff
        '
        NextParamType = UCase(Mid(Gcd.CCC[elem.gender].ParamType, gcd.StepsDone + 1, 1))
        If NextParamType = "" Then NextParamType = "+"
        If NextParamType = "+" Then ' add another point
            Inc StepsTotal
            NextParamType = "P"
        Endif

        'Try DrawingAIds.CmdLineHelperNext = ParamHelperList[gcd.StepsDone]          ' try in case of lack of desciption or keep last
        If ParamDefault.Count > gcd.StepsDone Then                            ' not null
            ParamDefault[gcd.StepsDone] = Trim$(ParamDefault[gcd.StepsDone])
            'If ParamDefault[gcd.StepsDone] <> "" Then DrawingAIds.CmdLineHelperNext &= "[" & ParamDefault[gcd.StepsDone] & "]"           ' try in case of lack of desciption or keep last
        End If
        Me.MouseMove
    Endif

    fMain.KeysAccumulator = ""
    Me.prompt = Gcd.CCC[elem.gender].prompt

    gcd.redraw

End

Public Sub MouseMove()

    Dim X, Y, f As Float
    Dim MouseTry As Integer = -1000000

    Try MouseTry = Mouse.X
    If MouseTry >= 0 Then ' mouse is active

        LastMouseX = Mouse.X
        LastMouseY = Mouse.Y

    Endif

    X = gcd.Xreal(LastMouseX)
    Y = gcd.Yreal(LastMouseY)

    ' yo soy el responsable de chequear POI
    If Not gcd.flgSearchingPOI Then
        gcd.Drawing.iEntity = clsMouseTracking.CheckBestPOI(x, Y)
    End If

    X = gcd.Near(X)
    Y = gcd.Near(Y)

    ' pero veo si tengo un POI

    If InStr("LAPRM", NextParamType) = 0 Then Return ' we are expecting a parameter

    ' a very special case
    If elem.Gender = "SPLINE" And (Me.iPoints <> elem.P.Count / 2 - 1) Then Inc iPoints

    ' if we expect a parameter, it will be passed
    If NextParamType = "A" Then

        ' return the angle from horizontal to us
        f = Ang(gcd.Xreal(LastMouseX) - Me.LastX, gcd.Yreal(LastMouseY) - Me.lastY)
        f *= 180 / Pi
        Gcd.CCC[elem.gender].NewParameter(elem, ["float", f])

        gcd.redraw

        Return              ' nothing more to do here
    End If

    If NextParamType = "R" Then

        Gcd.CCC[elem.gender].NewParameter(elem, ["point", x, y])
        gcd.redraw

        Return              ' nothing more to do here
    End If

    If NextParamType = "L" Then

        ' return the angle from horizontal to us
        f = puntos.distancia(gcd.Xreal(LastMouseX), gcd.Yreal(LastMouseY), Me.LastX, Me.lastY)

        Gcd.CCC[elem.gender].NewParameter(elem, ["float", f])

        gcd.redraw

        Return              ' nothing more to do here

    End If

    ' y si tengo enganche?

    If (gcd.Drawing.iEntity[2] > 0) Then

        ' esto re enganchado

        X = gcd.Drawing.iEntity[0]
        Y = gcd.Drawing.iEntity[1]

        ' aca tengo que verificar el ortogonal

    Else                                      ' puedo hacer ortogonal
        If gcd.Orthogonal And LastPoint Then          ' hablame de operadores logicos

            If Abs(X - LastX) > Abs(Y - LastY) Then ' prevalece X
                Y = LastY
            Else
                X = LastX
            Endif

        End If

    End If

    Gcd.CCC[elem.gender].NewParameter(elem, ["point", x, y])
    ' LastMouseX = Mouse.X
    ' LastMouseY = Mouse.Y

    gcd.redraw

End

Public Sub KeyPress(iCode As Integer, sKey As String)

End

Public Sub MouseUp()

    Dim X, Y, f As Float

    If Mouse.Right Then
        gcd.clsJob.KeyText("U")
        Return
    End If

    DrawingAIds.ErrorMessage = ""
    If InStr("LAPRM", NextParamType) = 0 Then Return ' we are expecting a parameter

    ' if we expect a parameter, it will be passed
    If NextParamType = "A" Then

        ' return the angle from horizontal to us
        f = Ang(gcd.Xreal(mouse.x) - Me.LastX, gcd.Yreal(mouse.y) - Me.lastY)
        f *= 180 / Pi
        If Gcd.CCC[elem.gender].NewParameter(elem, ["float", f], True) Then AdvanceStep
        gcd.redraw
        Return              ' nothing more to do here
    End If

    If NextParamType = "R" Then

        If Gcd.CCC[elem.gender].NewParameter(elem, ["point", gcd.Xreal(mouse.x), gcd.Yreal(mouse.y)], True) Then

            ' last point
            gcd.Drawing.LastPoint.Clear
            gcd.Drawing.LastPoint.Insert([gcd.Xreal(mouse.x), gcd.Yreal(mouse.y)])
            AdvanceStep
        End If
        gcd.redraw
        Return
    End If

    If NextParamType = "L" Then

        ' return the angle from horizontal to us
        f = puntos.distancia(gcd.Xreal(mouse.x), gcd.Yreal(mouse.y), Me.LastX, Me.lastY)

        If Gcd.CCC[elem.gender].NewParameter(elem, ["float", f], True) Then AdvanceStep
        gcd.redraw
        Return              ' nothing more to do here

    End If

    ' we are waiting for a point

    X = gcd.Near(gcd.Xreal(mouse.x))
    Y = gcd.Near(gcd.Yreal(mouse.y))

    ' y si tengo enganche?

    If (gcd.Drawing.iEntity[2] > 0) Then

        ' esto re enganchado

        X = gcd.Drawing.iEntity[0]
        Y = gcd.Drawing.iEntity[1]

        ' aca tengo que verificar el ortogonal

    Else                                                                        ' puedo hacer ortogonal
        If gcd.Orthogonal And LastPoint Then          ' hablame de operadores logicos

            If Abs(X - LastX) > Abs(Y - LastY) Then ' prevalece X
                Y = LastY
            Else
                X = LastX
            Endif

        End If

    End If

    LastX = X
    LastY = Y
    LastPoint = True

    If Gcd.CCC[elem.gender].NewParameter(elem, ["point", x, y], True) Then

        ' last point
        gcd.Drawing.LastPoint.Clear
        gcd.Drawing.LastPoint.Insert([x, y])
        AdvanceStep
    End If

    gcd.redraw

End

Public Sub MouseDown()

End

Public Sub MouseWheel()

    ToolsBase.MouseWheel()

End

Public Sub DblClick()

End

Public Sub Draw()

    ' algunas entidades necesitan que se genere la poly
    clsEntities.BuildGeometry(elem)
    clsEntities.Draw(elem)
    DrawingAids.DrawSnapText()
    ' Debug "ENTITYBUILDER: Drawn " & iCounter
    ' Inc iCounter

End

'' LLamada cuando se termina de dibujar una nueva entidad.
Public Sub Finish() As Boolean

    Dim eEndBlock As Entity

    ' La entidad se crea sin handle
    If elem.Id = "" Then elem.Id = gcd.NewId()
    ' depretest elem.HandleOwner = gcd.Drawing.Sheet.Handle
    If gcd.Drawing.Sheet.IsModel Then
        gcd.Drawing.Sheet.Entities.Add(elem, elem.Id)
        gcd.Drawing.Sheet.EntitiesVisibles.add(elem, elem.Id) ' FIXME: esto puede ser redundante
    Else
        gcd.Drawing.Sheet.Entities.Add(elem, elem.Id)
    End If

    elem.Container = gcd.Drawing.Sheet.Block

    If elem.pBlock Then
        ' para las DIMENSION
        If elem.pBlock.name = "*D" Then
            elem.pBlock.name &= elem.Id
            elem.pBlock.Id = gcd.NewId()
            gcd.Drawing.Blocks.Add(elem.pBlock, elem.pBlock.Id)
            'elem.pBlock.entities.Add(eEndBlock, eendblock.Id)
        End If
    Endif

    Gcd.CCC[elem.gender].Finish(elem)
    Try Gcd.CCC[elem.gender].LastMode = elem.iParam[Gcd.CCC[elem.gender].iiiMode]
    LastEntity = elem                                       ' save it to repeat on rigth click
    If Left(elem.Gender, 3) = "DIM" Then gcd.Drawing.LastDimension = elem

    '======Undo stuff===================================================================
    gcd.Drawing.uUndo.OpenUndoStage(("Draw a") & " " & elem.Gender, Undo.TypeCreate)
    gcd.Drawing.uUndo.AddUndoItem(Elem)
    gcd.Drawing.uUndo.CloseUndoStage()
    '====================================================================================

    gcd.Drawing.RequiresSaving = True
    gcd.DrawHoveredEntity = True
    gcd.Drawing.iEntity.Clear
    gcd.clsJobPrevious = Me

    ' If elem.Gender = "VIEWPORT" Then
    '     gcd.clsJob = clsViewportNav
    ' Else
    gcd.Drawing.Sheet.EntitiesSelected.Clear
    gcd.Drawing.Sheet.EntitiesSelected.Add(elem, elem.id)
    gcd.Drawing.Sheet.Grips.Clear
    gcd.CCC[elem.Gender].generategrips(elem)

    gcd.clsJob = cadSelection
    gcd.clsJob.start()
    'End If

    gcd.Drawing.Sheet.GlSheet.PopupMenu = ""
    cadSelection.PoiChecking = True
    DrawingAIds.CleanTexts

    ' Genero la lista de dibujado de OpenGL de esta entidad en particular
    clsEntities.GLGenDrawList(elem)

    ' y renuevo la lista para este layer
    clsEntities.glGenDrawListLayers(elem.pLayer)

    gcd.redraw

End

Public Sub Cancel()

    elem = Null
    gcd.clsJobPrevious = Me
    gcd.clsJob = cadSelection
    DrawingAIds.CleanTexts
    gcd.Redraw
    gcd.Drawing.Sheet.GlSheet.PopupMenu = ""

End

Public Sub KeyDown(iCode As Integer)

    If icode = Key.ControlKey Then gcd.Orthogonal = True

End
