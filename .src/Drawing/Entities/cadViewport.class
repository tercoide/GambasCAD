' Gambas class file

Create Static
Inherits CadRectangle
Public Const Gender As String = "VIEWPORT"
Public Const DrawingOrder As Integer = 1        ' 1 = draws first
Public Const CmdLineHelper As String = ("a line")
Public Const ParamType As String = "PP"                             ' that is Point, Point; could be Color Text, etc
Public Const ParamHelper As String = "Start point;End point"
Public Const TotalPoints As Integer = 2

Public Function NewEntity(Optional fPoints As Float[], bNewid As Boolean = False) As Entity

    Dim e As Entity

    e = Super.NewEntity(fPoints, bNewid)

    Dim v As New Viewport
    e.pBlock = v
    Return e

End

Public Function NewParameter(eBuild As Entity, vParam As Variant[], Optional Definitive As Boolean = False) As Boolean

    Super.NewParameter(eBuild, vParam, Definitive)
    Dim v As Viewport
    v = eBuild.pBlock
    v.X0 = eBuild.P[0]
    v.Y0 = eBuild.P[1]
    v.X1 = eBuild.P[2]
    v.Y1 = eBuild.P[3]
    If Definitive Then
        SetViewport(eBuild, gcd.Drawing.Sheet)
        Return True
    End If

End

Public Sub Draw(oE As Entity)

    ' En esta entidad , la rutina Draw funciona solo durante la construccion
    Dim flxPoly As New Float[]

    If Not oe.Visible Then Return

    Dim w, h As Float
    Dim v As Viewport

    v = oe.pBlock
    w = v.x1 - v.x0
    h = v.y1 - v.y0
    flxPoly.Add(v.x0)
    flxPoly.Add(v.y0)
    flxPoly.Add(v.x0 + w)
    flxPoly.Add(v.y0)
    flxPoly.Add(v.x0 + w)
    flxPoly.Add(v.y0 + h)
    flxPoly.Add(v.x0)
    flxPoly.Add(v.y0 + h)
    flxPoly.Add(v.x0)
    flxPoly.Add(v.y0)

    glx.PolyLines(flxPoly, Color.Blue, gcd.GetLineWt(oE.LineWIdth, oe.pLayer), oe.LineType.TrameLength)

    ' test

End

Public Sub DrawSelected(oE As Entity)

    Dim w, h As Float
    Dim v As Viewport

    v = oe.pBlock

    w = v.x1 - v.x0
    h = v.y1 - v.y0

    glx.PolyLines(oE.Polygon, config.WindowBackColor, gcd.GetLineWt(oE.LineWIdth, oe.pLayer), gcd.stiDashed)
    glx.PolyLines(oE.Polygon, Color.Gradient(gcd.GetGBColor(oE.Colour, oe.pLayer), Config.ModelBackgroundColor), gcd.GetLineWt(oE.LineWIdth, oe.pLayer), oE.LineType.TrameLength)

    glx.Rectangle2D(v.x0 - gcd.Metros(4), v.y0 - gcd.Metros(4), gcd.Metros(8), gcd.Metros(8), Color.Blue,,,, Color.Blue, 1)
    glx.Rectangle2D(v.x0 + W - gcd.Metros(4), v.y0 - gcd.Metros(4), gcd.Metros(8), gcd.Metros(8), Color.Blue,,,, Color.Blue, 1)
    glx.Rectangle2D(v.x0 + W - gcd.Metros(4), v.y0 + H - gcd.Metros(4), gcd.Metros(8), gcd.Metros(8), Color.Blue,,,, Color.Blue, 1)
    glx.Rectangle2D(v.x0 - gcd.Metros(4), v.y0 + H - gcd.Metros(4), gcd.Metros(8), gcd.Metros(8), Color.Blue,,,, Color.Blue, 1)

End

'' A fat version of the line
Public Sub DrawRemark(oE As Entity)

    If Not oE.Visible Then Return

    '  glx.PolyLines(oE.p, config.WindowBackColor, gcd.GetLineWt(oE.LineWIdth, oe.pLayer), gcd.stiDashed)
    '  glx.PolyLines(oE.p, gcd.GetGBColor(oE.Colour, oe.pLayer),oE.LineWidth + 2, oE.LineType)
    ' If oe.Selected Then
    '     glx.PolyLines(oE.Polygon, config.WindowBackColor, oE.LineWidth + 2, gcd.stiDashed)
    '     glx.PolyLines(oE.Polygon, config.ColorForSelected, oE.LineWidth + 2, oE.LineType.TrameLength)
    ' Else
    glx.PolyLines(oE.Polygon, config.WindowBackColor, gcd.GetLineWt(oE.LineWIdth, oe.pLayer), gcd.stiDashed)
    glx.PolyLines(oE.Polygon, gcd.GetGBColor(oE.Colour, oe.pLayer), oE.LineWidth + 2, oE.LineType.TrameLength)

End

Public Function Draw2(oE As Entity)

    '
    Dim v As Viewport

    ' obtengo el viewport
    v = gcd.Drawing.Sheets[oe.idContainer].Viewports[oe.sParam[0]]

    If Not v Then Return
    '
    Paint.Save

    Dim r As New Rect

    r.X = v.X0
    r.y = v.y0
    r.W = v.X1 - v.X0
    r.H = v.Y1 - v.Y0

    'Paint.ClipRect = r
    'Paint.Clip()

    Paint.translate(v.X0, v.Y0)                 ' trasladamos al viewport

    Paint.Translate(v.PanX, v.PanY)             ' trasladamos el paneo que se hizo dentro del Viewport

    Paint.Scale(v.ScaleZoom)

    ' tengo que invertir el sentido de giro porque en fPrint tengo EscY invertida
    '
    Dim re As New Rect

    re.X = v.X0
    re.Y = v.Y0
    re.Width = Abs(v.X1 - v.x0)
    re.Height = Abs(v.Y1 - v.y0)

    Paint.ClipRect = re
    Paint.Clip()

    Dim L As Layer, E, E2 As Entity
    For Each E In gcd.Drawing.Sheet.Entities
        If v.Layers.Exist(e.pLayer.id) Then

            If e.LineWidth = 0 Then e.LineWidth = 1

            Paint.Brush = Paint.Color(Color.Black)

            ' TODO: aplicar las puntas segun color de la entidad
            Paint.LineWidth = 0.15 / v.ScaleZoom  ' punta 0.15mm
            Paint.Save  ' guardamos la matriz de transformacion por si la entidad la modifica
            If InStr("TEXT MTEXT ATTRIB ATTDEF", e.Gender) Then
                paint.Font.Size = Abs(e.fParam[cadText.ipaTextHeight] / gcd.PrintingScale * 2)   ' TODO: verificar
            End If

            gcd.CCC[e.gender].draw2(e)
            Paint.Restore ' restauramos la matriz

        End If
    Next
    'Paint.ResetCli()
    Paint.Restore

End

Public Sub Finish(oE As Entity) As Boolean

    ' tareas finales de armado del objeto
    Dim l As Layer
    Dim c As Collection
    Dim v As Viewport

    v = oe.pBlock

    oe.PaperSpace = True

    Me.BuildGeometry(oe)
    Dim w, h As Float
    w = v.x1 - v.x0
    h = v.y1 - v.y0
    oE.Polygon.Clear
    oE.Polygon.add(v.x0)
    oe.Polygon.add(v.y0)
    oE.Polygon.add(v.x0 + w)
    oe.Polygon.Add(v.y0)
    oE.Polygon.add(v.x0 + w)
    oe.Polygon.add(v.y0 + h)
    oE.Polygon.add(v.x0)
    oe.Polygon.add(v.y0 + h)
    oE.Polygon.add(v.x0)
    oe.Polygon.add(v.y0)

    oE.psel.resize(oE.p.count / 2)

End

Public Sub SetViewport(oe As Entity, s As Sheet)

    Dim l As Layer
    Dim c As Collection

    Me.BuildGeometry(oe)
    Dim w, h As Float

    Dim v As Viewport
    v = oe.pBlock '= v
    oe.id = gcd.Newid()

    ' v.X0 = oe.P[0]
    ' v.Y0 = oe.P[1]
    ' v.X1 = oe.P[2]
    ' v.Y1 = oe.P[3]

    If v.x0 > v.x1 Then Swap v.x0, v.x1
    If v.y0 > v.y1 Then Swap v.y0, v.y1

    v.PanX = (v.x1 + v.x0) / 2
    v.PanY = (v.y1 + v.y0) / 2

    s.Viewports.Add(v, oe.id)
    For Each l In gcd.Drawing.Layers
        If l.Visible Then v.Layers.add(l, l.id)
    Next

    ' pero tengo que hacer algo mas aca, centrar el grafico en el viewport

    ' esto es un copy/paste de cadZoomE
    Dim limits As New Float[]

    limits = clsEntities.ComputeLimits(s.Entities)

    gcd.Drawing.xmenor = limits[0]
    gcd.Drawing.Ymenor = limits[1]
    gcd.Drawing.xmayor = limits[2]
    gcd.Drawing.ymayor = limits[3]

    If s.Entities.Count = 0 Then Return

    Dim SZx As Float
    ' ahora calculo donde estaria el centro de este dibujo

    Dim cx, cy As Float
    Dim px, py As Integer           ' coordenadas del punto medio

    cx = (gcd.Drawing.xmayor - gcd.Drawing.xmenor) ' tama√±o del mundo
    cy = (gcd.Drawing.Ymayor - gcd.Drawing.Ymenor)

    If cx = 0 Then cx = 0.00001
    If cy = 0 Then cy = 0.00001
    v.ScaleZoom = (v.y1 - v.y0) / cy * 0.9

    szx = (v.x1 - v.x0) / cx * 0.9

    If szx < v.ScaleZoom Then v.ScaleZoom = szx

    ' posicion del punto medio
    px = (gcd.Drawing.xmayor + gcd.Drawing.xmenor) / 2
    py = (gcd.Drawing.Ymayor + gcd.Drawing.Ymenor) / 2

    v.PanX -= px * v.ScaleZoom ' -gcd.Pixels(px)
    v.PanY -= py * v.ScaleZoom' -gcd.Pixels(py)

    If v.ScaleZoom > 1e6 Or v.ScaleZoom < 1e-6 Then
        v.ScaleZoom = 1
        v.PanX = 0
        v.PanY = 0
    End If

    s.Viewport = v

    ' agrego el Handle del viewport a la entidad
    oe.sParam.Clear
    oe.sParam.Add(v.id)

End

'' Return if that position is over the entity within the tolerance
Public Function OverMe(e As Entity, Xr As Float, Yr As Float, tolerance As Float) As Boolean

    If e.Polygon Then
        If puntos.isInside(e.Polygon, xr, yr) Then Return True
    End If

    Return False

End

Public Function ImportDXF(e As Entity, sClaves As String[], sValues As String[]) As Boolean

    Dim i As Integer
    Dim V As New Viewport
    Dim r As String
    Dim l As Layer
    Dim fVal, CenterX, CenterY As Float

    e.pBlock = v
    v.id = gcd.Newid()
    Do
        i = dxf.ReadCodePlus(100, sClaves, sValues, ByRef r, i, 10)
        i = Abs(i)
    Loop Until r = "AcDbViewport"

    i = dxf.ReadCodePlus(10, sClaves, sValues, ByRef CenterX, i)                  ' 10,20, 30 center point (in WCS)
    i = dxf.ReadCodePlus(20, sClaves, sValues, ByRef CenterY, i)
    i = dxf.ReadCodePlus(30, sClaves, sValues, ByRef r, i)                       ' ignoro

    i = dxf.ReadCodePlus(40, sClaves, sValues, ByRef fVal, i)                       ' 40 Width in paper space units
    v.X0 = CenterX - fVal / 2
    v.X1 = CenterX + fVal / 2

    i = dxf.ReadCodePlus(41, sClaves, sValues, ByRef fVal, i)                       ' 41 Height in paper space units
    v.Y0 = CenterY - fVal / 2
    v.Y1 = CenterY + fVal / 2

    i = dxf.ReadCodePlus(68, sClaves, sValues, ByRef r, i)                       ' Viewport status field
    i = dxf.ReadCodePlus(69, sClaves, sValues, ByRef r, i)                       ' Id

    i = dxf.ReadCodePlus(12, sClaves, sValues, ByRef r, i)                       ' 12/22 View center point
    v.PanX += CFloat(r)
    i = dxf.ReadCodePlus(22, sClaves, sValues, ByRef r, i)                       '
    v.Pany += CFloat(r)
    i = dxf.ReadCodePlus(13, sClaves, sValues, ByRef r, i)                       ' Snap base point
    i = dxf.ReadCodePlus(23, sClaves, sValues, ByRef r, i)                       '

    i = dxf.ReadCodePlus(14, sClaves, sValues, ByRef r, i)                       ' Snap spacing
    i = dxf.ReadCodePlus(24, sClaves, sValues, ByRef r, i)                       '

    i = dxf.ReadCodePlus(15, sClaves, sValues, ByRef r, i)                       ' grid spacing
    i = dxf.ReadCodePlus(25, sClaves, sValues, ByRef r, i)                       '

    i = dxf.ReadCodePlus(16, sClaves, sValues, ByRef r, i)                       ' 16/26/36 View direction vector (in WCS)
    i = dxf.ReadCodePlus(26, sClaves, sValues, ByRef r, i)
    i = dxf.ReadCodePlus(36, sClaves, sValues, ByRef r, i)

    i = dxf.ReadCodePlus(17, sClaves, sValues, ByRef r, i)                       ' 17/27/37 View target
    v.PanX += CFloat(r)
    i = dxf.ReadCodePlus(27, sClaves, sValues, ByRef r, i)
    v.Pany += CFloat(r)
    i = dxf.ReadCodePlus(37, sClaves, sValues, ByRef r, i)

    i = dxf.ReadCodePlus(42, sClaves, sValues, ByRef r, i)' 42 Perspective lens length

    i = dxf.ReadCodePlus(43, sClaves, sValues, ByRef r, i)' 43 Front clip plane Z value
    i = dxf.ReadCodePlus(44, sClaves, sValues, ByRef r, i)' 44 Back clip plane Z value
    i = dxf.ReadCodePlus(45, sClaves, sValues, ByRef r, i)' 45 View height (in model space units)
    'Debug "Zoom", CFloat(r) / (v.Y1 - v.y0)
    v.ScaleZoom = (v.Y1 - v.y0) / CFloat(r)

    v.PanX = -(v.PanX * v.ScaleZoom) + CenterX
    v.PanY = -(v.PanY * v.ScaleZoom) + CenterY
    i = dxf.ReadCodePlus(50, sClaves, sValues, ByRef r, i)' 50 Snap angle
    i = dxf.ReadCodePlus(51, sClaves, sValues, ByRef r, i)' 51 View twist angle
    i = dxf.ReadCodePlus(72, sClaves, sValues, ByRef r, i)' 72 Circle zoom percent

    For Each l In gcd.Drawing.Layers
        v.Layers.Add(l, l.id)
    Next
    Do
        i = dxf.ReadCodePlus(331, sClaves, sValues, ByRef r, i, 90)' 331 Frozen layer object ID/handle (multiple entries may exist) (optional)
        'Debug v.Id, "Layer frozen", r
        l = gcd.GetLayerByid(r)
        If l Then
            v.Layers.Remove(l.id)
        End If
    Loop Until i < 0
    i = Abs(i)

    '
    i = dxf.ReadCodePlus(90, sClaves, sValues, ByRef r, i)      ' 90 Viewport status bit-coded flags:
    '
    ' 1 (0x1) = Enables perspective mode
    ' 2 (0x2) = Enables front clipping
    ' 4 (0x4) = Enables back clipping
    ' 8 (0x8) = Enables UCS follow
    ' 16(0 x10) = Enables front clip Not at eye
    ' 32(0 x20) = Enables UCS icon visibility
    ' 64 (0x40) = Enables UCS icon at origin
    ' 128 (0x80) = Enables fast zoom
    ' 256 (0x100) = Enables snap mode
    ' 512 (0x200) = Enables grid mode
    ' 1024 (0x400) = Enables isometric snap style
    ' 2048 (0x800) = Enables hide plot mode
    ' 4096 (0x1000) = kIsoPairTop. If set and kIsoPairRight is not set, then isopair top is enabled. If both kIsoPairTop and kIsoPairRight are set, then isopair left is enabled
    ' 8192 (0x2000) = kIsoPairRight. If set and kIsoPairTop is not set, then isopair right is enabled
    ' 16384 (0x4000) = Enables viewport zoom locking
    ' 32768 (0x8000) = Currently always enabled
    ' 65536 (0x10000) = Enables non-rectangular clipping
    ' 131072 (0x20000) = Turns the viewport off
    ' 262144 (0x40000) = Enables the display of the grid beyond the drawing limits
    ' 524288 (0x80000) = Enable adaptive grid display
    ' 1048576 (0x100000) = Enables subdivision of the grid below the set grid spacing when the grid display is adaptive
    ' 2097152 (0x200000) = Enables grid follows workplane switching

    ' 340 Hard-pointer ID/handle to entity that serves as the viewport's clipping boundary (only present if viewport is non-rectangular)
    '
    ' 1 Plot style sheet name assigned to this viewport
    '
    ' 281 Render mode:
    '
    ' 0 = 2D Optimized (classic 2D)
    ' 1 = Wireframe
    ' 2 = Hidden line
    ' 3 = Flat shaded
    ' 4 = Gouraud shaded
    ' 5 = Flat shaded with wireframe
    ' 6 = Gouraud shaded with wireframe
    ' All rendering modes other than 2D Optimized engage the new 3D graphics pipeline. These values directly correspond to the SHADEMODE command and the AcDbAbstractViewTableRecord::RenderMode enum
    '
    ' 71 UCS per viewport flag:
    '
    ' 0 = The UCS will not change when this viewport becomes active.
    ' 1 = This viewport stores its own UCS which will become the current UCS whenever the viewport is activated
    '
    ' 74 Display UCS icon at UCS origin flag:
    '
    ' Controls whether UCS icon represents viewport UCS or current UCS (these will be different if UCSVP is 1 and viewport is not active). However, this field is currently being ignored and the icon always represents the viewport UCS
    '
    ' 110/120/130 UCS origin
    '
    ' 111/121/131 UCS X-axis
    '
    ' 112/122/132 UCS Y-axis
    '
    ' 345 ID/handle of AcDbUCSTableRecord if UCS is a named UCS. If not present, then UCS is unnamed
    '
    ' 346 ID/handle of AcDbUCSTableRecord of base UCS if UCS is orthographic (79 code is non-zero). If not present and 79 code is non-zero, then base UCS is taken to be WORLD
    '
    ' 79 Orthographic type of UCS: 0 = UCS is not orthographic 1 = Top; 2 = Bottom 3 = Front; 4 = Back 5 = Left; 6 = Right
    '
    ' 146 Elevation
    '
    ' 170 ShadePlot mode: 0 = As Displayed 1 = Wireframe 2 = Hidden 3 = Rendered
    '
    ' 61 Frequency of major grid lines compared to minor grid lines
    '
    ' 332 Background ID/Handle (optional)
    '
    ' 333 Shade plot ID/Handle (optional)
    '
    ' 348 Visual style ID/Handle (optional)
    '
    ' 292 Default lighting flag. On when no user lights are specified.
    '
    ' 282 Default lighting type: 0 = One distant light 1 = Two distant lights

    ' 141 View brightness
    '
    ' 142 View contrast
    '
    ' 63,421,431 Ambient light color. Write only if not black color.
    '
    ' 361 Sun ID/Handle (optional)
    ' 335 Soft pointer reference to viewport object (for layer VP property override)
    ' 343 Soft pointer reference to viewport object (for layer VP property override)
    ' 344 Soft pointer reference to viewport object (for layer VP property override)
    ' 91 Soft pointer reference to viewport object (for layer VP property override)
    i = CInt(r)

    v.Visibile = i And 64 ' TODO: no se porque pasa esto FIXME: !!!!
    e.Visible = v.Visibile
    Debug Bin(i)
    Return True

    '' catch

    Return False

End

Public Sub ExportDXFCol(e As Entity, ByRef stxExport As String[]) As Boolean

    Dim i As Integer
    Dim V As New Viewport
    Dim r As String
    Dim l As Layer
    Dim fVal, CenterX, CenterY, px, py As Float

    v = e.pBlock

    ' Los datos comunes a todas las entidades son guardados por la rutina que llama a esta
    stxExport.insert(["AcDbViewport", "100"])
    stxExport.insert([(v.X1 + v.X0) / 2, "10"])            ' center point
    stxExport.insert([(v.Y1 + v.Y0) / 2, "20"])
    stxExport.insert(["0", "30"])
    stxExport.insert([(v.X1 - v.X0), "40"])
    stxExport.insert([(v.Y1 + v.Y0), "41"])

    stxExport.insert(["0", "68"])                      ' Viewport status field
    stxExport.insert(["0", "69"])                      ' Id
    'v.PanX1 = -(v.PanX0 * v.ScaleZoom) + CenterX
    'v.PanY1 = -(v.PanY0 * v.ScaleZoom) + CenterY

    ' vpan0 = (vpan1 - center)/scalezoom
    px = -(v.PanX - (v.X1 + v.X0) / 2) / v.ScaleZoom
    py = -(v.Pany - (v.y1 + v.y0) / 2) / v.ScaleZoom
    stxExport.insert([px, "12"])                   ' 12/22 View center point
    stxExport.insert([py, "22"])
    stxExport.insert(["0", "13"])                      ' Snap base point
    stxExport.insert(["0", "23"])

    stxExport.insert(["0", "14"])                       ' Snap spacing
    stxExport.insert(["0", "24"])                       '

    stxExport.insert(["0", "15"])                       ' grid spacing
    stxExport.insert(["0", "25"])                       '

    stxExport.insert(["0", "16"])                       ' 16/26/36 View direction vector (in WCS)
    stxExport.insert(["0", "26"])
    stxExport.insert(["1", "36"])

    stxExport.insert(["0", "17"])                       ' 17/27/37 View target
    stxExport.insert(["0", "27"])
    stxExport.insert(["0", "37"])

    stxExport.insert(["0", "42"])                       ' 42 Perspective lens length

    stxExport.insert(["0", "43"])                       ' 43 Front clip plane Z value
    stxExport.insert(["0", "44"])                       ' 44 Back clip plane Z value
    stxExport.insert([(v.Y1 - v.y0) / v.ScaleZoom, "45"])                       ' 45 View height (in model space units)

    'v.ScaleZoom = (v.Y1 - v.y0) / CFloat(r)

    stxExport.insert(["0", "50"])                       ' 50 Snap angle
    stxExport.insert(["0", "51"])                       ' 51 View twist angle
    stxExport.insert(["0", "72"])                        ' 72 Circle zoom percent

    ' For Each l In gcd.Drawing.Layers
    '     v.Layers.Add(l, l.id)
    ' Next
    ' Do
    '     i = dxf.ReadCodePlus(331, sClaves, sValues, ByRef r, i, 90)' 331 Frozen layer object ID/handle (multiple entries may exist) (optional)
    '     'Debug v.Id, "Layer frozen", r
    '     l = gcd.GetLayerByid(r)
    '     If l Then
    '         stxExport.insert([l.id, "331"])
    '         v.Layers.Remove(l.id)
    '     End If
    ' Loop Until i < 0
    ' i = Abs(i)
    'TODO: implementar

    stxExport.insert(["64", "90"])      ' 90 Viewport status bit-coded flags:
    '
    ' 1 (0x1) = Enables perspective mode
    ' 2 (0x2) = Enables front clipping
    ' 4 (0x4) = Enables back clipping
    ' 8 (0x8) = Enables UCS follow
    ' 16(0 x10) = Enables front clip Not at eye
    ' 32(0 x20) = Enables UCS icon visibility
    ' 64 (0x40) = Enables UCS icon at origin
    ' 128 (0x80) = Enables fast zoom
    ' 256 (0x100) = Enables snap mode
    ' 512 (0x200) = Enables grid mode
    ' 1024 (0x400) = Enables isometric snap style
    ' 2048 (0x800) = Enables hide plot mode
    ' 4096 (0x1000) = kIsoPairTop. If set and kIsoPairRight is not set, then isopair top is enabled. If both kIsoPairTop and kIsoPairRight are set, then isopair left is enabled
    ' 8192 (0x2000) = kIsoPairRight. If set and kIsoPairTop is not set, then isopair right is enabled
    ' 16384 (0x4000) = Enables viewport zoom locking
    ' 32768 (0x8000) = Currently always enabled
    ' 65536 (0x10000) = Enables non-rectangular clipping
    ' 131072 (0x20000) = Turns the viewport off
    ' 262144 (0x40000) = Enables the display of the grid beyond the drawing limits
    ' 524288 (0x80000) = Enable adaptive grid display
    ' 1048576 (0x100000) = Enables subdivision of the grid below the set grid spacing when the grid display is adaptive
    ' 2097152 (0x200000) = Enables grid follows workplane switching

    ' 340 Hard-pointer ID/handle to entity that serves as the viewport's clipping boundary (only present if viewport is non-rectangular)
    '
    ' 1 Plot style sheet name assigned to this viewport
    '
    ' 281 Render mode:
    '
    ' 0 = 2D Optimized (classic 2D)
    ' 1 = Wireframe
    ' 2 = Hidden line
    ' 3 = Flat shaded
    ' 4 = Gouraud shaded
    ' 5 = Flat shaded with wireframe
    ' 6 = Gouraud shaded with wireframe
    ' All rendering modes other than 2D Optimized engage the new 3D graphics pipeline. These values directly correspond to the SHADEMODE command and the AcDbAbstractViewTableRecord::RenderMode enum
    '
    ' 71 UCS per viewport flag:
    '
    ' 0 = The UCS will not change when this viewport becomes active.
    ' 1 = This viewport stores its own UCS which will become the current UCS whenever the viewport is activated
    '
    ' 74 Display UCS icon at UCS origin flag:
    '
    ' Controls whether UCS icon represents viewport UCS or current UCS (these will be different if UCSVP is 1 and viewport is not active). However, this field is currently being ignored and the icon always represents the viewport UCS
    '
    ' 110/120/130 UCS origin
    '
    ' 111/121/131 UCS X-axis
    '
    ' 112/122/132 UCS Y-axis
    '
    ' 345 ID/handle of AcDbUCSTableRecord if UCS is a named UCS. If not present, then UCS is unnamed
    '
    ' 346 ID/handle of AcDbUCSTableRecord of base UCS if UCS is orthographic (79 code is non-zero). If not present and 79 code is non-zero, then base UCS is taken to be WORLD
    '
    ' 79 Orthographic type of UCS: 0 = UCS is not orthographic 1 = Top; 2 = Bottom 3 = Front; 4 = Back 5 = Left; 6 = Right
    '
    ' 146 Elevation
    '
    ' 170 ShadePlot mode: 0 = As Displayed 1 = Wireframe 2 = Hidden 3 = Rendered
    '
    ' 61 Frequency of major grid lines compared to minor grid lines
    '
    ' 332 Background ID/Handle (optional)
    '
    ' 333 Shade plot ID/Handle (optional)
    '
    ' 348 Visual style ID/Handle (optional)
    '
    ' 292 Default lighting flag. On when no user lights are specified.
    '
    ' 282 Default lighting type: 0 = One distant light 1 = Two distant lights

    ' 141 View brightness
    '
    ' 142 View contrast
    '
    ' 63,421,431 Ambient light color. Write only if not black color.
    '
    ' 361 Sun ID/Handle (optional)
    ' 335 Soft pointer reference to viewport object (for layer VP property override)
    ' 343 Soft pointer reference to viewport object (for layer VP property override)
    ' 344 Soft pointer reference to viewport object (for layer VP property override)
    ' 91 Soft pointer reference to viewport object (for layer VP property override)

    Return True

    '' catch

    Return False

End
