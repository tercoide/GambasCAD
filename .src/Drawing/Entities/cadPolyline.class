' Gambas class file

' GambasCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
Create Static
'Fast
Inherits CadLWPolyline

Public Const Gender As String = "POLYLINE"
Public Const DrawingOrder As Integer = 1        ' 1 = draws first
Public Const CmdLineHelper As String = ("a polyline of segments")

' The entity handler receives a user action, and returns the number of expected parameter
' If definitive = true, means the parameter is set
Public Function NewParameter(eBuild As Entity, vParam As Variant[], Optional Definitive As Boolean = False) As Boolean

    If gcd.StepsDone = 0 Then

        Try eBuild.P[0] = vParam[1]
        Try eBuild.P[1] = vParam[2]

        If definitive Then Return True

    Endif

End

Public Sub Draw(oE As Entity)

    If (oe.iParam[Me.iiiPolylineType] And 64) = 64 Then

        'glx.DrawTriangles3D(oe.p, oe.PolyLine, gcd.GetGBColor(oE.Colour, oe.pLayer), gcd.GetLineWt(oE.LineWIdth, oe.pLayer))
    Else
        glx.PolyLines(oe.PolyLine, gcd.GetGBColor(oE.Colour, oe.pLayer), gcd.GetLineWt(oE.LineWIdth, oe.pLayer), oE.LineType.TrameLength)
    End If

End

'' Builds the geometry of the entity wthout drwing it
Public Function BuildGeometry(E As Entity, Optional density As Float)

    Dim ePart As Entity
    Dim f As Float
    Dim i, ii, iii As Integer
    Dim v1, v2, n As New Punto3d

    If Not E.Visible Then Return

    ' construyo una poliliea
    e.PolyLine.Clear
    e.P.Clear
    ' Voy a procesar distinto si es una Poly comun o una cara
    If e.iParam[Me.iiiPolylineType] And 64 = 0 Then       ' Polilinea =======================================================

        For Each ePart In e.pBlock.entities
            If ePart.Gender Like "VERTEX*" Then

                If ((CInt(ePart.fParam[cadVERTEX.ipaFlags70])) Xor 128) = 0 Then Continue

                e.PolyLine.Add(ePart.P[0])
                e.PolyLine.Add(ePart.P[1])
                'Endif
                ' ======================= Mesh 3D

            Else If ePart.Gender <> "SEQEND" Then
                Stop
            End If
        Next
    Else If e.iParam[Me.iiiPolylineType] And 64 = 64 Then     ' Mesh 3D=============================================================
        For Each ePart In e.pBlock.entities
            If ePart.Gender Like "VERTEX*" Then

                If epart.fParam[cadVERTEX.ipaMeshIndex1_71] = 0 Then
                    e.P.Add(ePart.P[0])
                    e.P.Add(ePart.P[1])                 ' es un vertice
                    e.P.Add(ePart.P[2])
                Else    ' es una cara
                    ' vertice 1
                    i = Abs(ePart.fParam[cadVERTEX.ipaMeshIndex1_71])
                    e.PolyLine.Add(e.P[(i - 1) * 3])        ' X
                    e.PolyLine.Add(e.P[(i - 1) * 3 + 1])    ' Y
                    e.PolyLine.Add(e.P[(i - 1) * 3 + 2])    ' Z

                    If ePart.fParam[cadVERTEX.ipaMeshIndex1_71] > 0 Then gcd.Drawing.Sheet.model3d.xyzWireframe.Insert(e.PolyLine.Copy(0, 3))

                    ' vertice 2
                    i = Abs(ePart.fParam[cadVERTEX.ipaMeshIndex2_72])
                    e.PolyLine.Add(e.P[(i - 1) * 3])        ' X
                    e.PolyLine.Add(e.P[(i - 1) * 3 + 1])    ' Y
                    e.PolyLine.Add(e.P[(i - 1) * 3 + 2])    ' Z

                    If ePart.fParam[cadVERTEX.ipaMeshIndex2_72] > 0 Then gcd.Drawing.Sheet.model3d.xyzWireframe.Insert(e.PolyLine.Copy(3, 3))

                    ' vertice 3
                    i = Abs(ePart.fParam[cadVERTEX.ipaMeshIndex3_73])
                    e.PolyLine.Add(e.P[(i - 1) * 3])        ' X
                    e.PolyLine.Add(e.P[(i - 1) * 3 + 1])    ' Y
                    e.PolyLine.Add(e.P[(i - 1) * 3 + 2])    ' Z

                    If ePart.fParam[cadVERTEX.ipaMeshIndex3_73] > 0 Then gcd.Drawing.Sheet.model3d.xyzWireframe.Insert(e.PolyLine.Copy(6, 3))

                    If ePart.fParam[cadVERTEX.ipaMeshIndex4_74] <> 0 Then ' esta cara es un Quad
                        ' vertice 1
                        i = Abs(ePart.fParam[cadVERTEX.ipaMeshIndex1_71])
                        e.PolyLine.Add(e.P[(i - 1) * 3])        ' X
                        e.PolyLine.Add(e.P[(i - 1) * 3 + 1])    ' Y
                        e.PolyLine.Add(e.P[(i - 1) * 3] + 2)    ' Z

                        ' vertice 3
                        i = Abs(ePart.fParam[cadVERTEX.ipaMeshIndex3_73])
                        e.PolyLine.Add(e.P[(i - 1) * 3])        ' X
                        e.PolyLine.Add(e.P[(i - 1) * 3 + 1])    ' Y
                        e.PolyLine.Add(e.P[(i - 1) * 3 + 2])    ' Z

                        ' vertice 4
                        i = Abs(ePart.fParam[cadVERTEX.ipaMeshIndex4_74])
                        e.PolyLine.Add(e.P[(i - 1) * 3])        ' X
                        e.PolyLine.Add(e.P[(i - 1) * 3 + 1])    ' Y
                        e.PolyLine.Add(e.P[(i - 1) * 3 + 2])    ' Z
                    Endif

                End If

            Else If ePart.Gender <> "SEQEND" Then
                Stop
            End If
            ' Else If e.pBlock.Gender = "MODEL3D" Then
            '
        Next

        ' creo el model3d
        For Each f In e.PolyLine
            gcd.Drawing.Sheet.model3d.xyzVertex.Add(f)
        Next
        ' colores
        Dim frgba As New Single[]
        fRGBA = glx.GetColorRGBA(gcd.GetGBColor(e.Colour, e.pLayer))
        For i = 0 To e.PolyLine.max Step 3
            gcd.Drawing.Sheet.model3d.rgbColors.Add(fRGBA[0])
            gcd.Drawing.Sheet.model3d.rgbColors.Add(fRGBA[1])
            gcd.Drawing.Sheet.model3d.rgbColors.Add(fRGBA[2])
        Next

        ' normales
        For i = 0 To e.PolyLine.Max - 8 Step 9
            v1.x = e.PolyLine[i] - e.PolyLine[i + 3]
            v1.y = e.PolyLine[i + 1] - e.PolyLine[i + 4]
            v1.z = e.PolyLine[i + 2] - e.PolyLine[i + 5]

            v2.x = e.PolyLine[i + 6] - e.PolyLine[i + 3]
            v2.y = e.PolyLine[i + 7] - e.PolyLine[i + 4]
            v2.z = e.PolyLine[i + 8] - e.PolyLine[i + 5]

            modAlgebra.Cross(v1, v2, n)
            modAlgebra.Normalizar(n)
            For ii = 1 To 3
                gcd.Drawing.Sheet.model3d.xyzNormals.Add(n.x)
                gcd.Drawing.Sheet.model3d.xyzNormals.Add(n.y)
                gcd.Drawing.Sheet.model3d.xyzNormals.Add(n.z)
            Next
        Next
    End If
    If (e.Extrusion[2] = -1) Then
        gcd.CCC[e.gender].Scale(e, -1, 1)
        e.Extrusion[0] = 0
        e.Extrusion[1] = 0
        e.Extrusion[2] = 1
    Endif
    Me.Limits(e)

End

Public Sub DrawSelected(oE As Entity)

    If (oe.iParam[Me.iiiPolylineType] And 64) = 64 Then

        'glx.DrawTriangles3D(oe.p, oe.PolyLine, gcd.GetGBColor(oE.Colour, oe.pLayer), gcd.GetLineWt(oE.LineWIdth, oe.pLayer))
    Else
        glx.PolyLines(oe.PolyLine, Color.Gradient(gcd.GetGBColor(oE.Colour, oe.pLayer), Config.ModelBackgroundColor), gcd.GetLineWt(oE.LineWIdth, oe.pLayer), oE.LineType.TrameLength)
    End If

End

'' The paint version of the entity
Public Function Draw2(oE As Entity)

    paintPlus.LineStripe(oe.PolyLine)

End

' '' Creo los puntos de interes
' '' Build point of interest
'
' Public Function BuildPOI(oE As Entity) As Integer
'
'     ' si este valor no es provisto , estos POI son de la ultima entidad
'
'     oe.PoiPoints.Clear
'     oe.PoiType.Clear
'
'     ' points: end-mid-end
'     oe.poiPoints.insert([oE.p[0], oE.p[1]])
'     oe.poiType.Add(gcd.poiEndPoint)
'
' End

Public Function SaveDxfData(e As Entity) As Boolean

    ' stxExport.insert(["POLYLINE", dxf.codEntity])
    ' Los datos comunes a todas las entidades son guardados por la rutina que llama a esta
    dxf.SaveCodeInv("AcDb3dPolyline", "100")
    dxf.SaveCodeInv(CStr(e.p[0]), dxf.codX0)
    dxf.SaveCodeInv(CStr(e.p[1]), dxf.codY0)
    dxf.SaveCodeInv("0", DXF.codZ0)
    Try dxf.SaveCodeInv(CStr(e.fParam[0]), "39")
    dxf.SaveCodeInv(CStr(e.iParam[Me.iiiPolylineType]), "70")

    dxf.SaveCodeInv(CStr(e.Extrusion[0]), "210")
    dxf.SaveCodeInv(CStr(e.Extrusion[1]), "220")
    dxf.SaveCodeInv(CStr(e.Extrusion[2]), "230")

End

Public Function ImportDXF(e As Entity, sClaves As String[], sValues As String[]) As Boolean

    Dim i As Integer

    e.pBlock = New Block
    e.P.Clear
    For i = 0 To sClaves.Max

        If sClaves[i] = "10" Then e.P.Add(CFloat(sValues[i]))
        If sClaves[i] = "20" Then e.P.Add(CFloat(sValues[i]))
        'If sClaves[i] = "30" Then e.P.Add(CFloat(sValues[i]))
        'If sClaves[i] = "39" Then e.fParam.Add(CFloat(sValues[i]))

        If sClaves[i] = "70" Then e.iParam[Me.iiiPolylineType] = CInt(sValues[i])

    Next

    If e.iParam[Me.iiiPolylineType] And 64 = 64 Then ' this is a polyfacemesh
        e.pBlock.Model3d = New Model3d
    End If

    'End If
    Return True

    ' catch

    Return False

End

'' Return if that position is over the entity within the tolerance
Fast Public Function OverMe(e As Entity, Xr As Float, Yr As Float, tolerance As Float) As Boolean

    Dim i As Integer

    For i = 0 To E.PolyLine.count - 4 Step 2
        If puntos.doIntersect(xr - tolerance, Yr, Xr + tolerance, Yr, E.PolyLine[i + 0], E.PolyLine[i + 1], E.PolyLine[i + 2], E.PolyLine[i + 3]) Or puntos.doIntersect(xr, Yr - tolerance, Xr, Yr + tolerance, E.PolyLine[i + 0], E.PolyLine[i + 1], E.PolyLine[i + 2], E.PolyLine[i + 3]) Then Return True
    Next

    Return False

End
