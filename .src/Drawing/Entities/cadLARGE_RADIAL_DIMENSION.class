' Gambas class file

' GambasCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
Create Static
Inherits Caddimension

Public Const Gender As String = "LARGE_RADIAL_DIMENSION"
Public Const DrawingOrder As Integer = 100 ' 1 a 32.724 esto debe Drawse primero y ser sobreescrito por el resto
Public Const PointsToDraw As Integer = 1             ' minimal point requered for drawing something usefull
Public Const CmdLineHelper As String = ("Insert a linear acotation")
Public Const ParamType As String = "PPR"                             ' that is Point, Point, Float; could be Color Text, etc
Public Const ParamHelper As String = "Start point;End point;extension"

Public Sub ExportDXFCol(e As Entity, ByRef stxExport As String[]) As Boolean

    cadDimension.ExportDXFCol(e, stxExport)
    stxExport[0] = Me.Gender    ' sobreescribo el nombre de la entidad

    stxExport.insert(["AcDbRadialDimensionLarge", "100"])
    ' ===========================================================================
    stxExport.insert([CStr(e.p[16]), "13"])
    stxExport.insert([CStr(e.p[17]), "23"])
    stxExport.insert(["0", "33"])

    stxExport.insert([CStr(e.p[18]), "14"])
    stxExport.insert([CStr(e.p[19]), "24"])
    stxExport.insert(["0", "34"])

    stxExport.insert([CStr(e.p[20]), "15"])
    stxExport.insert([CStr(e.p[21]), "25"])
    stxExport.insert(["0", "35"])

    stxExport.insert(["0", "40"])

End

Public Function ImportDXF(e As Entity, sClaves As String[], sValues As String[]) As Boolean

    Dim i As Integer
    Dim DimTypeSet, BlockSet As Boolean

    DimTypeSet = False
    For i = 0 To sClaves.Max

        If sClaves[i] = "2" Then
            If BlockSet = False Then                                ' this prevents duplicated "2" codes
                e.pBlock = clsEntities.FIndBlock(sValues[i], gcd.Drawing.Blocks)   ' this could be null
                BlockSet = True

            End If
        End If

        If sClaves[i] = "10" Then e.p[0] = CFloat(sValues[i])         ' X0  first definition point
        If sClaves[i] = "20" Then e.P[1] = CFloat(sValues[i])         ' Y0
        If sClaves[i] = "11" Then e.p[2] = CFloat(sValues[i])         ' X1  midpoint of text
        If sClaves[i] = "21" Then e.P[3] = CFloat(sValues[i])         ' Y1
        If sClaves[i] = "12" Then e.P[8] = CFloat(sValues[i])
        If sClaves[i] = "22" Then e.P[9] = CFloat(sValues[i])

        If sClaves[i] = "13" Then e.P[0] = CFloat(sValues[i])
        If sClaves[i] = "23" Then e.P[1] = CFloat(sValues[i])

        If sClaves[i] = "14" Then e.P[2] = CFloat(sValues[i])
        If sClaves[i] = "24" Then e.P[3] = CFloat(sValues[i])
        If sClaves[i] = "3" Then e.pDimStyle = gcd.Drawing.DimStyles[sValues[i]]

    Next

    '
    ' ' en algunos DXF el codigo 70 no esta
    ' If Not DimTypeSet Then gcd.CCC[e.gender] = cadDIMENSION_LINEAR

    ' tengo q presuponer que las escalas son = 1
    e.fParam[Me.ipaEscX] = 1    ' esc X
    e.fParam[Me.ipaEscY] = 1    ' esc Y
    e.fParam[Me.ipaEscZ] = 1    ' esc Z

    ' TODO: cuando este terminada la entidad, sacar eso
    e.pBlock.InsertionPlace = 1

    ' y poner esto
    ' e.pBlock = Me.ReBuildBlock(e)

    Return True

    '' catch

    Return False

End

Public Function NewParameter(eBuild As Entity, vParam As Variant[], Optional Definitive As Boolean = False) As Boolean

    ' la linea solo recibe puntos

    If vParam[0] <> "point" Then Return False

    If gcd.StepsDone = 0 Then
        Me.DimType = gcd.dimAligned

        Try eBuild.P[0] = vParam[1]
        Try eBuild.P[1] = vParam[2]
        eBuild.P[2] = eBuild.P[0]
        eBuild.P[3] = eBuild.P[1]
        If definitive Then Return True
    Else If gcd.StepsDone = 1 Then

        Try eBuild.P[2] = vParam[1]
        Try eBuild.P[3] = vParam[2]
        eBuild.pBlock = ReBuildBlock(eBuild)
        If definitive Then Return True
    Else If gcd.StepsDone = 2 Then
        If vParam[0] = "point" Then  ' vino como un punto, entonces la calculo de otra manera

            ' return the angle from horizontal to us
            eBuild.fParam[Me.ipaExtension] = -puntos.PointToLineDistance([vParam[1], vParam[2]], [eBuild.p[0], eBuild.p[1], eBuild.p[2], eBuild.p[3]]) ' / puntos.distancia(eBuild.p[0], eBuild.p[1], eBuild.p[2], eBuild.p[3]

        Else If vParam[0] = "float" Then  ' vino como un punto, entonces la calculo de otra manera
            eBuild.fParam[Me.ipaExtension] = vParam[1]

        End If

        eBuild.pBlock = ReBuildBlock(eBuild)
        If definitive Then
            'Stop
            Return True
        End If
    Endif

End

Public Sub ReBuildBlock(E As Entity) As Block

    Dim d As Float, flxTextExt As Float[]
    Dim fRotXY As Float[]

    Dim newBlock As New Block
    Dim f1, f2 As New Float[]

    newBlock.entities = New Collection

    Return newBlock

    ' para definir este bloque necesito 6 entidades
    Dim eLineaPpal As Entity
    Dim eOblique1 As Entity       ' tambien pueden ser flechas Solid
    Dim eOblique2 As Entity
    Dim eExtension1 As Entity
    Dim eExtension2 As Entity
    Dim eDot1 As Entity
    Dim eDot2 As Entity
    Dim eText As Entity
    Dim ePoint2 As Entity

    ' vemos los estilos
    If E.fParam[Me.ipaStyleTextHeigth] > 0 Then e.pDimStyle.DIMTXT = E.fParam[Me.ipaStyleTextHeigth] Else e.pDimStyle.DIMTXT = E.pStyle.DIMTXT
    If E.fParam[Me.ipaStyleArrowSize] > 0 Then Me.DimArrowSize = E.fParam[Me.ipaStyleArrowSize] Else Me.DimArrowSize = E.pStyle.DIMASZ
    Me.DimArrowWIdth = Me.DimArrowSize / 3

    ' linea principal
    clsEntities.AddLine(newBlock.entities, [0.0, 0.0, 0.0, 0.0], E.colour, E.LineWIdth, E.LineType.Index, E.pLayer)
    eLineaPpal = newBlock.entities.Last

    ' flechas

    f1.Insert([0, 0, Me.DimArrowSize, Me.DimArrowWIdth, Me.DimArrowSize, -Me.DimArrowWIdth, 0, 0])
    f2.Insert([0, 0, -Me.DimArrowSize, Me.DimArrowWIdth, -Me.DimArrowSize, -Me.DimArrowWIdth, 0, 0])

    clsEntities.Addsolid(newBlock.entities, f2, E.colour, E.LineWIdth, E.LineType.Index, E.pLayer)
    eOblique2 = newBlock.entities.Last

    ' texto
    clsEntities.AddMText(newBlock.entities, [0.0, 0.0, 0.0, 0.0], 0, e.pDimStyle.DIMTXT, "0.00", E.colour, E.LineWIdth, E.LineType.Index, E.pLayer)
    eText = newBlock.entities.Last

    ' -> el bloque

    E.fParam[cadInsert.ipaEscX] = 1      ' ScaleX del inserto
    E.fParam[cadInsert.ipaEscY] = 1      ' ScaleY del inserto
    E.fParam[cadInsert.ipaEscZ] = 1      ' ScaleY del inserto

    '  If stage = 0 Then     ' marco el primer punto

    '    Else If stage = 1 Then ' marco el segundo punto, lo que modifica los parametros del bloque
    E.Visible = True

    ' el largo de la linea principal viene dado por la distancia entre ambos puntos
    d = puntos.distancia(E.P[0], E.P[1], E.P[2], E.P[3])

    ' con este click calculo el angulo
    E.fParam[cadInsert.ipaRotacion] = Deg(Ang(E.p[2] - E.P[0], E.p[3] - E.P[1]))

    ' la primer entidad del bloque es la linea principal
    eLineaPpal.P[0] = 0           ' X0
    eLineaPpal.P[1] = 0           ' Y0

    eLineaPpal.P[2] = d           ' X1
    eLineaPpal.P[3] = 0           ' Y1

    ' el largo de la linea principal viene dado por la distancia entre ambos puntos
    d = puntos.distancia(E.P[0], E.P[1], E.P[2], E.P[3])

    ' con este click calculo el angulo
    E.fParam[cadInsert.ipaRotacion] = Deg(Ang(E.p[2] - E.P[0], E.p[3] - E.P[1]))

    ' la primer entidad del bloque es la linea principal
    eLineaPpal.P[0] = 0           ' X0
    eLineaPpal.P[1] = 0           ' Y0

    eLineaPpal.P[2] = d           ' X1
    eLineaPpal.P[3] = 0           ' Y1

    ' el texto
    eText.sParam[cadMText.sdaText] = "R " & Format(d, Me.DimFormat)

    E.fParam[cadDimension.ipaRealMeasure] = d

    flxTextExt = glx.TextExtends(eText.sParam[0], 0, 0, eText.fParam[1])

    ' la cuarta y quinta son las flechas , tengo que verificar si entran, o el texto
    If flxTextExt[2] * 1.1 > d Then                      ' no entra

        eOblique2.P[0] = 0           ' X0
        eOblique2.P[2] = -Me.DimArrowSize
        eOblique2.P[4] = -Me.DimArrowSize
        eOblique2.P[6] = 0           ' X0

        ' el texto va afuera
        eText.P[0] = d + Me.DimArrowSize / 2
        eText.P[1] = Me.DimArrowWIdth

    Else                                                                ' entra

        eOblique2.P[0] = d           ' X0
        eOblique2.P[2] = -Me.DimArrowSize + d           ' X0
        eOblique2.P[4] = -Me.DimArrowSize + d           ' X0
        eOblique2.P[6] = d           ' X0

        ' el texto va adentro
        eText.P[0] = d / 2 - flxTextExt[2] / 2
        eText.P[1] = Me.DimArrowWIdth

    End If

    ' linea principal
    eLineaPpal.P[1] = Me.extension           ' Y0
    eLineaPpal.P[3] = Me.extension           ' Y1

    ' texto
    eText.P[1] = Me.DimArrowWIdth + Me.extension

    eOblique2.P[1] = Me.extension           ' X0
    eOblique2.P[3] = Me.extension + Me.DimArrowWIdth
    eOblique2.P[5] = Me.extension - Me.DimArrowWIdth
    eOblique2.P[7] = Me.extension           ' X0

    ' End If
    Return newBlock

End

'   0 LARGE_RADIAL_DIMENSION
'   5 12FC
' 102 {ACAD_REACTORS
' 330 12FE
' 102 }
' 102 {ACAD_XDICTIONARY
' 360 12FD
' 102 }
' 330 2
' 100 AcDbEntity
'   8 dimmensions
' 160               1172
' 310 airias lineas de cosas
' 100 AcDbDimension
' 280      0
'   2 *D17
'  10 388.8138643239927
'  20 209.7637151214733
'  30 0.0
'  11 381.6653012244023
'  21 214.7200167825812
'  31 0.0
'  70    169
'  71      5
'  42 10.50494238347625
'  73      0
'  74      0
'  75      0
'   3 standard
' 100 AcDbRadialDimensionLarge
'  13 372.4304113047216
'  23 200.5358546499357
'  33 0.0
'  14 376.3056599403601
'  24 208.1425214901072
'  34 0.0
'  15 380.1809085759985
'  25 215.7491883302789
'  35 0.0
'  40 0.0
' 1001 ACAD
' 1000 DSTYLE
' 1002 {
' 1070     50
' 1040 0.7853981633974483
' 1002 }
' 1001 ACAD_DSTYLE_DIMRADIAL_EXTENSION
' 1070    387
' 1070      1
' 1070    388
' 1040 0.0
' 1070    390
' 1040 0.0
