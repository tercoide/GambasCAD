' Gambas class file

' GambasCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
Create Static
' Fast
Inherits CadLWPolyline
Public Const Gender As String = "SOLID"
Public Const PointsToDraw As Integer = 0             ' minimal point requered for drawing something usefull
Public Const CmdLineHelper As String = ("Solid")
Public Const ParamType As String = "PPPP"                             ' that is Point, Point, Float; could be Color Text, etc
Public Const ParamHelper As String = "First Point;Next Point;Next Point;Last Point"      ' a little text that is shown at the prompt waiting for user input during build
Public Const TotalPoints As Integer = 4

' The entity handler receives a user action, and returns the number of expected parameter
' If definitive = true, means the parameter is set
Public Function NewParameter(eBuild As Entity, vParam As Variant[], Optional Definitive As Boolean = False) As Boolean

    If vParam[0] <> "point" Then Return False

    If gcd.StepsDone = 0 Then
        Try eBuild.P[0] = vParam[1]
        Try eBuild.P[1] = vParam[2]
        eBuild.P[2] = eBuild.P[0]
        eBuild.P[3] = eBuild.P[1]
        If definitive Then Return True
    Else If gcd.StepsDone = 1 Then

        Try eBuild.P[2] = vParam[1]
        Try eBuild.P[3] = vParam[2]
        eBuild.P[4] = eBuild.P[0]
        eBuild.P[5] = eBuild.P[1]

        If definitive Then Return True

    Else If gcd.StepsDone = 2 Then

        Try eBuild.P[4] = vParam[1]
        Try eBuild.P[5] = vParam[2]
        eBuild.P[6] = eBuild.P[0]
        eBuild.P[7] = eBuild.P[1]

        If definitive Then Return True
    Else If gcd.StepsDone = 3 Then

        Try eBuild.P[6] = vParam[1]
        Try eBuild.P[7] = vParam[2]
        If definitive Then Return True

    Endif

End

Public Sub Draw(oE As Entity)

    If Not oE.Visible Then Return

    If oe.P.Count < 2 Then Return
    If gcd.StepsDone = 1 Then
        glx.DrawLines([oE.p[0], oE.p[1], oE.p[2], oE.p[3]], gcd.GetGBColor(oE.Colour, oe.pLayer), gcd.GetLineWt(oE.LineWIdth, oe.pLayer), oE.LineType.TrameLength)
    Else
        glx.DrawTriangles(puntos.PolygonTriangulation(oE.p), gcd.GetGBColor(oE.Colour, oe.pLayer),, gcd.GetLineWt(oE.LineWIdth, oe.pLayer), oE.LineType.TrameLength)
    End If

End

'' A fat version of the entity
Public Sub DrawSelected(oE As Entity)

    glx.Polygon(oE.p, Color.Gradient(gcd.GetGBColor(oE.Colour, oe.pLayer), Config.ModelBackgroundColor), gcd.GetLineWt(oE.LineWIdth, oe.pLayer), oE.LineType.TrameLength)

End

'' A fat version of the line
Public Sub DrawRemark(oE As Entity)

    '  glx.Polygon(oE.p, config.WindowBackColor, gcd.GetLineWt(oE.LineWIdth, oe.pLayer), gcd.stiDashed)
    '  glx.Polygon(oE.p, gcd.GetGBColor(oE.Colour, oe.pLayer),oE.LineWidth + 2, oE.LineType)

    glx.Polygon(oE.P, Color.Gradient(gcd.GetGBColor(oE.Colour, oe.pLayer), Config.WhiteAndBlack), gcd.GetLineWt(oE.LineWIdth, oe.pLayer) + 1, oE.LineType.TrameLength)

End

Public Function Draw2(oE As Entity)

    Paint.Polygon(oE.p)
    paint.Fill

End

' '' Creo los puntos de interes
' '' Build point of interest
'
' Public Function BuildPOI(oE As Entity) As Integer
'
'     cadLWPolyline.BuildPOI(oe)
'
' End
' This function will return False if the element couldn't be created for some reason: bad or incomple user input
' True means all is good, False will instruct the clsENTITYBUILDER to delete it

Public Sub Finish(oE As Entity) As Boolean

    'Print "Finish en EntityBase"
    'CreatePolygon(oe)
    '  BuildPOI(oe)
    oE.Polygon = oE.P

    ' busco el tipo de linea, si hace falta

    ' tareas finales de armado del objeto

    oE.psel.resize(oE.p.count / 2)

End

Public Sub ExportDXFCol(e As Entity, ByRef stxExport As String[]) As Boolean

    ' stxExport.insert(["SOLID", dxf.codEntity])
    ' Los datos comunes a todas las entidades son guardados por la rutina que llama a esta
    stxExport.insert(["AcDbTrace", "100"])
    stxExport.insert([CStr(e.p[0]), dxf.codX0])
    stxExport.insert([CStr(e.p[1]), dxf.codY0])
    stxExport.insert([CStr(e.p[2]), DXF.codX1])
    stxExport.insert([CStr(e.p[3]), dxf.codY1])
    stxExport.insert([CStr(e.p[4]), dxf.codX2])
    stxExport.insert([CStr(e.p[5]), dxf.codY2])
    stxExport.insert([CStr(e.p[6]), DXF.codX3])
    stxExport.insert([CStr(e.p[7]), dxf.codY3])

End

Public Function ImportDXF(e As Entity, sClaves As String[], sValues As String[]) As Boolean

    Dim i As Integer

    e.P.Clear

    For i = 0 To sClaves.Max

        If sClaves[i] = "10" Then e.p.Add(CFloat(sValues[i]))
        If sClaves[i] = "20" Then e.p.Add(CFloat(sValues[i]))
        If sClaves[i] = "11" Then e.p.Add(CFloat(sValues[i]))
        If sClaves[i] = "21" Then e.p.Add(CFloat(sValues[i]))
        If sClaves[i] = "12" Then e.p.Add(CFloat(sValues[i]))
        If sClaves[i] = "22" Then e.p.Add(CFloat(sValues[i]))
        If sClaves[i] = "13" Then e.p.Add(CFloat(sValues[i]))
        If sClaves[i] = "23" Then e.p.Add(CFloat(sValues[i]))

    Next

    Return True

    ' catch

    Return False

End
