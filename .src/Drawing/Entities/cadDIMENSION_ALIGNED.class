' Gambas class file

' GambasCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
Create Static
Inherits Caddimension

Public Const Gender As String = "DIMENSION_ALIGNED"
Public Const DrawingOrder As Integer = 100 ' 1 a 32.724 esto debe Drawse primero y ser sobreescrito por el resto
Public Const PointsToDraw As Integer = 1             ' minimal point requered for drawing something usefull
Public Const CmdLineHelper As String = ("Insert a linear acotation")
Public Const ParamType As String = "PPR"                             ' that is Point, Point, Float; could be Color Text, etc
Public Const ParamHelper As String = "Start point;End point;extension"

Public Function SaveDxfData(e As Entity) As Boolean

    cadDimension.SaveDxfData(e)

    dxf.SaveCodeInv("AcDbAlignedDimension", "100")
    ' ===========================================================================
    dxf.SaveCodeInv(CStr(e.p[14]), dxf.codX3)                ' first def point
    dxf.SaveCodeInv(CStr(e.p[15]), dxf.codY3)
    dxf.SaveCodeInv("0", dxf.codz3)

    dxf.SaveCodeInv(CStr(e.p[16]), "14")                ' text att point
    dxf.SaveCodeInv(CStr(e.p[17]), "24")
    dxf.SaveCodeInv("0", "34")

End

Public Function ImportDXF(e As Entity, sClaves As String[], sValues As String[]) As Boolean

    Dim i As Integer
    Dim AfterSubclassmarker As Boolean

    For i = 0 To sClaves.Max
        If sClaves[i] = "100" And sValues[i] = "AcDbAlignedDimension" Then AfterSubclassmarker = True
        If AfterSubclassmarker Then ' lo siguientes codigos
            ' If sClaves[i] = "12" Then pointBaselinePoint.x = CFloat(sValues[i])
            ' If sClaves[i] = "22" Then pointBaselinePoint.y = CFloat(sValues[i])

            If sClaves[i] = "13" Then Me.DefPoint1.x = CFloat(sValues[i])
            If sClaves[i] = "23" Then Me.DefPoint1.y = CFloat(sValues[i])

            If sClaves[i] = "14" Then Me.DefPoint2.x = CFloat(sValues[i])
            If sClaves[i] = "24" Then Me.DefPoint2.y = CFloat(sValues[i])

        End If

    Next

    Try e.pBlock.InsertionPlace = 1

    Return True

    ' catch

    Return False

End

Public Function NewParameter(eBuild As Entity, vParam As Variant[], Optional Definitive As Boolean = False) As Boolean

    If vParam[0] <> "point" Then Return False

    If gcd.StepsDone = 0 Then
        Me.DimType = gcd.dimAligned
        ' supongo que marca el punto de derecha a izq
        ' el primero es P3 o P67
        Try eBuild.p[0] = vParam[1]
        Try eBuild.p[1] = vParam[2]
        eBuild.p[2] = eBuild.P[0]
        eBuild.p[3] = eBuild.P[1]
        eBuild.p[4] = eBuild.p[2]
        eBuild.p[5] = eBuild.P[3]
        ' Me.DefPoint2.x = Me.DefPoint1.x
        ' Me.DefPoint2.y = Me.DefPoint1.y
        If definitive Then Return True
    Else If gcd.StepsDone = 1 Then

        Try eBuild.p[2] = vParam[1]
        Try eBuild.p[3] = vParam[2]
        eBuild.p[4] = eBuild.p[2]
        eBuild.p[5] = eBuild.P[3]

        eBuild.pBlock = cadDIMENSION_LINEAR.RebuildBlock(eBuild, -1)
        If definitive Then Return True
    Else If gcd.StepsDone = 2 Then   ' el tercer punto sera la posicion del texto

        ' return the angle from horizontal to us
        'eBuild.fParam[Me.ipaExtension] = -puntos.PointToLineDistance([vParam[1], vParam[2]], [eBuild.p[0], eBuild.p[1], eBuild.p[2], eBuild.p[3]]) ' / puntos.distancia(eBuild.p[0], eBuild.p[1], eBuild.p[2], eBuild.p[3]
        Try eBuild.p[4] = vParam[1]
        Try eBuild.p[5] = vParam[2]

        eBuild.pBlock = cadDIMENSION_LINEAR.RebuildBlock(eBuild, -1)
        If definitive Then
            'Stop
            Return True
        End If
    Endif

End

'' Genera un conjunto de grips para ser usados por cadSelection
Public Function GenerateGrips(e As Entity) As Integer

    cadDIMENSION_LINEAR.GenerateGrips(e)

End

Public Function GripEdit(g As Grip) As Boolean

    Dim e As Entity
    Dim Xr, Yr, xs, ys As Float

    e = g.AsociatedEntity
    e.P[g.AsociatedPoint * 2] = g.X
    e.P[g.AsociatedPoint * 2 + 1] = g.Y

    e.pBlock = cadDIMENSION_LINEAR.RebuildBlock(e, -1)

End
