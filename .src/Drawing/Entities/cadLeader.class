' Gambas class file

' GambasCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
Create Static
' Fast
Inherits EntityBase
Public Const Gender As String = "LEADER"
Public Const PointsToDraw As Integer = 0             ' minimal point requered for drawing something usefull
Public Const CmdLineHelper As String = ("Leader")
Public Const ParamType As String = "P+"
Public Const ParamHelper As String = "Next Point"     ' a little text that is shown at the prompt waiting for user input during build
Public Const ParamDefault As String = "<title> ;20; <enter>"

' fParam helpers
Public Const TotalParams As Integer = 13
Public Const ipaTextHeight As Integer = 0
Public Const ipaTextWIdth As Integer = 1
Public Const ipaArrowHead As Integer = 2            ' Arrowhead flag: 0 = Disabled; 1 = Enabled
Public Const ipaLeaderPathType As Integer = 3       ' Leader path type: 0 = Straight line segments; 1 = SPLINE
Public Const ipaCreationFlag As Integer = 4         ' Leader creation flag( Default = 3):
Public Const ipaRelativeFactor As Integer = 5       ' Hookline direction flag:
Public Const ipaHookLine As Integer = 6             ' Hookline flag:
Public Const ipaTextVisibility As Integer = 7
Public Const ipaAttchmPoint As Integer = 8
Public Const ipaRectangleWIdth As Integer = 9
Public Const ipaDrawingDirec As Integer = 10
Public Const ipaBackFillType As Integer = 11
Public Const ipaBackColor As Integer = 12

' stringdata helpers
Public Const sdaTotalParams As Integer = 2
Public Const sdaTextRefData As Integer = 0
Public Const sdaStyle As Integer = 1            ' Dimension style name

Public Const TotalPoints As Integer = 1 ' 2021 cambie esto

Public DimArrowSize As Float = 0.3       ' el largo de la flecha
Public DimArrowWIdth As Float = 0.1      ' ancho de la flecha

' The entity handler receives a user action, and returns the number of expected parameter
' If definitive = true, means the parameter is set
Public Function NewParameter(eBuild As Entity, vParam As Variant[], Optional Definitive As Boolean = False) As Boolean

    eBuild.fParam[Me.ipaArrowHead] = 1
    If vParam[0] = "point" Then

        eBuild.P[eBuild.P.Max - 1] = vParam[1]
        eBuild.P[eBuild.P.Max] = vParam[2]

        If definitive Then
            eBuild.P.Insert(eBuild.P.Copy(eBuild.P.Max - 1, 2))
            Return True
        End If
    Else If vParam[0] = "close" Then
        If eBuild.P.Count > 4 Then eBuild.P.Remove(eBuild.P.Max - 1, 2)
        eBuild.fParam[0] = 1
        Return True

    Else If vParam[0] = "undo" Then
        If eBuild.P.Count > 4 Then eBuild.P.Remove(eBuild.P.Max - 1, 2)
        eBuild.fParam[0] = 0
        Return True

    Endif

End

Public Sub Translate(e As Entity, dX As Float, dY As Float, Optional OnlySelected As Boolean = False)

    Dim i As Integer

    If OnlySelected Then

        For i = 0 To e.Psel.Max
            If e.Psel[i] Then

                e.P[i * 2] += dx
                e.P[i * 2 + 1] += dy

            Endif
        Next

    Else

        puntos.Translate(e.p, dx, dy)
    Endif

End

Public Sub Rotate(e As Entity, radians As Float)

    puntos.Rotate(e.P, radians)
    E.fParam[0] += radians

End

Public Sub Scale(e As Entity, sX As Float, sY As Float)

    Dim i As Integer

    E.fParam[1] *= sY
    For i = 0 To e.p.max Step 2

        e.P[i] = e.P[i] * sX
        e.P[i + 1] = e.P[i + 1] * sY

    Next

End

Public Sub Draw(oE As Entity)

    Dim angle As Float
    Dim eText As Entity

    If Not oE.Visible Then Return
    If oe.P.Count < 4 Then Return

    Dim tRect As New Float[], poli As New Float[]
    Dim arrow As New Float[]
    Dim ArrowW, ArrowH As Float
    eText = gcd.Drawing.Sheet.Entities[oe.sParam[Me.sdaTextRefData]]

    If eText Then Gcd.CCC[eText.gender].Draw(eText)

    ' TODO: arrow head cuando tengamos los parametros de Dim , como ser tamaÃ±o de la flecha, etc
    glx.PolyLines(oE.p, gcd.GetGBColor(oE.Colour, oe.pLayer), gcd.GetLineWt(oE.LineWIdth, oe.pLayer), oE.LineType.TrameLength)
    If oe.fParam[Me.ipaArrowHead] = 1 Then ' va flecha

        Me.DimArrowSize = gcd.Drawing.Headers.DIMASZ
        Me.DimArrowWIdth = Me.DimArrowSize / 4
        arrow = [0, 0, Me.DimArrowSize, Me.DimArrowWIdth, Me.DimArrowSize, -Me.DimArrowWIdth, 0, 0]
        puntos.Rotate(arrow, Ang(oe.p[2] - oe.P[0], oe.p[3] - oe.P[1]))
        puntos.Translate(arrow, oe.P[0], oe.P[1])

        glx.DrawTriangles(arrow, gcd.GetGBColor(oE.Colour, oe.pLayer),, oE.LineWIdth)

    Endif

End

Public Function ImportDXF(e As Entity, sClaves As String[], sValues As String[]) As Boolean

    Dim i As Integer
    ' defaults
    e.fParam[Me.ipaArrowHead] = 1 ' present
    e.fParam[Me.ipaCreationFlag] = 3 ' no text atatched
    e.fParam[Me.ipaLeaderPathType] = 0 ' starigth lines

    e.p.Clear
    For i = 0 To sClaves.Max

        If sClaves[i] = "10" Then e.p.Add((CFloat(sValues[i])))         ' X1
        If sClaves[i] = "20" Then e.P.Add((CFloat(sValues[i])))         ' Y1

        If sClaves[i] = "40" Then e.fParam[Me.ipaTextHeight] = CFloat(sValues[i])         ' Altura
        If sClaves[i] = "41" Then e.fParam[Me.ipaTextWIdth] = CFloat(sValues[i])         ' Altura
        If sClaves[i] = "340" Then e.sParam[Me.sdaTextRefData] = sValues[i]  ' Hard reference to associated annotation (mtext, tolerance, or insert entity)
        ' Importante , el TEXT no tiene code 3 para mas texto

        If sClaves[i] = "50" Then e.fParam[Me.ipaTextAngle] = CFloat(sValues[i])      ' rotacion
        If sClaves[i] = "3" Then e.sParam[Me.sdaStyle] = sValues[i]                ' Dimension style name
        If sClaves[i] = "41" Then e.fParam[Me.ipaRelativeFactor] = CFloat(sValues[i])
        If sClaves[i] = "51" Then e.fParam[Me.ipaHorizAngle] = CFloat(sValues[i])
        If sClaves[i] = "71" Then e.fParam[Me.ipaArrowHead] = CInt(sValues[i])
        If sClaves[i] = "72" Then e.fParam[Me.ipaLeaderPathType] = CFloat(sValues[i])
        If sClaves[i] = "73" Then e.fParam[Me.ipaCreationFlag] = CFloat(sValues[i])
        If sClaves[i] = "74" Then e.fParam[Me.ipaDrawingDirec] = CFloat(sValues[i])
        If sClaves[i] = "75" Then e.fParam[Me.ipaHookLine] = CFloat(sValues[i])

    Next

    If e.sParam[Me.sdaStyle] = "" Then e.sParam[Me.sdaStyle] = "STANDARD"

    Return True

    ' catch

    Return False

End

'' A fat version of the line
Public Sub DrawSelected(oE As Entity)

    'glx.PolyLines(oE.p, config.WindowBackColor, gcd.GetLineWt(oE.LineWIdth, oe.pLayer), gcd.stiDashed)
    glx.PolyLines(oE.p, Color.Gradient(gcd.GetGBColor(oE.Colour, oe.pLayer), Config.ModelBackgroundColor), gcd.GetLineWt(oE.LineWIdth, oe.pLayer), oE.LineType.TrameLength)

End

'' A fat version of the line
Public Sub DrawRemark(oE As Entity)

    If Not oE.Visible Then Return

    glx.PolyLines(oE.p, Color.Gradient(gcd.GetGBColor(oE.Colour, oe.pLayer), Config.WhiteAndBlack), gcd.GetLineWt(oE.LineWIdth, oe.pLayer) + 1, oE.LineType.TrameLength)
    'glx.DrawLines([oE.P[0], oE.P[1], (oE.P[0] + oE.P[2]) / 8, (oE.P[1] + oE.P[3]) / 8], gcd.GetGBColor(oE.Colour, oe.pLayer), oE.LineWidth * 3, oE.LineType.TrameLength)

End

Public Function Draw2(oE As Entity)

    Dim i As Integer

    paint.moveto(oE.p[0], oE.p[1])
    For i = 2 To oE.P.Max Step 2
        paint.lineto(oE.p[i], oE.p[i + 1])

    Next

    paint.Stroke

End

' '' Creo los puntos de interes
' '' Build point of interest
'
' Public Function BuildPOI(oE As Entity) As Integer
'
'     cadLWPolyline.BuildPOI(oe)
'
'     ' points
'     oe.poiPoints.insert([oE.p[0], oE.p[1]])
'     oe.poiType.Add(gcd.poiBasePoint)
'     'oe.poiEntities.Add(arrIndex)
'
' End

'' Return if that position is over the entity within the tolerance
Public Function OverMe(e As Entity, Xr As Float, Yr As Float, tolerance As Float) As Boolean

    Return cadLWPolyline.OverMe(e, Xr, Yr, tolerance)

End

' This function will return False if the element couldn't be created for some reason: bad or incomple user input
' True means all is good, False will instruct the clsENTITYBUILDER to delete it
Public Sub Finish(oE As Entity) As Boolean

    'Print "Finish en EntityBase"
    'CreatePolygon(oe)
    '  BuildPOI(oe)

    ' busco el tipo de linea, si hace falta

    ' tareas finales de armado del objeto
    oe.fParam[Me.ipaArrowHead] = 1

    oE.psel.resize(oE.p.count / 2)

End
