' Gambas class file

' GambasCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
Create Static

'Fast
Inherits EntityBase

Public Const Gender As String = "CIRCLE"
Public Const CmdLineHelper As String = ("Draw a circle")
Public Const ParamType As String = "PL"                             ' that is Point, Point, Float; could be Color Text, etc
Public Const ParamHelper As String = "Center;Radious"      ' a little text that is shown at the prompt waiting for user input during build
Public Const ParamDefault As String = " ; 1 "
Public Const TotalParams As Integer = 1

' The entity handler receives a user action, and returns the number of expected parameter
' If definitive = true, means the parameter is set
Public Function NewParameter(eBuild As Entity, vParam As Variant[], Optional Definitive As Boolean = False) As Boolean

    Dim f As Float
    Dim ip As Integer

    If gcd.StepsDone = 0 Then

        If vParam[0] <> "point" Then Return False
        Try eBuild.P[0] = vParam[1]
        Try eBuild.P[1] = vParam[2]

        If definitive Then
            eBuild.fParam.Add(0)
            Return True
        End If
    Else If gcd.StepsDone = 1 Then

        If vParam[0] <> "float" Then Return False

        eBuild.fParam[0] = vParam[1]

        If definitive Then Return True

    End If

    Return False

End

Public Sub Scale(e As Entity, sX As Float, sY As Float)

    Dim i As Integer

    E.fParam[0] *= sX

    For i = 0 To e.p.max Step 2

        e.P[i] = e.P[i] * sX

        e.P[i + 1] = e.P[i + 1] * sY

    Next

End

Public Sub Draw(oE As Entity)

    If Not oE.Visible Then Return

    glx.PolyLines(oe.PolyLine, gcd.GetGBColor(oE.Colour, oe.pLayer), gcd.GetLineWt(oE.LineWIdth, oe.pLayer), oE.LineType.TrameLength)

End

Public Sub makepolyline(oe As Entity)

    Dim x, y, theta, angle_increment As Float
    Dim iTramos As Integer

    iTramos = oE.fParam[0] * 2 * Pi / gcd.metros(Config.ArcDensity)

    If iTramos < 6 Then iTramos = 6
    If iTramos > 360 Then iTramos = 360
    angle_increment = 2 * Pi / iTramos

    oE.polyline.Clear

    For theta = 0 To 2 * Pi Step angle_increment
        ' el punto considerando 0,0 al centro
        x = oE.p[0] + oE.fParam[0] * Cos(theta)
        y = oE.p[1] + oE.fParam[0] * Sin(theta)
        oE.polyline.Add(x)
        oE.polyline.Add(y)

    Next
    x = oE.p[0] + oE.fParam[0]
    y = oE.p[1]

    oE.polyline.Add(x)
    oE.polyline.Add(y)

End

Public Sub DrawSelected(oE As Entity)

    glx.PolyLines(oE.PolyLine, Color.Gradient(gcd.GetGBColor(oE.Colour, oe.pLayer), Config.ModelBackgroundColor), gcd.GetLineWt(oE.LineWIdth, oe.pLayer), oE.LineType.TrameLength)

End

'' A fat version of the entity
Public Sub DrawRemark(oE As Entity)

    glx.PolyLines(oE.PolyLine, Color.Gradient(gcd.GetGBColor(oE.Colour, oe.pLayer), Config.WhiteAndBlack), gcd.GetLineWt(oE.LineWIdth, oe.pLayer) + 1, oE.LineType.TrameLength)

End
' '' A fat version of the entity
'
' Public Sub DrawSelected(oE As Entity)
'
'     glx.circle(oE.P, oe.fParam[0], config.ColorForSelected, False, gcd.GetLineWt(oE.LineWIdth, oe.pLayer), oE.LineType.TrameLength)
'
' End
'
' '' Hides the entity
' Public Sub DrawShadow(e As Entity)
'
'     glx.circle(E.P, e.fParam[0], Config.BackgroundColor, False, gcd.GetLineWt(e.LineWIdth, e.pLayer), e.LineType.TrameLength)
'
' End
'
' '' A fat version of the entity
' Public Sub DrawRemark(oE As Entity)
'
'     glx.CIRCLE(oE.P, oe.fParam[0], Config.ColorForRemark,, gcd.GetLineWt(oE.LineWIdth, oe.pLayer) + 1, oE.LineType.TrameLength)
'
' End

Public Function Draw2(oE As Entity)

    paint.ARC(oE.p[0], oE.p[1], oE.fParam[0])

    paint.Stroke

End
' '' Creo los puntos de interes
' '' Build point of interest
'
' Public Function BuildPOI(oE As Entity) As Integer
'
'     oe.PoiPoints.Clear
'     oe.PoiType.Clear
'     oe.Polygon.Clear
'
'     ' CENTER
'     oe.poiPoints.insert([oE.p[0], oE.p[1]])
'     oe.poiType.Add(gcd.poiCenter)
'
'     ' quadrant
'     oe.poiPoints.insert([oE.p[0] + oe.fParam[0], oE.p[1]])
'     oe.poiType.Add(gcd.poiQuadrant)
'
'     ' quadrant
'     oe.poiPoints.insert([oE.p[0] - oe.fParam[0], oE.p[1]])
'     oe.poiType.Add(gcd.poiQuadrant)
'
'     ' quadrant
'     oe.poiPoints.insert([oE.p[0], oE.p[1] + oe.fParam[0]])
'     oe.poiType.Add(gcd.poiQuadrant)
'
'     ' quadrant
'     oe.poiPoints.insert([oE.p[0], oE.p[1] - oe.fParam[0]])
'     oe.poiType.Add(gcd.poiQuadrant)
'
'     oe.Polygon.Insert(oe.PoiPoints)
'
' End
' This function will return False if the element couldn't be created for some reason: bad or incomple user input
' True means all is good, False will instruct the clsENTITYBUILDER to delete it

Public Sub Finish(oE As Entity) As Boolean

    'Print "Finish en EntityBase"
    'CreatePolygon(oe)
    '  BuildPOI(oe)

    ' busco el tipo de linea, si hace falta

    ' tareas finales de armado del objeto
    Me.makepolyline(oe)

    oE.psel.resize(oE.p.count / 2)

End

Public Sub ExportDXFCol(e As Entity, ByRef stxExport As String[]) As Boolean

    ' stxExport.insert(["CIRCLE", dxf.codEntity])
    ' Los datos comunes a todas las entidades son guardados por la rutina que llama a esta
    stxExport.insert(["AcDbCircle", "100"])
    stxExport.insert([CStr(e.p[0]), dxf.codCenterX])
    stxExport.insert([CStr(e.p[1]), dxf.codCenterY])
    stxExport.insert([CStr(e.fParam[0]), dxf.codRadius])

End

Public Function ImportDXF(e As Entity, sClaves As String[], sValues As String[]) As Boolean

    Dim i As Integer

    e.P.Clear
    For i = 0 To sClaves.Max
        If sClaves[i] = "10" Then e.P.Add(CFloat(sValues[i]))
        If sClaves[i] = "20" Then e.P.Add(CFloat(sValues[i]))
        If sClaves[i] = "40" Then e.fParam[0] = (CFloat(sValues[i]))
    Next

    If e.fParam.Count = 0 Then Stop ' e.fParam.Add(0)  ' TODO: averiguar q pasa aca q algunas entidades CIRCLE
    ' vienen sin el radio

    Return True

    ' catch

    Return False

End

'' Return if that position is over the entity within the tolerance
Public Function OverMe(e As Entity, Xr As Float, Yr As Float, tolerance As Float) As Boolean

    If Abs(puntos.distancia(xr, yr, E.P[0], E.P[1]) - E.fParam[0]) < tolerance Then Return True
    If puntos.Around(xr, yr, E.P[0], E.P[1], tolerance) Then Return True

    Return False

End

'' Genera un conjunto de grips para ser usados por cadSelection
Public Function GenerateGrips(e As Entity) As Integer

    Dim i As Integer
    Dim g As Grip
    Dim iCount As Integer

    g = New Grip
    g.Shape = 0
    g.X = e.P[0]
    g.Y = e.P[1]
    g.Action = 0 ' mover
    g.AsociatedEntity = e
    g.AsociatedPoint = 0
    gcd.Drawing.Sheet.Grips.Add(g)
    g.ToolTip = ("Move center")

    g = New Grip
    g.Shape = 1
    g.X = e.P[0] + e.fParam[0]
    g.Y = e.P[1]
    g.Action = 1 ' este dato es propio de la clase
    g.AsociatedEntity = e
    g.AsociatedPoint = 0
    g.ToolTip = ("Change radius")
    gcd.Drawing.Sheet.Grips.Add(g)

    g = New Grip
    g.Shape = 1
    g.X = e.P[0] - e.fParam[0]
    g.Y = e.P[1]
    g.Action = 1
    g.AsociatedEntity = e
    g.AsociatedPoint = 0
    g.ToolTip = ("Change radius")
    gcd.Drawing.Sheet.Grips.Add(g)

    g = New Grip
    g.Shape = 1
    g.X = e.P[0]
    g.Y = e.P[1] + e.fParam[0]
    g.Action = 1
    g.AsociatedEntity = e
    g.AsociatedPoint = 0
    g.ToolTip = ("Change radius")
    gcd.Drawing.Sheet.Grips.Add(g)

    g = New Grip
    g.Shape = 1
    g.X = e.P[0]
    g.Y = e.P[1] - e.fParam[0]
    g.Action = 1
    g.AsociatedEntity = e
    g.AsociatedPoint = 0
    g.ToolTip = ("Change radius")
    gcd.Drawing.Sheet.Grips.Add(g)

    Return iCount

End

Public Function GripEdit(g As Grip) As Boolean

    Dim e As Entity
    Dim r, r1, r2 As Float

    e = g.AsociatedEntity
    Select Case g.Action
        Case 0
            e.P[0] = g.X
            e.P[1] = g.Y
        Case 1
            r1 = Abs(e.P[0] - g.X)
            r2 = Abs(e.P[1] - g.y)
            If r1 > r2 Then r = r1 Else r = r2
            r = Sqr(r1 * r1 + r2 * r2)
            e.fParam[0] = r
    End Select

    Me.BuildGeometry(e)

End

'' Determines if the entity was selected by a rectanle surrounding al points
'' by default, if ALL points are selected, it can.
Public Function SelFull(eTesting As Entity, X1real As Float, Y1real As Float, X2real As Float, Y2real As Float) As Boolean

    Dim ii As Integer, puedo As Boolean

    eTesting.PSel[0] = False
    If (eTesting.p[0] - eTesting.fParam[0] > X1real) And (eTesting.p[0] + eTesting.fParam[0] < X2real) And (eTesting.p[1] - eTesting.fParam[0] > y1real) And (eTesting.p[1] + eTesting.fParam[0] < y2real) Then
        eTesting.PSel[0] = True
        Return True

    Endif

End
