' Gambas class file

' GambasCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
Create Static
Inherits CadDIMENSION_RADIUS

Public Const Gender As String = "DIMENSION_DIAMETER"
Public Const DrawingOrder As Integer = 100 ' 1 a 32.724 esto debe Drawse primero y ser sobreescrito por el resto
Public Const PointsToDraw As Integer = 1             ' minimal point requered for drawing something usefull
Public Const CmdLineHelper As String = ("Insert a linear acotation")
Public Const ParamType As String = "PP"                             ' that is Point, Point, Float; could be Color Text, etc
Public Const ParamHelper As String = "Start point;End point"

' Public Sub ExportDXFCol(e As Entity, ByRef stxExport As String[]) As Boolean
'
'     cadDimension.ExportDXFCol(e, stxExport)
'
'     ' sobreescribo el nombre de la entidad
'
'     stxExport.insert(["AcDbDiametricDimension", "100"])
'     ' ===========================================================================
'
'     stxExport.insert([CStr(e.p[20]), "15"])                ' text att point
'     stxExport.insert([CStr(e.p[21]), "25"])
'     stxExport.insert(["0", "40"])               ' leader lenght
'
' End

' Public Function ImportDXF(e As Entity, sClaves As String[], sValues As String[]) As Boolean
'
'     Return cadDIMENSION_RADIUS.ImportDXF(e, sClaves, sValues)
'
' End

' Public Function NewParameter(eBuild As Entity, vParam As Variant[], Optional Definitive As Boolean = False) As Boolean
'
'     ' la linea solo recibe puntos
'
'     If vParam[0] <> "point" Then Return False
'
'     If gcd.StepsDone = 0 Then
'
'         Try eBuild.P[0] = vParam[1]
'         Try eBuild.P[1] = vParam[2]
'         eBuild.P[2] = eBuild.P[0]
'         eBuild.P[3] = eBuild.P[1]
'         If definitive Then Return True
'
'     Else If gcd.StepsDone = 1 Then
'
'         Try eBuild.P[2] = vParam[1]
'         Try eBuild.P[3] = vParam[2]
'         eBuild.pBlock = cadDIMENSION_RADIUS.RebuildBlock(eBuild, 1)
'         If definitive Then Return True
'
'     Endif
'
' End
