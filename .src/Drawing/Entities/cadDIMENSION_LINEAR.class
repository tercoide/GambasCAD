' Gambas class file

' GambasCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
Create Static
Inherits CadDimension

Public Const Gender As String = "DIMENSION_LINEAR"
Public Const DrawingOrder As Integer = 100 ' 1 a 32.724 esto debe Drawse primero y ser sobreescrito por el resto
Public Const PointsToDraw As Integer = 1             ' minimal point requered for drawing something usefull
Public Const CmdLineHelper As String = ("Insert a linear acotation")
Public Const ParamType As String = "PPP"
Public Const ParamHelper As String = "Start point;End point;extension"
Public Const ParamDefault As String = " "

Public Function SaveDxfData(e As Entity) As Boolean

    cadDimension.SaveDxfData(e)

    ' sobreescribo el nombre de la entidad

    dxf.SaveCodeInv("AcDbAlignedDimension", "100")
    ' ===========================================================================
    dxf.SaveCodeInv(CStr(e.p[14]), dxf.codX3)                ' first def point
    dxf.SaveCodeInv(CStr(e.p[15]), dxf.codY3)
    dxf.SaveCodeInv("0", dxf.codz3)

    dxf.SaveCodeInv(CStr(e.p[16]), "14")                ' text att point
    dxf.SaveCodeInv(CStr(e.p[17]), "24")
    dxf.SaveCodeInv("0", "34")
    dxf.SaveCodeInv(CStr(e.fParam[cadInsert.ipaRotacion]), "50")
    dxf.SaveCodeInv("0", "52")
    dxf.SaveCodeInv("AcDbRotatedDimension", "100")

End

Public Function ImportDXF(e As Entity, sClaves As String[], sValues As String[]) As Boolean

    Dim i As Integer
    Dim AfterSubclassmarker As Boolean
    ' ' revisamos lo que viene del importador comun
    e.P[4] = e.P[0]
    e.P[5] = e.P[1]
    '
    e.P[6] = e.P[2]
    e.P[7] = e.P[3]

    For i = 0 To sClaves.Max
        If sClaves[i] = "100" And sValues[i] = "AcDbAlignedDimension" Then AfterSubclassmarker = True
        If AfterSubclassmarker Then ' los siguientes codigos
            If sClaves[i] = "12" Then e.P[8] = CFloat(sValues[i])
            If sClaves[i] = "22" Then e.P[9] = CFloat(sValues[i])

            If sClaves[i] = "13" Then e.P[0] = CFloat(sValues[i])
            If sClaves[i] = "23" Then e.P[1] = CFloat(sValues[i])

            If sClaves[i] = "14" Then e.P[2] = CFloat(sValues[i])
            If sClaves[i] = "24" Then e.P[3] = CFloat(sValues[i])

            ' este parametro determina el angulo de la dimension, y no los puntos
            If sClaves[i] = "50" Then e.iParam[cadDimension.iiiMode] = 1000 * CFloat(sValues[i])

            If sClaves[i] = "52" Then e.fParam[cadDimension.ipaObliqueExtension] = CFloat(sValues[i])

        End If

    Next

    ' Equivalencias
    ' DXF       Entity P[]
    ' 10-20     4-5
    ' 11-21     6-7
    ' 12-22     no se usa
    ' 13-23     0-1
    ' 14-24     2-3

    e.fParam[cadDimension.ipaExtension] = -puntos.distancia(Me.DefPoint1.x, Me.DefPoint1.y, Me.DefPoint2.x, Me.DefPoint2.y)

    ' TODO: cuando este terminada la entidad, sacar eso
    ' tengo q presuponer que las escalas son = 1
    e.fParam[Me.ipaEscX] = 1    ' esc X
    e.fParam[Me.ipaEscY] = 1    ' esc Y
    e.fParam[Me.ipaEscZ] = 1    ' esc Z
    Try e.pBlock.InsertionPlace = 1

    ' y poner esto
    'e.pBlock = Me.ReBuildBlock(e, e.iParam[Me.iiiMode])

    Return True

    ' catch

    Return False

End

Public Function NewParameter(eBuild As Entity, vParam As Variant[], Optional Definitive As Boolean = False) As Boolean

    Dim fAngle As Float
    Dim iMode As Integer

    If vParam[0] <> "point" Then Return False

    If eBuild.iParam[Me.iiiMode] >= 10 Then

        If gcd.Drawing.LastDimension Then

            If eBuild.iParam[Me.iiiMode] = 10 Then
                Me.DimContinued = True
                eBuild.p[0] = gcd.Drawing.LastDimension.P[2]
                eBuild.p[1] = gcd.Drawing.LastDimension.P[3]
                eBuild.p[4] = gcd.Drawing.LastDimension.P[4]
                eBuild.p[5] = gcd.Drawing.LastDimension.P[5]
            Else If eBuild.iParam[Me.iiiMode] = 20 Then
                eBuild.p[0] = gcd.Drawing.LastDimension.P[0]
                eBuild.p[1] = gcd.Drawing.LastDimension.P[1]

                Me.DimBaseline = True
            End If
            If gcd.Drawing.LastDimension.iParam[Me.iiiMode] = 0 Then
                If gcd.Drawing.LastDimension.fParam[Me.ipaHorizAngle] = 0 Then
                    eBuild.iParam[Me.iiiMode] = 1
                Else If gcd.Drawing.LastDimension.fParam[Me.ipaHorizAngle] = Pi / 2 Then
                    eBuild.iParam[Me.iiiMode] = 2
                Endif
            Else
                eBuild.iParam[Me.iiiMode] = gcd.Drawing.LastDimension.iParam[Me.iiiMode]
            End If

        Else
            Me.DimContinued = False ' no existe dimension anterior para continuar
            Me.DimBaseline = False ' no existe dimension anterior para continuar
        End If

        If Me.DimContinued Or Me.DimBaseline Then
            gcd.StepsDone = 1

        Endif
    End If
    If gcd.StepsDone = 0 Then

        ' supongo que marca el punto de derecha a izq

        Try eBuild.p[0] = vParam[1]
        Try eBuild.p[1] = vParam[2]
        eBuild.p[2] = eBuild.P[0]
        eBuild.p[3] = eBuild.P[1]
        eBuild.p[4] = eBuild.p[2]
        eBuild.p[5] = eBuild.P[3]

        If eBuild.iParam[Me.iiiMode] = 0 Then ' linear (depende de la posicion de la medida)
            iMode = 0
        Else If eBuild.iParam[Me.iiiMode] = 1 Then ' Horizontal
            iMode = 1
        Else If eBuild.iParam[Me.iiiMode] = 2 Then ' Vertical
            iMode = 2
        Else

            eBuild.fParam[Me.ipaRotacion] = eBuild.iParam[Me.iiiMode] / 1e6
            eBuild.iParam[Me.iiiMode] = 3
        End If

        If definitive Then Return True
    Else If gcd.StepsDone = 1 Then

        Try eBuild.p[2] = vParam[1]
        Try eBuild.p[3] = vParam[2]
        If Not Me.DimContinued Then
            eBuild.p[4] = eBuild.p[2]
            eBuild.p[5] = eBuild.P[3]

        End If
        eBuild.pBlock = RebuildBlock(eBuild, eBuild.iParam[Me.iiiMode])
        If definitive Then

            If Me.DimContinued Then Inc gcd.StepsDone
            Return True
        End If
    Else If gcd.StepsDone = 2 Then   ' el tercer punto sera la posicion del texto

        ' return the angle from horizontal to us
        'eBuild.fParam[Me.ipaExtension] = -puntos.PointToLineDistance([vParam[1], vParam[2]], [eBuild.p[0], eBuild.p[1], eBuild.p[2], eBuild.p[3]]) ' / puntos.distancia(eBuild.p[0], eBuild.p[1], eBuild.p[2], eBuild.p[3]
        Try eBuild.p[4] = vParam[1]
        Try eBuild.p[5] = vParam[2]

        ' Try Me.DefPoint1.x = vParam[1]
        ' Try Me.DefPoint1.y = vParam[2]
        eBuild.pBlock = RebuildBlock(eBuild, eBuild.iParam[Me.iiiMode])
        If definitive Then
            'Stop
            Return True
        End If
    Endif

End

'' iMode=-1 es dim alineada entre P1 y P2
'' iMode= 0 linear (determinada por la posicion)
'' iMode= 1 es Horizontal
'' iMode= 2 es Vertical
'' iMode= 3 es Angled
'' iMode= 103 es Ordinate Horizontal
'' iMode= 204 es Ordinate Vertical

'' iMode> 1E5 --> 1E5 x fAngle determina el angulo sobre el cual se mide
'' bContinued fuerza seguir desde el ultimo punto marcado (pasa a ser P1)

Public Sub RebuildBlock(E As Entity, Optional iMode As Integer = 0, fAngle As Float = -1) As Block

    ' esta rutina no sabe si el bloque a reconstruir es desde ENTITYBUILDER o desde
    ' DXF o JSON

    Dim flxTextExt As Float[]
    Dim fRotXY As Float[]

    Dim newBlock As New Block
    Dim oldBlock As Block
    Dim f1, f2 As New Float[]
    Dim a1 As Float
    Dim sDim As String
    Dim invertIda As Boolean
    Dim d, fAngle90 As Single ' para evitar problemas de mantisa cuando Ang=89.99999

    ' para definir este bloque necesito 6 entidades
    Dim eLineaPpal As Entity
    Dim eOblique1 As Entity       ' tambien pueden ser flechas Solid
    Dim eOblique2 As Entity
    Dim eExtension1 As Entity
    Dim eExtension2 As Entity
    Dim eText As Entity
    Dim ePoint1 As Entity
    Dim ePoint2 As Entity
    Dim IsNegative As Boolean

    ' vemos los estilos

    newBlock.name = "*D" ' luego se agregara la handle, en entitybuilder
    newBlock.entities = New Collection

    ' Pasamos los puntos que viene marcando el user a nuestros puntos.
    Me.DefPoint1.x = e.P[0]
    Me.DefPoint1.y = e.P[1]
    Me.DefPoint2.x = e.P[2]
    Me.DefPoint2.y = e.P[3]
    Me.DefTextMIdPoint.x = e.P[4]
    Me.DefTextMIdPoint.y = e.P[5]

    If iMode = -1 Then
        Me.DefAngle = Ang(Me.DefPoint2.x - Me.DefPoint1.x, Me.DefPoint2.y - Me.DefPoint1.y)
    Else If iMode = 0 Then  ' depende de la posicion del mouse

        If ((Me.DefTextMIdPoint.x < Me.DefPoint1.x) And (Me.DefTextMIdPoint.x < Me.DefPoint2.x)) Or ((Me.DefTextMIdPoint.x > Me.DefPoint1.x) And (Me.DefTextMIdPoint.x > Me.DefPoint2.x)) Then ' es vertical
            Me.DefAngle = Pi / 2
        Else If ((Me.DefTextMIdPoint.y < Me.DefPoint1.y) And (Me.DefTextMIdPoint.y < Me.DefPoint2.y)) Or ((Me.DefTextMIdPoint.y > Me.DefPoint1.y) And (Me.DefTextMIdPoint.y > Me.DefPoint2.y)) Then ' es horizontal

            Me.DefAngle = 0
        Else
            If Abs(Me.DefPoint1.x - Me.DefPoint2.x) > Abs(Me.DefPoint1.y - Me.DefPoint2.y) Then ' es horiz
                Me.DefAngle = 0
            Else
                Me.DefAngle = Pi / 2
            End If
        End If

    Else If iMode = 1 Then
        Me.DefAngle = 0
    Else If iMode = 2 Then
        Me.DefAngle = Pi / 2
    Else If iMode = 5 Then
        Me.DefAngle = e.fParam[Me.ipaRotacion] '' RADIANS
    Else If iMode >= 1000 Then
        Me.DefAngle = Rad(imode / 1000) 'e.fParam[Me.ipaRotacion] '' RADIANS
    Endif

    ' reduzco este valor a -89.99 -> 90
    Me.DefAngle = Utils.fMod(Me.DefAngle, Pi)
    If Me.DefAngle > Pi / 2 Then Me.DefAngle -= Pi
    ' busco el angulo perpendicular
    fAngle90 = Me.DefAngle + Pi / 2
    fAngle90 = Utils.fMod(fAngle90, Pi)
    If fAngle90 > Pi / 2 Then fAngle90 -= Pi

    ' el siguiente valor depende de la posicion del texto
    Me.DefDeltaT = e.pDimStyle.DIMTXT * 3 / 4 / e.pDimStyle.DIMSCALE

    ' el centro de la linea principal
    Me.DefPointCentral.x = Me.DefTextMIdPoint.x - Sin(Me.DefAngle) * Me.DefDeltaT
    Me.DefPointCentral.y = Me.DefTextMIdPoint.y + Cos(Me.DefAngle) * Me.DefDeltaT

    ' Determino los puntos auxiliares, que estan sobre una recta que pasa por DefCenter a un angulo DefAngle
    ' 1- Defino la recta

    If Cos(Me.DefAngle) <> 0 Then
        d = Tan(Me.DefAngle)
        Me.DefPointCentralAux.x = Me.DefPointCentral.x + 1
        Me.DefPointCentralAux.y = Me.DefPointCentral.y + d
    Else
        Me.DefPointCentralAux.x = Me.DefPointCentral.x
        Me.DefPointCentralAux.y = Me.DefPointCentral.y + 1
    End If

    ' busco la perendicular q pasa por DefPoint1
    If Cos(fAngle90) <> 0 Then
        d = Tan(fAngle90)
        Me.DefPointAux1.x = Me.DefPoint1.x + 1
        Me.DefPointAux1.y = Me.DefPoint1.y + d
    Else
        Me.DefPointAux1.x = Me.DefPoint1.x
        Me.DefPointAux1.y = Me.DefPoint1.y + 1
    End If

    ' busco la perendicular q pasa por DefPoint2
    If Cos(fAngle90) <> 0 Then
        d = Tan(fAngle90)
        Me.DefPointAux2.x = Me.DefPoint2.x + 1
        Me.DefPointAux2.y = Me.DefPoint2.y + d
    Else
        Me.DefPointAux2.x = Me.DefPoint2.x
        Me.DefPointAux2.y = Me.DefPoint2.y + 1
    End If

    ' ahora determino la inteerseccion de ambas rectas
    f1 = puntos.lineLineIntersection2(Me.DefPointAux1.x, Me.DefPointAux1.y, Me.DefPoint1.x, Me.DefPoint1.y, Me.DefPointCentral.x, Me.DefPointCentral.y, Me.DefPointCentralAux.x, Me.DefPointCentralAux.y)
    Me.DefPoint1b.x = f1[0]
    Me.DefPoint1b.y = f1[1]

    f1 = puntos.lineLineIntersection2(Me.DefPointAux2.x, Me.DefPointAux2.y, Me.DefPoint2.x, Me.DefPoint2.y, Me.DefPointCentral.x, Me.DefPointCentral.y, Me.DefPointCentralAux.x, Me.DefPointCentralAux.y)
    Me.DefPoint2b.x = f1[0]
    Me.DefPoint2b.y = f1[1]

    ' verifico el armado, siempre el P1 debe estar a la izq del P2

    If Me.DefPoint2b.x < Me.DefPoint1b.x Then ' swapeo los puntos
        Swap Me.DefPoint2b.x, Me.DefPoint1b.x
        Swap Me.DefPoint2b.y, Me.DefPoint1b.y

        Swap Me.DefPoint2.x, Me.DefPoint1.x
        Swap Me.DefPoint2.y, Me.DefPoint1.y
    Else If Me.DefPoint2b.x = Me.DefPoint1b.x Then ' swapeo los puntos
        If Me.DefPoint2b.y < Me.DefPoint1b.y Then ' swapeo los puntos
            Swap Me.DefPoint2b.x, Me.DefPoint1b.x
            Swap Me.DefPoint2b.y, Me.DefPoint1b.y

            Swap Me.DefPoint2.x, Me.DefPoint1.x
            Swap Me.DefPoint2.y, Me.DefPoint1.y
        End If
    End If

    ' ahora recalculo la posicion del terxto
    ' el centro de la linea principal
    Me.DefPointCentral.x = (Me.DefPoint1b.x + Me.DefPoint2b.x) / 2
    Me.DefPointCentral.y = (Me.DefPoint1b.y + Me.DefPoint2b.y) / 2
    Me.DefTextMIdPoint.x = Me.DefPointCentral.x - Sin(Me.DefAngle) * Me.DefDeltaT
    Me.DefTextMIdPoint.y = Me.DefPointCentral.y + Cos(Me.DefAngle) * Me.DefDeltaT

    eLineaPpal = cadLine.NewEntity([Me.DefPoint1b.x, Me.DefPoint1b.y, Me.DefPoint2b.x, Me.DefPoint2b.y], True)  ' el 2do punto lo tengo que
    ' lineas de demarcacion
    'eExtension1 = cadLine.NewEntity([Me.DefPoint1b.x, Me.DefPoint1b.y - Me.DimExtension, Me.DefPoint1b.x, Me.DefPoint1b.y + Me.DimExtension])

    ' puntos base, ya en las ubicaciones finales (coinciden con los clicks)
    ePoint1 = cadPoint.NewEntity([Me.DefPoint1.x, Me.DefPoint1.y], True)
    ePoint2 = cadPoint.NewEntity([Me.DefPoint2.x, Me.DefPoint2.y], True)

    ' el largo de la ext line viene controlado por DIMEXE y el offset desde el punto de demarcacion por DIMEXO
    'Me.DefPointExtLineOffset1.x

    ' determino el largo actual de las lineas de extension
    Dim pel0, pel1 As New Punto2d

    pel0 = puntos.ExtendLine2D(Me.DefPoint1, Me.DefPoint1b, e.pDimStyle.DIMEXE * e.pDimStyle.DIMTXT)
    pel1 = puntos.ExtendLine2D(Me.DefPoint1, Me.DefPoint1b, -e.pDimStyle.DIMEXE * e.pDimStyle.DIMTXT)
    'eExtension1 = cadLine.NewEntity([Me.DefPoint1.x, Me.DefPoint1.y, Me.DefPoint1b.x, Me.DefPoint1b.y], True)
    eExtension1 = cadLine.NewEntity([pel0.x, pel0.y, pel1.x, pel1.y], True)

    pel0 = puntos.ExtendLine2D(Me.DefPoint2, Me.DefPoint2b, e.pDimStyle.DIMEXE * e.pDimStyle.DIMTXT)
    pel1 = puntos.ExtendLine2D(Me.DefPoint2, Me.DefPoint2b, -e.pDimStyle.DIMEXE * e.pDimStyle.DIMTXT)

    eExtension2 = cadLine.NewEntity([Me.DefPoint2.x, Me.DefPoint2.y, Me.DefPoint2b.x, Me.DefPoint2b.y], True)

    eExtension2 = cadLine.NewEntity([pel0.x, pel0.y, pel1.x, pel1.y], True)

    ' flechas

    eOblique1 = cadInsert.NewEntity([Me.DefPoint1b.x, Me.DefPoint1b.y], True)
    eOblique1.pBlock = New Block
    eOblique1.fParam[cadInsert.ipaEscX] = e.pDimStyle.DIMASZ
    eOblique1.fParam[cadInsert.ipaEscY] = e.pDimStyle.DIMASZ
    eOblique1.fParam[cadInsert.ipaEscZ] = e.pDimStyle.DIMASZ
    eOblique1.fParam[cadInsert.ipaRotacion] = Deg(Me.DefAngle)
    If gcd.Drawing.Blocks.Exist(e.pDimStyle.DIMBLK1) Then
        eOblique1.pBlock.name = e.pDimStyle.DIMBLK1
    Else If gcd.Drawing.Blocks.Exist(e.pDimStyle.DIMBLK) Then
        eOblique1.pBlock.name = e.pDimStyle.DIMBLK
        eOblique1.fParam[cadInsert.ipaRotacion] = Deg(Me.DefAngle) + 180
    Else If gcd.Drawing.Blocks.Exist(e.pdimstyle.Thick1) Then
        eOblique1.pBlock.name = e.pdimstyle.Thick1
    Else
        eOblique1.pBlock.name = "_thick1_arrow"
    End If

    cadInsert.Finish(eOblique1)

    eOblique2 = cadInsert.NewEntity([Me.DefPoint2b.x, Me.DefPoint2b.y], True)
    eOblique2.pBlock = New Block
    If gcd.Drawing.Blocks.Exist(e.pDimStyle.DIMBLK2) Then
        eOblique2.pBlock.name = e.pDimStyle.DIMBLK2
    Else If gcd.Drawing.Blocks.Exist(e.pDimStyle.DIMBLK) Then
        eOblique2.pBlock.name = e.pDimStyle.DIMBLK

    Else If gcd.Drawing.Blocks.Exist(e.pdimstyle.Thick2) Then
        eOblique2.pBlock.name = e.pdimstyle.Thick2
    Else
        eOblique2.pBlock.name = "_thick2_arrow"
    End If

    eOblique2.fParam[cadInsert.ipaEscX] = e.pDimStyle.DIMASZ
    eOblique2.fParam[cadInsert.ipaEscY] = e.pDimStyle.DIMASZ
    eOblique2.fParam[cadInsert.ipaEscZ] = e.pDimStyle.DIMASZ
    eOblique2.fParam[cadInsert.ipaRotacion] = Deg(Me.DefAngle)
    cadInsert.Finish(eOblique2)

    ' texto
    eText = cadMText.NewEntity([Me.DefTextMIdPoint.x, Me.DefTextMIdPoint.y], True)  ' si leo un archivo, esta es la posicion final
    eText.fParam[cadMText.ipaAttchmPoint] = 8
    eText.fParam[cadMText.ipaTextAngle] = Me.DefAngle
    eText.fParam[cadMText.ipaTextHeight] = e.pDimStyle.DIMTXT / e.pDimStyle.DIMSCALE

    ' MODIFICO PARA ORDINATE
    newBlock.entities.Add(eLineaPpal, eLineaPpal.Id)
    ' agrego todo al bloque
    If e.pDimStyle.DIMSE2 = 0 Then newBlock.entities.Add(eExtension2, eExtension2.Id)

    newBlock.entities.Add(ePoint2, ePoint2.Id)
    newBlock.entities.Add(eOblique2, eOblique2.Id)

    If e.pDimStyle.DIMSE1 = 0 Then newBlock.entities.Add(eExtension1, eExtension1.Id)
    newBlock.entities.Add(ePoint1, ePoint1.Id)
    newBlock.entities.Add(eOblique1, eOblique1.Id)

    newBlock.entities.Add(eText, eText.Id)
    newBlock.InsertionPlace = 1

    ' -> el bloque
    E.fParam[cadInsert.ipaEscX] = 1      ' ScaleX del inserto
    E.fParam[cadInsert.ipaEscY] = 1      ' ScaleY del inserto
    E.fParam[cadInsert.ipaEscZ] = 1      ' ScaleY del inserto
    E.Visible = True

    d = puntos.distancia(Me.DefPoint1b.x, Me.DefPoint1b.y, Me.DefPoint2b.x, Me.DefPoint2b.y)

    E.fParam[cadDimension.ipaRealMeasure] = Abs(d)
    If E.sParam[Me.sdaTextOverrIde] <> "" Then
        sDim = E.sParam[Me.sdaTextOverrIde]
    Else
        sDim = Format(Abs(d), e.pDimStyle.FormatLong)
    Endif
    ' el texto
    eText.sParam[cadMText.sdaText] = "\\A1;" & sDim

    cadMText.BuildGeometry(eText)

    ' veo si entra el texto
    flxTextExt = glx.TextExtends(sDim, e.pDimStyle.DIMTXT)
    If flxTextExt[0] * 1.2 > d Then ' no entra
        eOblique1.fParam[cadInsert.ipaRotacion] += 180
        eOblique2.fParam[cadInsert.ipaRotacion] += 180
    End If

    ' guardo los puntos para exportar a DXF

    e.P[10] = Me.DefPoint2b.x
    e.P[11] = Me.DefPoint2b.y

    e.P[12] = Me.DefTextMIdPoint.x
    e.P[13] = Me.DefTextMIdPoint.y

    e.P[14] = 0 ' baseline
    e.P[15] = 0

    e.P[16] = Me.DefPoint1.x
    e.P[17] = Me.DefPoint1.y

    e.P[18] = Me.DefPoint2.x
    e.P[19] = Me.DefPoint2.y

    e.P[20] = 0
    e.P[21] = 0

    e.P[22] = 0
    e.P[23] = 0

    e.fParam[Me.ipaHorizAngle] = Me.DefAngle

    Return newBlock

End

'' Genera un conjunto de grips para ser usados por cadSelection
Public Function GenerateGrips(e As Entity) As Integer

    Dim i As Integer
    Dim g As Grip
    Dim iCount As Integer
    Dim flxGrip As New Float[]

    g = New Grip
    g.Shape = 0
    g.X = e.P[0]
    g.Y = e.P[1]
    g.Action = 0 ' mover
    g.AsociatedEntity = e
    g.AsociatedPoint = 0
    gcd.Drawing.Sheet.Grips.Add(g)
    g.ToolTip = ("Move def point")

    g = New Grip
    g.Shape = 0
    g.X = e.P[2]
    g.Y = e.P[3]
    g.Xr = g.X
    g.Yr = g.Y
    ' flxGrip.Add(g.X)
    ' flxGrip.Add(g.y)
    ' puntos.Rotate(flxGrip, Rad(e.fParam[Me.ipaRotacion]))
    ' g.X = e.P[0] + flxGrip[0]
    ' g.y = e.P[1] + flxGrip[1]
    ' g.Xr = g.X
    ' g.Yr = g.Y
    g.Action = 1 ' este dato es propio de la clase
    g.AsociatedEntity = e
    g.AsociatedPoint = 1
    g.AsociatedGrip = 0
    'g.iFillColor = Color.Red
    'g.DrawLineToAsociatedGrip = True
    g.ToolTip = ("Move def point")
    'g.ToolTip = ("Rotate insert")
    gcd.Drawing.Sheet.Grips.Add(g)

    g = New Grip
    g.Shape = 0
    g.X = e.P[4]
    g.Y = e.P[5]
    g.Action = 0 ' mover
    g.AsociatedEntity = e
    g.AsociatedPoint = 2
    gcd.Drawing.Sheet.Grips.Add(g)
    g.ToolTip = ("Move text position")

End

Public Function GripEdit(g As Grip) As Boolean

    Dim e As Entity
    Dim Xr, Yr, xs, ys As Float

    e = g.AsociatedEntity
    e.P[g.AsociatedPoint * 2] = g.X
    e.P[g.AsociatedPoint * 2 + 1] = g.Y

    e.pBlock = RebuildBlock(e, e.iParam[Me.iiiMode])

End

' Public Sub Translate(e As Entity, dX As Float, dY As Float, Optional OnlySelected As Boolean = False)
'
'     Dim eBlock As Entity
'     ' EntityBase.Translate(e, dx, dy, OnlySelected)
'     ' ReBuildBlock(e)
'     '
'     ' los insertos se mueven de acuerdo al punto de insercion
'     puntos.Translate(e.p, dx, dy)
'     For Each eBlock In e.pBlock.entities
'         gcd.CCC[eBlock.gender].translate(eBlock, dx, dy)
'     Next
'
' End
