' Gambas class file

' GambasCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
Create Static
Inherits Caddimension

Public Const Gender As String = "DIMENSION_RADIUS"
Public Const DrawingOrder As Integer = 100 ' 1 a 32.724 esto debe Drawse primero y ser sobreescrito por el resto
Public Const PointsToDraw As Integer = 1             ' minimal point requered for drawing something usefull
Public Const CmdLineHelper As String = ("Insert a linear acotation")
Public Const ParamType As String = "PP"                             ' that is Point, Point, Float; could be Color Text, etc
Public Const ParamHelper As String = "Start point;End point"

Public Function NewEntity(Optional fPoints As Float[], bNewHandle As Boolean = False) As Entity

    Dim e As Entity

    e = Super.NewEntity(fPoints, bNewHandle)
    If e.Gender = cadDIMENSION_RADIUS.Gender Then
        e.iParam[Me.iiiDimType] = 4
    Else
        e.iParam[Me.iiiDimType] = 3
    End If
    Return e

End

Public Sub ExportDXFCol(e As Entity, ByRef stxExport As String[]) As Boolean

    cadDimension.ExportDXFCol(e, stxExport)

    ' sobreescribo el nombre de la entidad
    If e.iParam[Me.iiiDimType] = 0 Then
        stxExport.insert(["AcDbRadialDimension", "100"])
    Else
        stxExport.insert(["AcDbDiametricDimension", "100"])
    End If
    ' ===========================================================================

    stxExport.insert([CStr(e.p[20]), "15"])                ' text att point
    stxExport.insert([CStr(e.p[21]), "25"])
    stxExport.insert(["0", "40"])               ' leader lenght

End

Public Function ImportDXF(e As Entity, sClaves As String[], sValues As String[]) As Boolean

    Dim i As Integer
    Dim AfterSubclassmarker As Boolean
    ' revisamos lo que viene del importador comun
    ' DXF 10 20 30
    ' e.P[0]    ' Centro
    ' e.P[1]

    ' DXF 11 21 31
    ' e.P[2]    ' Posicion del Texto (mid)
    ' e.P[3]

    ' DXF 15 25 35
    ' e.P[8]    ' Posicion del Texto (mid)
    ' e.P[9]

    For i = 0 To sClaves.Max
        If sClaves[i] = "100" And (sValues[i] = "AcDbRadialDimension" Or sValues[i] = "AcDbDiametricDimension") Then AfterSubclassmarker = True
        If AfterSubclassmarker Then ' lo siguientes codigos

            If sClaves[i] = "15" Then e.P[4] = CFloat(sValues[i])
            If sClaves[i] = "25" Then e.P[5] = CFloat(sValues[i])

        End If

    Next

    ' TODO: cuando este terminada la entidad, sacar eso
    ' tengo q presuponer que las escalas son = 1
    e.fParam[Me.ipaEscX] = 1    ' esc X
    e.fParam[Me.ipaEscY] = 1    ' esc Y
    e.fParam[Me.ipaEscZ] = 1    ' esc Z
    e.pBlock.InsertionPlace = 1

    ' y poner esto
    ' e.pBlock = Me.ReBuildBlock(e)

    Return True

    ' catch

    Return False

End

Public Function NewParameter(eBuild As Entity, vParam As Variant[], Optional Definitive As Boolean = False) As Boolean

    ' la linea solo recibe puntos

    If vParam[0] <> "point" Then Return False

    If gcd.StepsDone = 0 Then            ' center

        Try eBuild.P[0] = vParam[1]
        Try eBuild.P[1] = vParam[2]
        eBuild.P[2] = eBuild.P[0]
        eBuild.P[3] = eBuild.P[1]
        If definitive Then Return True
    Else If gcd.StepsDone = 1 Then       ' definition point

        Try eBuild.P[2] = vParam[1]
        Try eBuild.P[3] = vParam[2]
        eBuild.pBlock = RebuildBlock(eBuild, eBuild.iParam[Me.iiiDimType] And 31)
        If definitive Then Return True

    Endif

End

'' iMode= 0 es radial
'' iMode= 0 es diameter

Public Sub RebuildBlock(E As Entity, Optional iMode As Integer = 0) As Block

    ' esta rutina no sabe si el bloque a reconstruir es desde ENTITYBUILDER o desde
    ' DXF o JSON

    Dim flxTextExt As Float[]
    Dim fRotXY As Float[]

    Dim newBlock As New Block
    Dim f1, f2 As New Float[]
    Dim a1 As Float
    Dim sDim As String
    Dim invertIda As Boolean
    Dim d, fAngle90 As Single ' para evitar problemas de mantisa cuando Ang=89.99999

    ' para definir este bloque necesito 6 entidades
    Dim eLineaPpal As Entity
    Dim eOblique1 As Entity       ' tambien pueden ser flechas Solid
    Dim eOblique2 As Entity
    Dim eExtension1 As Entity
    Dim eExtension2 As Entity
    Dim eText As Entity
    Dim ePoint1 As Entity
    Dim ePoint2 As Entity

    newBlock.name = "*D" ' luego se agregara la handle, en entitybuilder
    newBlock.entities = New Collection

    ' Pasamos los puntos que viene marcando el user a nuestros puntos.
    Me.DefPoint1.x = e.P[0]
    Me.DefPoint1.y = e.P[1]
    Me.DefPoint2.x = e.P[2]
    Me.DefPoint2.y = e.P[3]
    Me.DefTextMIdPoint.x = e.P[4]
    Me.DefTextMIdPoint.y = e.P[5]

    Me.DefAngle = Ang(Me.DefPoint2.x - Me.DefPoint1.x, Me.DefPoint2.y - Me.DefPoint1.y)

    ' reduzco este valor a -89.99 -> 90
    Me.DefAngle = Utils.fMod(Me.DefAngle, Pi)
    If Me.DefAngle > Pi / 2 Then Me.DefAngle -= Pi
    ' busco el angulo perpendicular
    fAngle90 = Me.DefAngle + Pi / 2
    fAngle90 = Utils.fMod(fAngle90, Pi)
    If fAngle90 > Pi / 2 Then fAngle90 -= Pi

    ' el siguiente valor depende de la posicion del texto
    Me.DefDeltaT = e.pDimStyle.DIMTXT * 3 / 4

    ' el centro de la linea principal
    Me.DefPointCentral.x = Me.DefTextMIdPoint.x - Sin(Me.DefAngle) * Me.DefDeltaT
    Me.DefPointCentral.y = Me.DefTextMIdPoint.y + Cos(Me.DefAngle) * Me.DefDeltaT

    ' ahora recalculo la posicion del terxto
    ' el centro de la linea principal
    Me.DefPointCentral.x = (Me.DefPoint1b.x + Me.DefPoint2b.x) / 2
    Me.DefPointCentral.y = (Me.DefPoint1b.y + Me.DefPoint2b.y) / 2
    Me.DefTextMIdPoint.x = Me.DefPointCentral.x - Sin(Me.DefAngle) * Me.DefDeltaT
    Me.DefTextMIdPoint.y = Me.DefPointCentral.y + Cos(Me.DefAngle) * Me.DefDeltaT

    Me.DefTextMIdPoint.x = (Me.DefPoint1.x + Me.DefPoint2.x) / 2
    Me.DefTextMIdPoint.y = (Me.DefPoint1.y + Me.DefPoint2.y) / 2
    ' linea principal
    eLineaPpal = cadLine.NewEntity([Me.DefPoint1.x, Me.DefPoint1.y, Me.DefPoint2.x, Me.DefPoint2.y], True)  ' el 2do punto lo tengo que determinar, el primero esta en la posicion final

    ' lineas de demarcacion
    'eExtension1 = cadLine.NewEntity([Me.DefPoint1b.x, Me.DefPoint1b.y - Me.DimExtension, Me.DefPoint1b.x, Me.DefPoint1b.y + Me.DimExtension])

    'eExtension1 = cadLine.NewEntity([Me.DefPoint1.x, Me.DefPoint1.y, Me.DefPoint1b.x, Me.DefPoint1b.y], True)
    'eExtension2 = cadLine.NewEntity([Me.DefPoint2.x, Me.DefPoint2.y, Me.DefPoint2b.x, Me.DefPoint2b.y], True)

    ' puntos base, ya en las ubicaciones finales (coinciden con los clicks)
    ePoint1 = cadPoint.NewEntity([Me.DefPoint1.x, Me.DefPoint1.y], True)
    ePoint2 = cadPoint.NewEntity([Me.DefPoint2.x, Me.DefPoint2.y], True)

    ' flechas
    eOblique1 = cadInsert.NewEntity([Me.DefPoint1.x, Me.DefPoint1.y], True)
    eOblique1.pBlock = New Block
    If gcd.Drawing.Blocks.Exist(e.pDimStyle.Thick1) Then
        eOblique1.pBlock.name = e.pDimStyle.Thick1
    Else
        eOblique1.pBlock.name = "_thick1_arrow"
    End If
    eOblique1.fParam[cadInsert.ipaEscX] = 1
    eOblique1.fParam[cadInsert.ipaEscY] = 1
    eOblique1.fParam[cadInsert.ipaEscZ] = 1
    eOblique1.fParam[cadInsert.ipaRotacion] = Deg(Me.DefAngle)
    cadInsert.Finish(eOblique1)

    eOblique2 = cadInsert.NewEntity([Me.DefPoint2.x, Me.DefPoint2.y], True)
    eOblique2.pBlock = New Block
    If gcd.Drawing.Blocks.Exist(e.pDimStyle.Thick2) Then
        eOblique2.pBlock.name = e.pDimStyle.Thick2
    Else
        eOblique2.pBlock.name = "_thick2_arrow"
    End If
    eOblique2.fParam[cadInsert.ipaEscX] = 1
    eOblique2.fParam[cadInsert.ipaEscY] = 1
    eOblique2.fParam[cadInsert.ipaEscZ] = 1
    eOblique2.fParam[cadInsert.ipaRotacion] = Deg(Me.DefAngle)
    cadInsert.Finish(eOblique2)

    ' texto
    eText = cadMText.NewEntity([Me.DefTextMIdPoint.x, Me.DefTextMIdPoint.y], True)  ' si leo un archivo, esta es la posicion final
    eText.fParam[cadMText.ipaAttchmPoint] = 8
    eText.fParam[cadMText.ipaTextAngle] = Me.DefAngle
    eText.fParam[cadMText.ipaTextHeight] = e.pDimStyle.DIMTXT

    ' agrego todo al bloque
    newBlock.entities.Add(eLineaPpal, eLineaPpal.Id)
    'newBlock.entities.Add(eExtension1, eExtension1.Handle)
    'newBlock.entities.Add(eExtension2, eExtension2.Handle)
    newBlock.entities.Add(ePoint1, ePoint1.Id)
    newBlock.entities.Add(ePoint2, ePoint2.Id)

    If iMode = 1 Then
        newBlock.entities.Add(eOblique1, eOblique1.Id)
    End If

    newBlock.entities.Add(eOblique2, eOblique2.Id)
    newBlock.entities.Add(eText, eText.Id)
    newBlock.InsertionPlace = 1

    ' -> el bloque
    E.fParam[cadInsert.ipaEscX] = 1      ' ScaleX del inserto
    E.fParam[cadInsert.ipaEscY] = 1      ' ScaleY del inserto
    E.fParam[cadInsert.ipaEscZ] = 1      ' ScaleY del inserto
    E.Visible = True

    d = puntos.distancia(Me.DefPoint1.x, Me.DefPoint1.y, Me.DefPoint2.x, Me.DefPoint2.y)

    E.fParam[cadDimension.ipaRealMeasure] = Abs(d)
    If E.sParam[Me.sdaTextOverrIde] <> "" Then
        sDim = E.sParam[Me.sdaTextOverrIde]
    Else
        sDim = Format(Abs(d), e.pDimStyle.FormatLong)
    Endif
    ' el texto
    eText.sParam[cadMText.sdaText] = "\\A1;" & sDim

    ' veo si entra el texto
    flxTextExt = glx.TextExtends(sDim, e.pDimStyle.DIMTXT)
    If flxTextExt[0] * 1.2 > d Then ' no entra
        'eOblique1.fParam[cadInsert.ipaRotacion] += 180
        eOblique2.fParam[cadInsert.ipaRotacion] += 180
    End If

    ' guardo los puntos para exportar a DXF

    e.P[10] = Me.DefPoint1.x        '  10 20 30
    e.P[11] = Me.DefPoint1.y

    e.P[12] = Me.DefTextMIdPoint.x  '  11 21 31
    e.P[13] = Me.DefTextMIdPoint.y

    e.P[14] = 0 ' baseline          ' 12 22 32
    e.P[15] = 0

    e.P[16] = 0                      ' 13 23 33
    e.P[17] = 0

    e.P[14] = 0                      ' 14 24 34
    e.P[15] = 0

    e.P[20] = Me.DefPoint2.x         ' 15 25 35
    e.P[21] = Me.DefPoint2.y

    e.P[22] = 0                      ' 16 26 36
    e.P[23] = 0

    Return newBlock

End

'' Genera un conjunto de grips para ser usados por cadSelection
Public Function GenerateGrips(e As Entity) As Integer

    Dim i As Integer
    Dim g As Grip
    Dim iCount As Integer
    Dim flxGrip As New Float[]

    g = New Grip
    g.Shape = 0
    g.X = e.P[0]
    g.Y = e.P[1]
    g.Action = 0 ' mover
    g.AsociatedEntity = e
    g.AsociatedPoint = 0
    gcd.Drawing.Sheet.Grips.Add(g)
    g.ToolTip = ("Move def point")

    g = New Grip
    g.Shape = 0
    g.X = e.P[2]
    g.Y = e.P[3]
    g.Xr = g.X
    g.Yr = g.Y
    ' flxGrip.Add(g.X)
    ' flxGrip.Add(g.y)
    ' puntos.Rotate(flxGrip, Rad(e.fParam[Me.ipaRotacion]))
    ' g.X = e.P[0] + flxGrip[0]
    ' g.y = e.P[1] + flxGrip[1]
    ' g.Xr = g.X
    ' g.Yr = g.Y
    g.Action = 1 ' este dato es propio de la clase
    g.AsociatedEntity = e
    g.AsociatedPoint = 1
    g.AsociatedGrip = 0
    'g.iFillColor = Color.Red
    'g.DrawLineToAsociatedGrip = True
    g.ToolTip = ("Move def point")
    'g.ToolTip = ("Rotate insert")
    gcd.Drawing.Sheet.Grips.Add(g)

    ' g = New Grip
    ' g.Shape = 0
    ' g.X = e.P[4]
    ' g.Y = e.P[5]
    ' g.Action = 0 ' mover
    ' g.AsociatedEntity = e
    ' g.AsociatedPoint = 2
    ' gcd.Drawing.Sheet.Grips.Add(g)
    ' g.ToolTip = ("Move text position")

End

Public Function GripEdit(g As Grip) As Boolean

    Dim e As Entity
    Dim Xr, Yr, xs, ys As Float

    e = g.AsociatedEntity
    e.P[g.AsociatedPoint * 2] = g.X
    e.P[g.AsociatedPoint * 2 + 1] = g.Y

    e.pBlock = RebuildBlock(e, e.iParam[Me.iiiMode])

End
