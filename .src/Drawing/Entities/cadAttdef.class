' Gambas class file

' GambasCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
Create Static
' Fast
Inherits CadMText

Public Const Gender As String = "ATTDEF"
Public Const USEWITH As String = "MTEXTBUILDER"
Public Const DrawingOrder As Integer = 100 ' 1 a 32.724 esto debe Drawse primero y ser sobreescrito por el resto
Public Const PointsToDraw As Integer = 1             ' minimal point requered for drawing something usefull
Public Const CmdLineHelper As String = ("Inserts an attdef")
Public Const ParamType As String = "PAFT"
Public Const ParamHelper As String = "Start point;Angle;Heigth;"      ' a little text that is shown at the prompt waiting for user input during build
Public Const ParamDefault As String = " ; 0 ; 10 ; "

Public Const sdaTotalParams As Integer = 4
Public Const sdaTag As Integer = 2
Public Const sdaPromt As Integer = 3

' An ATTDEF Is An attribute definition that you Create prior To including it
' In your block definition.An ATTRIB Is What an ATTDEF becomes after you
' insert a block With attribs.

' Public Sub Draw(oE As Entity)
'
'     Return ' no se dibuja
'
' End
'
' Public Sub Draw2(oE As Entity)
'
'     Return ' no se dibuja
'
' End

Public Function ImportDXF(e As Entity, sClaves As String[], sValues As String[]) As Boolean

    Dim i As Integer
    Dim AfterSubclassmarker As Boolean

    cadText.ImportDXF(e, sClaves, sValues)

    e.sParam.Add("")    ' tag
    e.sParam.Add("")    ' promt

    For i = 0 To sClaves.Max
        If sClaves[i] = "100" And sValues[i] = "AcDbAttributeDefinition" Then AfterSubclassmarker = True
        If AfterSubclassmarker Then ' lo siguientes codigos
            If sClaves[i] = "3" Then e.sParam[Me.sdaPromt] = sValues[i]
            If sClaves[i] = "2" Then e.sParam[Me.sdaTag] = sValues[i]
            If sClaves[i] = "70" Then e.fParam[cadText.ipaTextVisibility] = CFloat(sValues[i])      ' FLAGS  1=invisible, 2=constante 4 = preguntar 8 = preseteado
        End If
    Next

    Return True

    ' catch

    Return False

End

Public Sub ExportDXFCol(e As Entity, ByRef stxExport As String[]) As Boolean

    cadText.ExportDXFCol(e, stxExport)

    ' sobreescribo el nombre de la entidad
    stxExport[0] = "ATTDEF"

    stxExport.insert(["AcDbAttributeDefinition", "100"])
    ' ===========================================================================
    stxExport.insert([e.sParam[Me.sdaPromt], "3"])
    stxExport.insert([e.sParam[Me.sdaTag], "2"])
    stxExport.insert([CStr(CInt(e.fParam[cadText.ipaTextVisibility])), "70"]) ' FLAGS  1=invisible, 2=constante 4 = preguntar 8 = preseteado

End
