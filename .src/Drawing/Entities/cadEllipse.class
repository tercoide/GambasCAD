' Gambas class file

' GambasCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
Create Static
' Fast
Inherits EntityBase
Public Const Gender As String = "ELLIPSE"
Public Const PointsToDraw As Integer = 1             ' minimal point requered for drawing something usefull
Public Const CmdLineHelper As String = ("Draw an ellipse")
Public Const ParamType As String = "PPRRR"
Public Const ParamHelper As String = "Start point;Major Radious;Minor/Major;Start;End"      ' a little text that is shown at the prompt waiting for user input during build
Public Const ParamDefault As String = " ;  ;0.5;0;360"

' vars creadas en finish

Public recorrIdo As Float
Public angle As Float
Public Const TotalParams As Integer = 3
Public Const TotalPoints As Integer = 2

' The entity handler receives a user action, and returns the number of expected parameter
' If definitive = true, means the parameter is set
Public Function NewParameter(eBuild As Entity, vParam As Variant[], Optional Definitive As Boolean = False) As Boolean

    Dim f As Float
    Dim ip As Integer

    If gcd.StepsDone = 0 Then

        If vParam[0] <> "point" Then Return gcd.StepsDone

        Try eBuild.P[0] = vParam[1]
        Try eBuild.P[1] = vParam[2]
        eBuild.P[2] = eBuild.P[0]
        eBuild.P[3] = eBuild.P[1]
        If definitive Then Return True

    Else If gcd.StepsDone = 1 Then

        If vParam[0] <> "point" Then Return False

        Try eBuild.P[2] = vParam[1]
        Try eBuild.P[3] = vParam[2]
        eBuild.fParam[0] = 0.5
        eBuild.fParam[1] = 0
        eBuild.fParam[2] = 360
        If definitive Then Return True

    Else If gcd.StepsDone = 2 Then   ' recibimos la relacion de minor/major

        If vParam[0] = "point" Then  ' vino como un punto, entonces la calculo de otra manera

            ' return the angle from horizontal to us
            eBuild.fParam[0] = Abs(puntos.PointToLineDistance([vParam[1], vParam[2]], [eBuild.p[0], eBuild.p[1], eBuild.p[2], eBuild.p[3]])) / puntos.distancia(eBuild.p[0], eBuild.p[1], eBuild.p[2], eBuild.p[3])

        Else If vParam[0] = "float" Then  ' vino como un punto, entonces la calculo de otra manera
            eBuild.fParam[0] = vParam[1]

        Else
            Return False
        End If

        If definitive Then Return True

    Else If gcd.StepsDone = 3 Or gcd.StepsDone = 4 Then    ' recibimos el angulo inicial

        If gcd.StepsDone = 3 Then ip = 1 Else ip = 2

        If vParam[0] = "float" Then  ' vino como un punto, entonces la calculo de otra manera
            eBuild.fParam[ip] = vParam[1]

        Else If vParam[0] = "point" Then
            f = Ang(vParam[1] - eBuild.P[0], vParam[2] - eBuild.P[1])
            f *= 180 / Pi
            eBuild.fParam[ip] = f
        Else
            Return False
        End If

        If definitive Then Return True

    Else
        Return False
    End If

End

Public Sub Rotate(e As Entity, radians As Float)

    puntos.Rotate(e.p, radians)

End

Public Sub Scale(e As Entity, sX As Float, sY As Float)

    Dim i As Integer

    For i = 0 To e.p.max Step 2

        e.P[i] = e.P[i] * sX

        e.P[i + 1] = e.P[i + 1] * sY

    Next

    ' start/end
    If sx < 0 Then
        E.fParam[1] = 360 - E.fParam[1]
        E.fParam[2] = 360 - E.fParam[2]
        Swap e.fParam[1], e.fParam[2]
        If E.fParam[2] < E.fParam[1] Then E.fParam[2] += 360

    Endif

    If sy < 0 Then
        E.fParam[1] = 360 - E.fParam[1]
        E.fParam[2] = 360 - E.fParam[2]
        Swap e.fParam[1], e.fParam[2]
        If E.fParam[2] < E.fParam[1] Then E.fParam[2] += 360
    Endif

End

Public Sub MakePolyline(oe As Entity)

    Dim x, y, theta, angle_increment As Float
    Dim i As Integer
    Dim major, minor, la As Float

    major = Sqr((oE.p[2] - oE.p[0]) ^ 2 + (oE.p[3] - oE.p[1]) ^ 2)
    angle = Ang(oE.p[2] - oE.p[0], oE.p[3] - oE.p[1])          ' Los coordenadas del eje mayor son relativas al centro

    Minor = major * oE.fParam[0]
    If major = 0 Then major = 1

    oE.PolyLine.Clear
    angle_increment = Pi * 2 / 72 '* oe.fParam[3]

    ' el truco de ir hasta (+ angle_inc/2 ) es para evitar artuligios matematicos que
    ' dejan incompleta la entidad (para ARC es lo mismo)
    For theta = oE.fParam[1] / 180 * Pi To oE.fParam[2] / 180 * Pi Step angle_increment
        ' el punto considerando 0,0 al centro
        x = major * Cos(theta) * Cos(angle) - minor * Sin(theta) * Sin(angle)
        y = major * Cos(theta) * Sin(angle) + minor * Sin(theta) * Cos(angle)
        oE.PolyLine.Add(x + oE.p[0])
        oE.PolyLine.Add(y + oE.p[1])

    Next

End

Public Sub Draw(oE As Entity)

    Dim x, y, theta, angle_increment As Float
    Dim i As Integer
    Dim major, minor, la As Float

    If Not oE.Visible Then Return

    major = Sqr((oE.p[2] - oE.p[0]) ^ 2 + (oE.p[3] - oE.p[1]) ^ 2)
    angle = Ang(oE.p[2] - oE.p[0], oE.p[3] - oE.p[1])          ' Los coordenadas del eje mayor son relativas al centro

    Minor = major * oE.fParam[0]
    If major = 0 Then major = 1

    Me.MakePolyline(oe)

    glx.PolyLines(oE.PolyLine, gcd.GetGBColor(oE.Colour, oe.pLayer), gcd.GetLineWt(oE.LineWIdth, oe.pLayer), oE.LineType.TrameLength)

    ' ayudas al user
    If gcd.StepsDone = 3 Or gcd.StepsDone = 4 Then ' dibujo una linea para indicar el angulo
        Dim iP As Integer
        Dim x0, y0, x1, y1 As Float

        If gcd.StepsDone = 3 Then ip = 1 Else ip = 2
        x0 = oe.P[0]          ' centro de la elipse
        y0 = oe.P[1]
        x1 = x0 + major * Cos(angle + oe.fParam[ip] / 180 * Pi) * 1.1
        y1 = y0 + major * Sin(angle + oe.fParam[ip] / 180 * Pi) * 1.1

        glx.DrawLines([x0, y0, x1, y1], Config.OnScreenHelpColor)

    Endif

End

'' A fat version of the entity
Public Sub DrawSelected(oE As Entity)

    glx.PolyLines(oE.PolyLine, Color.Gradient(gcd.GetGBColor(oE.Colour, oe.pLayer), Config.ModelBackgroundColor), gcd.GetLineWt(oE.LineWIdth, oe.pLayer), oE.LineType.TrameLength)

End

'' A fat version of the entity
Public Sub DrawRemark(oE As Entity)

    glx.PolyLines(oE.PolyLine, Color.Gradient(gcd.GetGBColor(oE.Colour, oe.pLayer), Config.WhiteAndBlack), gcd.GetLineWt(oE.LineWIdth, oe.pLayer) + 1, oE.LineType.TrameLength)

End

Public Function Draw2(oE As Entity)

    Dim major, minor, la As Float

    major = Sqr((oE.p[2] - oE.p[0]) ^ 2 + (oE.p[3] - oE.p[1]) ^ 2)
    angle = Ang(oE.p[2] - oE.p[0], oE.p[3] - oE.p[1])          ' Los coordenadas del eje mayor son relativas al centro

    Minor = major * oE.fParam[0]
    If major = 0 Then major = 1

    paint.Save

    paint.Translate(oE.p[0], oE.p[1])
    paint.Rotate(-angle)
    Paint.Scale(1, Minor / major)
    paint.arc(0, 0, major, oE.fParam[1] / 180 * Pi, ((oE.fParam[2] - oE.fParam[1]) / 180 * Pi))
    paint.Stroke
    paint.Restore

End

' Public Function BuildPOI(oE As Entity) As Integer
'
'     oe.PoiPoints.Clear
'     oe.PoiType.Clear
'
'     ' CENTER
'     oe.poiPoints.insert([oE.p[0], oE.p[1]])
'     oe.poiType.Add(gcd.poiCenter)
'
'     ' ' quadrant
'     ' oe.poiPoints.insert([oE.p[0] + oe.fParam[0], oE.p[1]])
'     ' oe.poiType.Add(gcd.poiQuadrant)
'     '
'     ' ' quadrant
'     ' oe.poiPoints.insert([oE.p[0] - oe.fParam[0], oE.p[1]])
'     ' oe.poiType.Add(gcd.poiQuadrant)
'     '
'     ' ' quadrant
'     ' oe.poiPoints.insert([oE.p[0], oE.p[1] + oe.fParam[0]])
'     ' oe.poiType.Add(gcd.poiQuadrant)
'     '
'     ' ' quadrant
'     ' oe.poiPoints.insert([oE.p[0], oE.p[1] - oe.fParam[0]])
'     ' oe.poiType.Add(gcd.poiQuadrant)
'
' End

' This function will return False if the element couldn't be created for some reason: bad or incomple user input
' True means all is good, False will instruct the clsENTITYBUILDER to delete it
Public Sub Finish(oE As Entity) As Boolean

    ' calculo el recorrido del arco como
    ' OJO en la ELLIPSE vienen en radianes, y en ARC en grados

    'CreatePolygon

    ' tareas finales de armado del objeto

    oE.psel.resize(oE.p.count / 2)
    Me.makepolyline(oe)

    If oE.fParam[2] < oE.fParam[1] Then oE.fParam[2] += 360

End

Public Sub ExportDXFCol(e As Entity, ByRef stxExport As String[]) As Boolean

    ' stxExport.insert(["ELLIPSE", dxf.codEntity])
    ' Los datos comunes a todas las entidades son guardados por la rutina que llama a esta
    stxExport.insert(["AcDbEllipse", "100"])
    stxExport.insert([CStr(e.p[0]), dxf.codCenterX])
    stxExport.insert([CStr(e.p[1]), dxf.codCenterY])
    stxExport.insert([CStr(e.p[2] - e.p[0]), dxf.codX1])
    stxExport.insert([CStr(e.p[3] - e.p[1]), dxf.codY1])
    stxExport.insert([CStr(e.fParam[0]), dxf.codRadius])         ' minor/major
    stxExport.insert([CStr(e.fParam[1] / 180 * Pi), "41"])       ' start angle radians
    stxExport.insert([CStr(e.fParam[2] / 180 * Pi), "42"])       ' end angle

End

Public Function ImportDXF(e As Entity, sClaves As String[], sValues As String[]) As Boolean

    Dim i As Integer

    e.P.Clear

    For i = 0 To sClaves.Max

        If sClaves[i] = "10" Then e.P.Add(CFloat(sValues[i]))     ' centro
        If sClaves[i] = "20" Then e.P.Add(CFloat(sValues[i]))
        If sClaves[i] = "11" Then e.P.Add(CFloat(sValues[i]) + e.P[0])     ' eje mayor, relativo al centro
        If sClaves[i] = "21" Then e.P.Add(CFloat(sValues[i]) + e.P[1])
        If sClaves[i] = "40" Then e.fParam[0] = (CFloat(sValues[i]))
        If sClaves[i] = "41" Then e.fParam[1] = Deg(CFloat(sValues[i]))
        If sClaves[i] = "42" Then e.fParam[2] = Deg(CFloat(sValues[i]))

    Next
    Return True

    ' catch

    Return False

End

'' Return if that position is over the entity within the tolerance
Public Function OverMe(e As Entity, Xr As Float, Yr As Float, tolerance As Float) As Boolean

    Dim angle, major, minor, angle2, x, y As Float
    Dim a1, a2 As Float
    ' necesito determinar el radio en el angulo del punto que estaria sobre la elipse
    angle = Ang(xr - E.P[0], yr - E.P[1])

    ' el radio en este agulo viene dado por

    major = Sqr((E.p[2] - E.p[0]) ^ 2 + (E.p[3] - E.p[1]) ^ 2)
    Minor = major * E.fParam[0]
    angle2 = Ang(E.p[2] - E.p[0], E.p[3] - E.p[1])

    ' x = gcd.CurrDrawing.arrEntities[e].p[0] + major * Cos(angle) * Cos(angle2) - minor * Sin(angle) * Sin(angle2)
    ' y = gcd.CurrDrawing.arrEntities[e].p[1] + major * Cos(angle) * Sin(angle2) + minor * Sin(angle) * Cos(angle2)

    x = E.p[0] + major * Cos(angle) * Cos(angle2) - minor * Sin(angle) * Sin(angle2)
    y = E.p[1] + major * Cos(angle) * Sin(angle2) + minor * Sin(angle) * Cos(angle2)

    ' veo si en esa posicion esta cerca de la elipse
    'If Abs(puntos.distancia(xr, yr, x, y)) < tolerance Then

    ' If Abs(puntos.distancia(xr, yr, gcd.CurrDrawing.arrEntities[e].P[0], gcd.CurrDrawing.arrEntities[e].P[1]) - Sqr(x * x + y * y)) < tolerance Then
    '   ' tengo que ver si esa en la porcion
    '   angle = Angle * 180 / Pi
    '   If angle < 0 Then angle += 360
    '   If gcd.CurrDrawing.arrEntities[e].fParam[1] <= gcd.CurrDrawing.arrEntities[e].fParam[2] Then
    '     If angle >= gcd.CurrDrawing.arrEntities[e].fParam[1] And angle <= gcd.CurrDrawing.arrEntities[e].fParam[2] Then Break
    '   Else
    '     If angle >= gcd.CurrDrawing.arrEntities[e].fParam[1] Or angle <= gcd.CurrDrawing.arrEntities[e].fParam[2] Then Break
    '   End If
    'Break
    x = major * Cos(angle) * Cos(angle2) - minor * Sin(angle) * Sin(angle2)
    y = major * Cos(angle) * Sin(angle2) + minor * Sin(angle) * Cos(angle2)

    ' veo si en esa posicion esta cerca de la elipse
    If Abs(puntos.distancia(xr, yr, E.P[0], E.P[1]) - Sqr(x * x + y * y)) < tolerance Then
        ' tengo que ver si esa en la porcion
        angle = Deg(Angle)
        a1 = E.fParam[1]
        a2 = E.fParam[2]
        If a1 < 0 Then a1 += 360
        If a2 < 0 Then a2 += 360
        If angle < 0 Then angle += 360
        If a1 <= a2 Then
            If angle >= a1 And angle <= a2 Then Return True
        Else
            If angle >= a1 Or angle <= a2 Then Return True
        End If

    End If

    ' ademas verifico si esta sobre el centro

    If puntos.Around(xr, yr, E.P[0], E.P[1], tolerance) Then Return True

    Return False

End
