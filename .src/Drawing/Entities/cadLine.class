' Gambas class file

' GambasCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
Create Static
'Create Private
'Fast Unsafe
Inherits EntityBase

Public Const Gender As String = "LINE"
Public Const DrawingOrder As Integer = 1        ' 1 = draws first
Public Const CmdLineHelper As String = ("a line")
Public Const ParamType As String = "PP"                             ' that is Point, Point; could be Color Text, etc
Public Const ParamHelper As String = "Start point;End point"
Public Const TotalPoints As Integer = 2

' The entity handler receives a user action, and returns the number of expected parameter
' If definitive = true, means the parameter is set
Public Function NewParameter(eBuild As Entity, vParam As Variant[], Optional Definitive As Boolean = False) As Boolean

    ' la linea solo recibe puntos

    If vParam[0] <> "point" Then Return False

    If gcd.StepsDone = 0 Then
        Try eBuild.P[0] = vParam[1]
        Try eBuild.P[1] = vParam[2]
        eBuild.P[2] = eBuild.P[0]
        eBuild.P[3] = eBuild.P[1]
        If definitive Then Return True
    Else If gcd.StepsDone = 1 Then

        Try eBuild.P[2] = vParam[1]
        Try eBuild.P[3] = vParam[2]
        If definitive Then Return True

    Endif

End

Public Sub Draw(oE As Entity)

    Dim fDashes As Float[]

    fDashes = puntos.DashedLineStrip(oe.p, oE.LineType.TrameLength, 1)

    glx.DrawLines(oe.p, gcd.GetGBColor(oE.Colour, oe.pLayer), gcd.GetLineWt(oE.LineWIdth, oe.pLayer), oE.LineType.TrameLength)

End

'' Hides the entity
Public Sub DrawShadow(e As Entity)

    glx.DrawLines(e.p, Config.ModelBackgroundColor)

End

'' A fat version of the line
Public Sub DrawSelected(oE As Entity)

    glx.DrawLines(oE.p, Color.Gradient(gcd.GetGBColor(oE.Colour, oe.pLayer), Config.ModelBackgroundColor), gcd.GetLineWt(oE.LineWIdth, oe.pLayer), oE.LineType.TrameLength)

End
'' A fat version of the line

Public Sub DrawRemark(oE As Entity)

    If Not oE.Visible Then Return

    'glx.DrawLines(oE.P, gcd.GetGBColor(oE.Colour, oe.pLayer), gcd.GetLineWt(oE.LineWIdth, oe.pLayer) + 1, oe.LineType.TrameLength)
    glx.DrawLines(oE.P, Color.Gradient(gcd.GetGBColor(oE.Colour, oe.pLayer), Config.WhiteAndBlack), gcd.GetLineWt(oE.LineWIdth, oe.pLayer) + 1, oe.LineType.TrameLength)

End

'' The paint version of the entity
Public Function Draw2(oE As Entity)

    paintPlus.Lines(oE.p)

End

' '' Creo los puntos de interes
' '' Build point of interest
'
' Public Function BuildPOI(oE As Entity) As Integer
'
'     ' si este valor no es provisto , estos POI son de la ultima entidad
'
'     oe.PoiPoints.Clear
'     oe.PoiType.Clear
'
'     ' points: end-mid-end
'     oe.poiPoints.insert([oE.p[0], oE.p[1]])
'     oe.poiType.Add(gcd.poiEndPoint)
'
'     oe.poiPoints.insert([(oE.P[0] + oE.P[2]) / 2, (oE.P[1] + oE.P[3]) / 2])   ' mid
'     oe.poiType.Add(gcd.poiMidPoint)
'     'gcd.CurrDrawing.poiEntities.Add(arrIndex)
'
'     oe.poiPoints.insert([oE.p[2], oE.p[3]])
'     oe.poiType.Add(gcd.poiEndPoint)
'     'gcd.CurrDrawing.poiEntities.Add(arrIndex)
'
'     ' line
'     ' gcd.CurrDrawing.poiLines.insert([oE.p[0], oE.p[1], oE.p[2], oE.p[3]])
'     ' gcd.CurrDrawing.poiLinesEntities.Add(arrIndex)
'     'gcd.CurrDrawing.poiLinesRelPoint.Insert([0, 1])
'
' End

Public Sub ExportDXFCol(e As Entity, ByRef stxExport As String[]) As Boolean

    ' stxExport.insert(["LINE", dxf.codEntity])
    ' Los datos comunes a todas las entidades son guardados por la rutina que llama a esta
    stxExport.insert(["AcDbLine", "100"])
    stxExport.insert([CStr(e.p[0]), dxf.codX0])
    stxExport.insert([CStr(e.p[1]), dxf.codY0])
    stxExport.insert([CStr(e.p[2]), DXF.codX1])
    stxExport.insert([CStr(e.p[3]), dxf.codY1])

End

Public Function ImportDXF(e As Entity, sClaves As String[], sValues As String[]) As Boolean

    Dim i As Integer

    e.P.Clear
    For i = 0 To sClaves.Max

        If sClaves[i] = "10" Then e.P.Add(CFloat(sValues[i]))
        If sClaves[i] = "20" Then e.P.Add(CFloat(sValues[i]))
        If sClaves[i] = "11" Then e.P.Add(CFloat(sValues[i]))
        If sClaves[i] = "21" Then e.P.Add(CFloat(sValues[i]))

    Next
    Return True

    ' catch

    Return False

End

'' Return if that position is over the entity within the tolerance

Public Function OverMe(e As Entity, Xr As Float, Yr As Float, tolerance As Float) As Boolean

    'If Abs(puntos.PointToLineDistance([xr, yr], e.p)) <= tolerance Then Return True Else Return False
    If puntos.PointOverLine([xr, yr], e.p, tolerance) Then Return True Else Return False

End
