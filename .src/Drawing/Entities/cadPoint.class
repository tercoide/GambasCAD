' Gambas class file

' GambasCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
Create Static
'Fast
Inherits EntityBase
Public Const Gender As String = "POINT"
Public Const CmdLineHelper As String = ("a point")
Public Const ParamType As String = "P"                             ' that is Point, Point; could be Color Text, etc
Public Const ParamHelper As String = "Point"
Public Const TotalParams As Integer = 1

' The entity handler receives a user action, and returns the number of expected parameter
' If definitive = true, means the parameter is set
Public Function NewParameter(eBuild As Entity, vParam As Variant[], Optional Definitive As Boolean = False) As Boolean

    If gcd.StepsDone = 0 Then

        Try eBuild.P[0] = vParam[1]
        Try eBuild.P[1] = vParam[2]

        If definitive Then Return True

    Endif

End

Public Sub Draw(oE As Entity)

    If Not oE.Visible Then Return

    gl.PointSize(gcd.GetLineWt(oE.LineWIdth, oe.pLayer))
    glx.glColorRGB(gcd.GetGBColor(oE.Colour, oe.pLayer))
    gl.Begin(gl.POINTS)
    gl.Vertex2f(oe.P[0], oe.P[1])
    gl.End

End

Public Sub DrawSelected(oE As Entity)

    If Not oE.Visible Then Return

    glx.glColorRGB(Color.Gradient(gcd.GetGBColor(oE.Colour, oe.pLayer), Config.ModelBackgroundColor))
    gl.PointSize(oe.LineWIdth)
    gl.Begin(gl.POINTS)
    gl.Vertex2f(oe.P[0], oe.P[1])
    gl.End

End

'' The paint version of the entity
Public Function Draw2(oE As Entity)

    If gcd.PrintingScale = 0 Then gcd.PrintingScale = 1

    Paint.ARC(oE.p[0], oE.p[1], 0.1 / gcd.PrintingScale)
    paint.Stroke

End

' '' Creo los puntos de interes
' '' Build point of interest
'
' Public Function BuildPOI(oE As Entity) As Integer
'
'     ' si este valor no es provisto , estos POI son de la ultima entidad
'
'     oe.PoiPoints.Clear
'     oe.PoiType.Clear
'
'     ' points: end-mid-end
'     oe.poiPoints.insert([oE.p[0], oE.p[1]])
'     oe.poiType.Add(gcd.poiEndPoint)
'
' End

Public Sub ExportDXFCol(e As Entity, ByRef stxExport As String[]) As Boolean

    ' stxExport.insert(["POINT", dxf.codEntity])
    ' Los datos comunes a todas las entidades son guardados por la rutina que llama a esta
    stxExport.insert(["AcDbPoint", "100"])
    stxExport.insert([CStr(e.p[0]), dxf.codX0])
    stxExport.insert([CStr(e.p[1]), dxf.codY0])
    stxExport.insert(["0", DXF.codZ0])
    stxExport.insert([CStr(e.fParam[0]), "39"])

End

Public Function ImportDXF(e As Entity, sClaves As String[], sValues As String[]) As Boolean

    Dim i As Integer

    e.P.Clear
    For i = 0 To sClaves.Max

        If sClaves[i] = "10" Then e.P.Add(CFloat(sValues[i]))
        If sClaves[i] = "20" Then e.P.Add(CFloat(sValues[i]))
        'If sClaves[i] = "30" Then e.P.Add(CFloat(sValues[i]))
        If sClaves[i] = "39" Then e.fParam.Add(CFloat(sValues[i]))

    Next

    If e.fParam.Count = 0 Then e.fParam.Add(1)
    Return True

    ' catch

    Return False

End

'' Return if that position is over the entity within the tolerance
Public Function OverMe(e As Entity, Xr As Float, Yr As Float, tolerance As Float) As Boolean

    If puntos.Around(xr, yr, E.P[0], E.P[1], tolerance) Then Return True

    Return False

End
