' Gambas class file

' GambasCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
Create Static
Inherits EntityBase
Public Const Gender As String = "ARC"
Public Const PointsToDraw As Integer = 2             ' minimal point requered for drawing something usefull
Public Const CmdLineHelper As String = ("Draws an arc")
Public Const ParamType As String = "PLAA"                             ' that is Point, Point, Float; could be Color Text, etc
Public Const ParamHelper As String = "Center;Radious;Start;End"      ' a little text that is shown at the prompt waiting for user input during build
Public Const ParamDefault As String = "0,0;1;0;90"
' Public start As Float
' Public recorrido As Float
' Public anticlockwise As Boolean = True
Public Const TotalParams As Integer = 3
Public Const iTotalParams As Integer = 1
Public Const iiiAnticlockwise As Integer = 0

' The entity handler receives a user action, and returns the number of expected parameter
' If definitive = true, means the parameter is set
Public Function NewParameter(eBuild As Entity, vParam As Variant[], Optional Definitive As Boolean = False) As Boolean

    If gcd.StepsDone = 0 Then

        If vParam[0] <> "point" Then Return False

        Try eBuild.P[0] = vParam[1]
        Try eBuild.P[1] = vParam[2]

        If definitive Then
            eBuild.fParam.Add(0)
            Return True
        End If
    Else If gcd.StepsDone = 1 Then   ' radio

        If vParam[0] <> "float" Then Return False

        eBuild.fParam[0] = vParam[1]
        eBuild.fParam[1] = 0
        eBuild.fParam[2] = 360

        If definitive Then Return True

    Else If gcd.StepsDone = 2 Then ' recibimos el angulo inicial

        If vParam[0] <> "float" Then Return False

        eBuild.fParam[1] = vParam[1]

        If definitive Then Return True

    Else If gcd.StepsDone = 3 Then   ' angulo final

        If vParam[0] <> "float" Then Return False

        eBuild.fParam[2] = vParam[1]

        If definitive Then Return True

    Else
        Return False
    End If

End

Public Sub Stretch(e As Entity, dX As Float, dY As Float)

End

Public Sub Rotate(e As Entity, radians As Float)

    puntos.Rotate(e.p, radians)

    ' el parametro lo tengo que pasar a grados porque la rutina que dibuja el texto usa eso
    E.fParam[1] += Deg(radians)
    E.fParam[2] += Deg(radians)

    ' If E.fParam[1] < 0 Then E.fParam[1] = 360 + E.fParam[1]
    ' If E.fParam[2] < 0 Then E.fParam[2] = 360 + E.fParam[2]              ' grados

End

Public Sub Scale(e As Entity, sX As Float, sY As Float)

    Dim i As Integer

    'If sx < 0 Then Stop

    E.fParam[0] *= Abs(sX)

    For i = 0 To e.p.max Step 2

        e.P[i] = e.P[i] * sX

        e.P[i + 1] = e.P[i + 1] * sY

    Next

    ' start/end
    If sx < 0 Then
        E.fParam[1] = 180 - E.fParam[1]
        E.fParam[2] = 180 - E.fParam[2]

        Swap E.fParam[1], E.fParam[2]

    Endif

    If sy < 0 Then
        E.fParam[1] = 360 - E.fParam[1]
        E.fParam[2] = 360 - E.fParam[2]

        Swap E.fParam[1], E.fParam[2]

    Endif

    'If e.fParam[1] > e.fParam[2] Then Swap e.fParam[1], e.fParam[2]

End

Public Sub makepolyline(oe As Entity)

    Dim x, y, theta, fRadio, fStart, fEnd, angle_increment As Float
    Dim iSentIdo, iTramos As Integer
    Dim i As Integer

    Dim major, minor, angle, la As Float

    Dim LargoPixels, LargoReal, EscalaTramos As Float

    fRadio = oE.fParam[0]
    fStart = Rad(oE.fParam[1])
    fEnd = Rad(oe.fParam[2])

    If fStart < 0 Then fStart += 2 * Pi
    If fend < 0 Then fEnd += 2 * Pi

    If fStart = fEnd Then Return
    If fRadio = 0 Then Return

    If fEnd < fStart Then fEnd += 2 * Pi

    ' veo el cuantos pixels tendria cada tramo
    LargoReal = fRadio * Abs(fEnd - fStart)
    LargoPixels = gcd.Pixels(LargoReal) ' > 0

    ' si quiero tramos de 10 pixels como maximo...
    iTramos = fRadio * Abs(fEnd - fStart) / gcd.metros(Config.ArcDensity)

    If iTramos < 6 Then iTramos = 6
    If iTramos > 360 Then iTramos = 360
    angle_increment = (fEnd - fStart) / iTramos
    'If angle_increment < Pi / 36 Then angle_increment = Pi / 36

    oE.polyline.Clear
    If oe.iParam[0] = 0 Then
        For theta = fStart To fEnd Step angle_increment
            ' el punto considerando 0,0 al centro
            x = oE.p[0] + fRadio * Cos(theta)
            y = oE.p[1] + fRadio * Sin(theta)
            oE.polyline.Add(x)
            oE.polyline.Add(y)

        Next

        x = oE.p[0] + fRadio * Cos(fEnd)
        y = oE.p[1] + fRadio * Sin(fEnd)
    Else

        For theta = fStart To fEnd Step angle_increment
            ' el punto considerando 0,0 al centro
            x = oE.p[0] + fRadio * Cos(theta)
            y = oE.p[1] - fRadio * Sin(theta)
            oE.polyline.Add(x)
            oE.polyline.Add(y)

        Next

        x = oE.p[0] + fRadio * Cos(fEnd)
        y = oE.p[1] - fRadio * Sin(fEnd)

    End If
    oE.polyline.Add(x)
    oE.polyline.Add(y)

End

Public Sub Draw(oE As Entity)

    Dim x, y, theta, angle_increment As Float
    Dim i As Integer

    Dim major, minor, angle, la As Float

    Dim LargoPixels, LargoReal, EscalaTramos As Float

    If Not oE.Visible Then Return

    If oE.fParam[2] = oE.fParam[1] Then Return

    If gcd.StepsDone = 2 Then

        glx.DrawLines([oE.p[0], oE.p[1], oE.p[0] + oE.fParam[0] * Cos(oE.fParam[1] / 180 * Pi), oE.p[1] + oE.fParam[0] * Sin(oE.fParam[1] / 180 * Pi)], gcd.GetGBColor(oE.Colour, oe.pLayer))
        DrawingAIds.Helper.texto = Format$(oE.fParam[1], "0.0 deg")
        Me.makepolyline(oe)
    Else If gcd.StepsDone = 3 Then

        DrawingAIds.Helper.texto = Format$(oE.fParam[1], "0.0 deg") & (" to ") & Format$(oE.fParam[2], "0.0 deg")
        Me.makepolyline(oe)
    End If

    glx.PolyLines(oe.PolyLine, gcd.GetGBColor(oE.Colour, oe.pLayer), gcd.GetLineWt(oE.LineWIdth, oe.pLayer), oE.LineType.TrameLength)

End

Public Sub DrawSelected(oE As Entity)

    glx.PolyLines(oE.PolyLine, Color.Darker(gcd.GetGBColor(oE.Colour, oe.pLayer)), gcd.GetLineWt(oE.LineWIdth, oe.pLayer), oE.LineType.TrameLength)

End

'' A fat version of the entity
Public Sub DrawRemark(oE As Entity)

    'glx.PolyLines(oE.PolyLine, Config.ColorForRemark, gcd.GetLineWt(oE.LineWIdth, oe.pLayer) + 1, oE.LineType.TrameLength)
    glx.PolyLines(oE.PolyLine, Color.Gradient(gcd.GetGBColor(oE.Colour, oe.pLayer), Config.WhiteAndBlack), gcd.GetLineWt(oE.LineWIdth, oe.pLayer) + 1, oE.LineType.TrameLength)

End

Public Function Draw2(oE As Entity)

    Dim fStart, fEnd As Float

    fStart = Rad(oE.fParam[1])
    fEnd = Rad(oe.fParam[2])
    If fEnd < fStart Then fEnd += 2 * Pi

    paint.ARC(oE.p[0], oE.p[1], oE.fParam[0], fStart, (fEnd - fStart))

    paint.Stroke

End

' Public Function BuildPOI(oE As Entity) As Integer
'
'     oe.PoiPoints.Clear
'     oe.PoiType.Clear
'
'     ' CENTER
'     oe.poiPoints.insert([oE.p[0], oE.p[1]])
'     oe.poiType.Add(gcd.poiCenter)
'
'     ' ' quadrant
'     ' oe.poiPoints.insert([oE.p[0] + oe.fParam[0], oE.p[1]])
'     ' oe.poiType.Add(gcd.poiQuadrant)
'     '
'     ' ' quadrant
'     ' oe.poiPoints.insert([oE.p[0] - oe.fParam[0], oE.p[1]])
'     ' oe.poiType.Add(gcd.poiQuadrant)
'     '
'     ' ' quadrant
'     ' oe.poiPoints.insert([oE.p[0], oE.p[1] + oe.fParam[0]])
'     ' oe.poiType.Add(gcd.poiQuadrant)
'     '
'     ' ' quadrant
'     ' oe.poiPoints.insert([oE.p[0], oE.p[1] - oe.fParam[0]])
'     ' oe.poiType.Add(gcd.poiQuadrant)
'
' End

Public Sub ExportDXFCol(e As Entity, ByRef stxExport As String[]) As Boolean

    ' stxExport.insert(["ARC", dxf.codEntity])
    ' Los datos comunes a todas las entidades son guardados por la rutina que llama a esta
    stxExport.insert(["AcDbCircle", "100"])
    stxExport.insert([CStr(e.p[0]), dxf.codCenterX])
    stxExport.insert([CStr(e.p[1]), dxf.codCenterY])
    stxExport.insert([CStr(e.fParam[0]), dxf.codRadius])
    stxExport.insert(["AcDbArc", "100"])
    stxExport.insert([CStr(e.fParam[1]), dxf.codAngleStart])
    stxExport.insert([CStr(e.fParam[2]), dxf.codAngleEnd])

End

Public Function ImportDXF(e As Entity, sClaves As String[], sValues As String[]) As Boolean

    Dim i As Integer

    'If e.id = "17047" Then Stop
    e.P.Clear

    For i = 0 To sClaves.Max
        If sClaves[i] = "10" Then e.P.Add(CFloat(sValues[i]))
        If sClaves[i] = "20" Then e.P.Add(CFloat(sValues[i]))
        If sClaves[i] = "40" Then e.fParam[0] = (CFloat(sValues[i]))
        If sClaves[i] = "50" Then e.fParam[1] = (CFloat(sValues[i]))
        If sClaves[i] = "51" Then e.fParam[2] = (CFloat(sValues[i]))

    Next

    If e.fParam.Count = 0 Then Stop ' e.fParam.Add(0)  ' TODO: averiguar q pasa aca q algunas entidades CIRCLE
    ' vienen sin el radio

    Return True

    ' catch

    Return False

End

'' Return if that position is over the entity within the tolerance
Public Function OverMe(E As Entity, Xr As Float, Yr As Float, tolerance As Float) As Boolean

    Dim angle, a1, a2 As Float

    If puntos.Around(xr, yr, E.P[0], E.P[1], tolerance) Then Return True
    a1 = E.fParam[1]
    a2 = E.fParam[2]
    If a1 < 0 Then a1 += 360
    If a2 < 0 Then a2 += 360

    If Abs(puntos.distancia(xr, yr, E.P[0], E.P[1]) - E.fParam[0]) < tolerance Then

        ' tengo que ver si esa en la porcion
        angle = Deg(Ang(xr - E.P[0], yr - E.P[1]))
        If angle < 0 Then angle += 360

        If a1 <= a2 Then
            If angle >= a1 And angle <= a2 Then Return True
        Else
            If angle >= a1 Or angle <= a2 Then Return True
        End If

    End If

    Return False

End
