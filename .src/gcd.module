' Gambas module file

' GambasCAD
' Software para diseño CAD
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 2 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
' Gambas class file

Public debugTime As Boolean = True

Private LastTimer As Date

Public PrintingScale As Float = 1 '' This is needed by some clases, like Text and MText.
Public ScreenDensity As Float = 1080 / 29.5  '' pixele by cm wich gives a 1:100 scale in my monitor

' Filtros del dibujo
Public DrawOriginals As Boolean = False
Public DrawMarcados As Boolean = True
Public DrawSoloColumnas As Boolean = False
Public DrawBounds As Boolean = False '' ¿Para que sirve esta variable?: es para dibujar un contorno d las entidades como Text para debugging unicamente
Public DrawHatch As Boolean = True  ' Debugging si dibuja los hatch o no

Public ScaleLines As Float = 1              '' la uso en Inserts para evitar lineas gordas
Public FormatoCotas As String = "0.00"

Public ToolActive As Boolean

Public HookSize As Integer = 16                       '' for use with poi
Public Orthogonal As Boolean = False              '' idem Ortho F8 del CAD
Public SnapMode As Integer
Public GrIdMode As Integer
Public GrIdModePrev As Integer
Public MultiDraw As Boolean                     '' dibuja repetidamente la misma entidad

Public CCC As New Collection                            '' CAD Classes Collection
Public clsJob As Object                             '' what I am doing now, thats either selecting or something else
Public clsJobPrevious As Object                     '' what was doing before
Public clsJobPreZoom As Object                      '' what was doing before Zooming or Panning
Public clsJobPreviousParam As Integer               '' a param to pass to clsJob.Start( param )
Public clsJobCallBack As Object                     '' An object to call back after finishing something (like selecting). Must have .Run() sub
Public StepsDone As Integer '' una variable de entorno util
'Public gColor As New Integer[]

Public drwDrawingClass As Integer = 0 '' 0 = Paint, 1 = OpenGL
Public Const drwPaintClass As Integer = 2
Public Const drwOpenGLClass As Integer = 4

Public LoadingFinished As Boolean = False
Public FontList As New String[]                     '' esto deberia estar en otro lado
Public TextureList As New String[]                     '' esto deberia estar en otro lado
Public FileName As String                           '' current work filename

' dibujos
Public picVisibleOn As New Picture
Public picVisibleOff As New Picture
Public picFrozenOn As New Picture
Public picFrozenOff As New Picture
Public picLockedOn As New Picture
Public picLockedOff As New Picture
Public picPrintOn As New Picture
Public picPrintOff As New Picture

'---------------------------------------------------------------
' Point of Interest
Public Const poiEndPoint As Integer = 1
Public Const poiMIdPoint As Integer = 2
Public Const poiQuadrant As Integer = 4
Public Const poiTangent As Integer = 8
Public Const poiCenter As Integer = 16
Public Const poiIntersection As Integer = 32
Public Const poiPerpendicular As Integer = 64
Public Const poiNearest As Integer = 128
Public Const poiBasePoint As Integer = 256
Public Const poiAparentCenter As Integer = 512

' CAD colors
Public Const ColorBlack As Integer = 0
Public Const ColorRed As Integer = 1
Public Const ColorBlue As Integer = 2
Public Const ColorGreen As Integer = 3
Public Const ColorYellow As Integer = 4
Public Const ColorGray As Integer = 5
Public Const ColorLightGray As Integer = 6
Public Const ColorLightBlue As Integer = 7
Public Const ColorWhite As Integer = 8
Public Const ColorByBlock As Integer = 256
Public Const ColorByLayer As Integer = 257

' Stipple lines
Public stiDashed As New Float[]
Public stiDashedSmall As New Float[]
Public stiAxis As New Float[]

' Intercambio de datos entre clases y modulos
Public cATTDEF As New Collection

' dim types
Public Const dimRotated As Integer = 0
Public Const dimAligned As Integer = 1
Public Const dimAngular As Integer = 2
Public Const dimDiameter As Integer = 3
Public Const dimRadius As Integer = 4
Public Const dimAngular3point As Integer = 5
Public Const dimOrdinate As Integer = 6
Public Const dimHorizontal As Integer = 7
Public Const dimVertical As Integer = 8

' PrintStyles
Public PrintStyles As New Collection

' patterns
Public HatchPatterns As New Collection

' fonts replacements

Public FontReplacements As New Collection

' Entity Flags
Public Const flgDWG_Changed As Integer = 1
Public Const flgDWG_UnChanged As Integer = 2
Public Const flgDWG_Deleted As Integer = 4
Public Const flgGCD_New As Integer = 8
'Public Const flg5 As Integer = 16
'Public Const flg6 As Integer = 32
'Public Const flg7 As Integer = 64
'Public Const flg8 As Integer = 128
'Public Const flg9 As Integer = 256

'variables de ambiente

Public flgSearchingAllowed As Boolean = False  ' impide cuellos de botellla
Public flgSearchingPOI As Boolean
Public flgShowingLayers As Boolean
Public flgNewPosition As Boolean        ' seteada cuando hay un cambio en pan o zoom
Public flgQuitSearch As Boolean

Public DrawHoveredEntity As Boolean = False

Public dirResources As String   '' para compatibilidad con GambasCAD

Public DrawingReady As Boolean = False
Public currenyEntity As Entity
Public Design As New Design
Public Drawing As New Drawing
Public Drawings As New Collection

Public EntitiesSelected As New Collection
Public gColor As New Integer[]      '' Colors list

Public CursorCross As Cursor
Public CursorSelect As Cursor
Public CursorSelectAdd As Cursor
Public CursorSelectRem As Cursor
Public CursorSelectXchange As Cursor

Public Sub SetDashes()

    Dim i As Integer

    stiDashed.Clear
    stiDashedSmall.Clear
    stiAxis.Clear
    stiDashed.Insert([10, -10])
    stiDashedSmall.Insert([2.5, -2.5])
    stiAxis.Insert([10, -2.5, 2.5, -2.5])

    For i = 0 To stiDashed.Max
        stiDashed[i] *= Metros(1)
    Next

    For i = 0 To stiDashedSmall.Max
        stiDashedSmall[i] *= Metros(1)
    Next

    For i = 0 To stiAxis.Max
        stiAxis[i] *= Metros(1)
    Next

End

Public Function FindStyle(sName As String) As TextStyle

    Dim st As TextStyle

    For Each st In gcd.Drawing.oStyles

        If st.Name = sname Then Return st

    Next

    Return Null

End

Public Function FindStyleById(sId As String) As TextStyle

    Dim st As TextStyle

    For Each st In gcd.Drawing.TextStyles

        If st.Id = sId Then Return st

    Next

    Return Null 'gcd.Drawing.arrStyles.First

End

Public Function FindEntity(sId As String, Optional SearchInBlocks As Boolean = False) As Entity

    Dim oBlock As Block

    If gcd.Drawing.Sheet.Entities.Exist(sId) Then Return gcd.Drawing.Sheet.Entities[sId]

    If SearchInBlocks Then
        For Each oBlock In gcd.Drawing.Blocks
            If oBlock.entities.Exist(sId) Then Return gcd.Drawing.Sheet.Entities[sId]

        Next
    Endif

    Return Null

End

Public Function FindLType(sName As String) As LineType

    Dim LT As LineType

    For Each LT In gcd.Drawing.LineTypes

        If LCase(LT.Name) = LCase(sname) Then Return LT

    Next

    Return Null

End

Public Function FindLtIndex(sName As String) As Integer

    Dim i As Integer

    For i = 0 To gcd.Drawing.arrLTYpes.Max

        If LCase(gcd.Drawing.arrLTYpes[i].Name) = LCase(sname) Then Return i

    Next

    Return -1

End

Public Function GetLayerById(Id As String) As Layer

    Dim l As Layer

    For Each l In drawing.Layers

        If l.Id = Id Then Return l

    Next

    Return Null

End

Public Function iCadColor(sColor As String) As Integer

    sColor = LCase(sColor)
    If sColor = "bylayer" Then Return 256
    If sColor = "byblock" Then Return 257
    If sColor = "byobject" Then Return 258
    Try Return CInt(sColor)
    Return 0

End

Fast Unsafe Public Function Metros(pixeles As Integer) As Float  ' converts pixels to meters

    Return pixeles / gcd.Drawing.Sheet.ScaleZoom

End

Fast Unsafe Public Function Pixels(distancia As Float) As Float  ' converts meters to pixels
    ' transforma Metros en Pixeles sin tener en cuenta el Pan

    Return distancia * gcd.Drawing.Sheet.ScaleZoom

End

Public Sub Main()

    Select Config.WindowBackColor
        Case Color.Black
            'Case &1B2224
            Config.WhiteAndBlack = Color.White

        Case Else
            Config.WhiteAndBlack = Color.Black

    End Select

    'If WindowBackColor = 0 Then WhiteAndBlack = Color.White Else WhiteAndBlack = Color.Black
    ' ' armo el array de colores
    ' gcolor = DecodeColor()
    '

    'FileName = User.Home &/ "autosaveV5.xml"

    debuginfo("Reading fonts from " & gcd.dirResources &/ "fonts/lff",,, True)
    FontList = glx.LoadFonts(gcd.dirResources &/ "fonts/lff")
    'FontList = glx.LoadFonts(gcd.sFonts)
    glx.SelectFont("romans")

    ' agrego la lista a los reemplazos
    For Each s As String In FontList
        FontReplacements.Add(Lower(s), Lower(s))
    Next

    FontReplacements.Add("kochigothic", "arial")

    texturelist = glx.LoadTextures(gcd.dirResources &/ "textures")
    'texturelist = glx.LoadTextures(gcd.sTextures)

    ' otros recursos
    picVisibleOn = Picture.Load(gcd.dirResources &/ "png" &/ "visible_on.png")
    picVisibleOff = Picture.Load(gcd.dirResources &/ "png" &/ "visible_off.png")
    picFrozenOn = Picture.Load(gcd.dirResources &/ "png" &/ "frozen_on.png")
    picFrozenOff = Picture.Load(gcd.dirResources &/ "png" &/ "frozen_off.png")
    picLockedOn = Picture.Load(gcd.dirResources &/ "png" &/ "locked_on.png")
    picLockedOff = Picture.Load(gcd.dirResources &/ "png" &/ "locked_off.png")
    picPrintOn = Picture.Load(gcd.dirResources &/ "png" &/ "printOn.png")
    picPrintOff = Picture.Load(gcd.dirResources &/ "png" &/ "printOff.png")

    ' this is what we are doing now
    gcd.clsJob = cadSelection
    gcd.clsJobPrevious = cadSelection
    gcd.clsJobPreZoom = cadSelection
    gcd.clsJobPreviousParam = 0

    debuginfo("GCD initialized OK",,, True)

    ' test
    ' Dim flxTest As New Float[]
    ' flxTest = puntos.DashedLineStrip(0.5, 0, [0, 0, 10, 0, 10, 10], [2, -1], 1, True)
    ' Stop
    ' Dim p0, p1, p As New Punto2d
    ' p1.x = 0
    ' p1.y = 0
    '
    ' p0.x = 10
    ' p0.y = 10
    '
    ' p = puntos.ExtendLine2D(p0, p1, 1)
    '
    ' Stop

End

Public Sub LoadCommon()

    Dim sFiles As String[]
    Dim sBlocksFiles As String

    sFiles = Dir(gcd.dirResources &/ "common", "*.dxf")
    If IsNull(sFiles) Then Return
    For Each sBlocksFiles In sFiles
        FBlocks.AddBlock(gcd.dirResources &/ "common" &/ sBlocksFiles, Utils.FileWithoutExtension(sBlocksFiles), gcd.Drawing.Blocks)

    Next

End

Public Function GetLayer(LayerName As String) As Layer

    Dim Lay As Layer

    For Each Lay In gcd.Drawing.Layers

        If Lay.Name = LayerName Then Return Lay
    Next
    Return Null

End

'' Reads entities and fill arrLayers
' Public Sub FillLayers(drw As Drawing)
'
'     Dim hLay As Layer
'     Dim e As Entity
'
'     gcd.debugInfo("Filling layers",,, True)
'
'     ' primero eliminamos lo q haya
'     For Each hLay In drw.Layers
'         hLay.Entities.Clear
'     Next
'     If drw.Entities Then
'         For Each e In drw.Entities
'             If e.pLayer Then e.pLayer.Entities.Add(e)
'         Next
'     End If
'     gcd.debugInfo("Llenados los Layers",,, True)
'
' End

' '' Reads entities and fill arrLayers
' Public Sub FillSheets(drw As Drawing)
'
'     Dim e As Entity
'     Dim s As Sheet
'
'     gcd.debugInfo("Filling Sheets",,, True)
'
'     If drw.Entities Then
'         For Each e In drw.Entities
'             If drw.Sheets.Exist(e.HandleOwner) Then
'                 drw.Sheets[e.HandleOwner].entities.Add(e, e.Handle)
'             Else ' las coloco en Model
'                 e.HandleOwner = drw.Model.Handle
'                 drw.Model.Entities.Add(e, e.Handle)
'             Endif
'         Next
'     End If
'     gcd.debugInfo("Llenadas las Sheets",,, True)
'
' End

' '' Reads entities and fill arrLayers
' Public Sub FillInserts(drw As Drawing)
'
'     Dim e As Entity
'
'     gcd.debugInfo("Filling Inserts",,, True)
'
'     If drw.Entities Then
'         For Each e In drw.Entities
'             If drw.Inserts.Exist(e.IdContainer) Then
'                 drw.Inserts[e.IdContainer].Entities.Add(e, e.Id)
'             Endif
'         Next
'     End If
'     gcd.debugInfo("Llenados los Inserts",,, True)
'
' End

' '' Reads LineTypes collection and puts data in arrLTypes
' Public Sub ReadLTypes()
'
'     Dim hlty As LineType
'     Dim t, i As Integer
'     Dim fTrameLength As Float
'     Dim sNextKey As String
'
'     ' primero eliminamos lo q haya
'     Drawing.oLTYpes.Clear
'     For Each c As Collection In Drawing.cLtypes
'         hlty = New LineType
'         hlty.Name = c[dxf.codName]
'         hlty.Description = c["3"]
'         hlty.handle = c[dxf.codHandle]
'         If hLty.handle = "" Then hLty.handle = gcd.NewHandle()
'         hlty.nTrames = CInt(c["73"])
'         If hlty.nTrames > 0 Then hlty.Length = c["40"]
'         i = 0
'         For t = 1 To hlty.nTrames
'             Do
'                 If t > 1 Then
'                     sNextKey = "49_" & CStr(i)
'                 Else
'                     sNextKey = "49"
'                 Endif
'                 If c.Exist(sNextKey) Then
'                     Inc i
'                     hlty.TrameLength.Add(Abs(CFloat(c[sNextKey])) * 2.5) ' TODO: verificar este valor arbitrario
'                     If hlty.TrameLength.Last = 0 Then hlty.TrameLength.Last = 1
'
'                     Break
'                 Endif
'                 Inc i
'                 If i = 1000 Then Return
'             Loop
'
'         Next
'
'         Drawing.oLTYpes.Add(hlty, hlty.handle)
'
'     Next
'
' End

' '' Reads TextStyle and DimStyles collection and puts data in arrStyles
' Public Sub ReadStyles()
'
'     Dim hlty As TextStyle
'     Dim t, i As Integer
'     Dim fTrameLength As Float
'     Dim sH2, sNextKey As String
'     Dim RefStyle As TextStyle
'
'     ' primero eliminamos lo q haya
'     Drawing.oStyles.Clear
'     ' Leo los TextStyle de texto
'     For Each c As Collection In gcd.Drawing.cModel["TABLES"]["STYLE"]
'         hlty = New TextStyle
'
'         hlty.Name = c[dxf.codName]
'         hlty.handle = c[dxf.codHandle]
'         hlty.IsDimStyle = False
'         hlty.sFont_3 = c["3"]
'
'         hlty.FixedH_40 = CFloat(c["40"])
'
'         ' Esto no puede usarse asi, LastHeightUsed_2 es solo un dato de historial
'         ' If hlty.FixedH_40 = 0 Then hlty.FixedH_40 = CFloat(c["42"])
'
'         If hlty.handle = "" Then sH2 = hlty.name Else sH2 = hlty.handle
'         Drawing.oStyles.Add(hlty, sh2)
'
'     Next
'     If Drawing.TextStyles.Count > 0 Then
'
'     Endif
'
'     ' Leo lo TextStyle de dimensiones
'     For Each c As Collection In gcd.Drawing.cModel["TABLES"]["DIMSTYLE"]
'         hlty = New TextStyle
'
'         hlty.Name = c[dxf.codName]
'         If IsNull(c[dxf.codHandle]) Then
'             hlty.handle = c["105"]
'         Else
'             hlty.handle = c[dxf.codHandle]
'         Endif
'
'         hlty.IsDimStyle = True
'
'         Try hlty.fArrowSize_41 = CFloat(c["41"])
'         If hlty.fArrowSize_41 = 0 Then hlty.fArrowSize_41 = 1
'
'         Try hlty.fTxtHeight_140 = CFloat(c["140"])
'         If hlty.fTxtHeight_140 = 0 Then hlty.fTxtHeight_140 = 1
'
'         Try hlty.iRefStyleHandle_340 = c["340"]
'
'         If hlty.iRefStyleHandle_340 <> "" Then
'             RefStyle = FindStyleByHandle(hlty.iRefStyleHandle_340)
'             If Not IsNull(RefStyle) Then
'                 If RefStyle.FixedH_40 > 0 Then hlty.fTxtHeight_140 = RefStyle.FixedH_40
'                 hlty.sFont_3 = RefStyle.sFont_3
'             Endif
'         Endif
'
'         Drawing.oStyles.Add(hlty, hlty.handle)
'
'     Next
'
' End
Public Function GetLineWt(iValue As Integer, Optional l As Layer) As Float
    ' https://ezdxf.readthedocs.io/en/stable/concepts/lineweights.html
    ' -1    LINEWEIGHT_BYLAYER
    ' -2    LINEWEIGHT_BYBLOCK
    ' -3    LINEWEIGHT_DEFAULT

    If ivalue > 1 Then Return iValue / 100
    If Not l Then l = gcd.Drawing.CurrLayer
    If ivalue = -1 Then
        If l.LineWt < 0 Then Return Config.DefLineWt
        Return l.LineWt / 100
    Else If ivalue = -3 Then
        Return Config.DefLineWt
    Else If ivalue = -2 Then
        If gcd.Drawing.CurrBlockLineWt < 0 Then Return Config.DefLineWt
        Return gcd.Drawing.CurrBlockLineWt / 100
    End If

    Return Config.DefLineWt

End

Public Function GetGBColor(CADcolor As Integer, Optional pLayer As Layer) As Integer

    Dim iColor As Integer
    ' agrego la parte de PaperSpace

    If Not pLayer Then iColor = CADcolor Else iColor = player.Colour

    ' color
    If CADcolor = 256 Then          ' buscar color del layer

        iColor = gColor[iColor]

    Else If CADcolor = 257 Then     ' buscar color del objeto

        iColor = gColor[iColor]

    Else If CADcolor = 0 Then

        iColor = gColor[iColor]
    Else

        iColor = gColor[CADcolor]

    Endif

    If Drawing.Sheet.IsModel Then

        Return iColor
    Else

        If iColor = Config.WhiteAndBlack Then iColor = Color.Invert(icolor)

        If Drawing.Sheet.pPrintStyle.ColorStyle = 2 Then

            Return iColor
        Else If Drawing.Sheet.pPrintStyle.ColorStyle = 1 Then
            Return Color.Desaturate(iColor)
        Else
            Return Drawing.Sheet.WhiteAndBlack
        End If

    End If

End

'' DEvuelve una string supuestamente unica basada en Timer y Date

Public Function UniqueId() As String

    Dim s As String

    Shell "uuIdgen" To s

    If s = "" Then

    Endif

    s = "{" & Trim(s) & "}"

    Return s

End

' '' Devuelve un handle disponible unico para la coleccion de datos.
' '' Basado en la variable de ambiente para el dibujo actual
' Public Function GetNewHandle(c As Collection) As String
'
'   Dim i As Integer, s As String
'
'   i = c.Count
'   Try i = CInt(c.Last)
'   Do
'     Inc i
'     s = CStr(i) ' esto podria ser Hex
'     If Not c.Exist(s) Then
'       Return s
'     Endif
'
'   Loop
'
' End

'' Returns the next available handle
Public Function NewId(Optional d As Drawing) As String

    Dim hHex As String

    If Not d Then d = Drawing
    Inc D.HandSeed             ' esta es la ultima handle utilizada, le sumo 1
    hHex = Hex(D.HandSeed)
    d.Headers.HANDSEED = hHex

    Return hHex     ' devuelvo la Hex del numero

End

Public Function iHeader(VarName As String) As Integer

    Return Val("&H" & Drawing.cHeader[VarName][Drawing.cHeader[VarName].First])

End

Public Function GetHeaderValue(VarName As String, Optional DefValuer As Variant) As Variant

    If Drawing.cHeader.Exist(VarName) Then
        If Drawing.cHeader[VarName].count = 1 Then
            If Drawing.cHeader[VarName][Drawing.cHeader[VarName].First].key = "70" Then
                Return CInt(Drawing.cHeader[VarName][Drawing.cHeader[VarName].First])
            Else If Drawing.cHeader[VarName][Drawing.cHeader[VarName].First].key = "40" Then
                Return CFloat(Drawing.cHeader[VarName][Drawing.cHeader[VarName].First])
            Else
                Return Drawing.cHeader[VarName][Drawing.cHeader[VarName].First]
            Endif

        Else ' tiene mas de un elemento, Y LOS SUPONGO TODOS VARIANT
            Dim vRet As New Variant[]
            For Each vVar As Variant In Drawing.cHeader[VarName]
                vRet.Add(vVar)
            Next
            Return vRet

        Endif
    Endif

End

Public Function ODA_DWGtoDXF(sDwgFile As String) As String

    Dim str, filebase As String
    Dim Steps As Integer

    filebase = utils.FileFromPath(sDwgFile)

    steps = 0 ' elimino el archivo temporal que hubiese creado

    If Exist(config.dirDwgIn &/ filebase) Then Kill config.dirDwgIn &/ filebase

    Steps = 1 ' hago una copia previa a la conversion
    Copy sDwgFile To config.dirDwgIn &/ filebase

    Steps = 2 ' Calling the converter

    Shell "ODAFileConverter '" & config.dirDwgIn & "' '" & config.dirDxfIn & "' 'ACAD2018' 'DXF' 0 0" Wait To str

    steps = 3
    ' vacio el directorio de entrada
    Kill config.dirDwgIn &/ filebase

    If Exist(config.dirDxfIn &/ utils.FileWithoutExtension(filebase) & ".dxf") Then
        gcd.debuginfo("Conversion to DXF correct",, True, True)
        Return config.dirDxfIn &/ utils.FileWithoutExtension(filebase) & ".dxf"
    Else

        Return ""
    End If

Catch

    Select Case Steps
        Case 0
            ' esto puede fallar por acceso denegado
            gcd.debuginfo("Acces denied to temp file",, True, True)
            Return Null
        Case 1
            ' esto puede fallar por file corrupt
            gcd.debuginfo("File corrupt",, True, True)
            Return Null
        Case 2
            ' esto puede fallar por diversas cuestiones
            gcd.debuginfo("Conversion failed",, True, True)
            Return Null
        Case 3
            ' esto puede fallar por diversas cuestiones
            gcd.debuginfo("Could't empty temp dir",, True, True)
            Return Null

    End Select

End

Public Function ODA_DXFtoDWG(sDxfFile As String) As String

    Dim str, filebase As String
    Dim Steps As Integer

    filebase = utils.FileFromPath(sDxfFile) ' deberia estar en main.dirDxfIn

    steps = 0 ' elimino el archivo temporal que hubiese creado
    If Exist(config.dirDxfOut &/ filebase) Then Kill config.dirDxfOut &/ filebase

    Steps = 1 ' hago una copia previa a la conversion
    If sDxfFile <> (config.dirDxfOut &/ filebase) Then Copy sDxfFile To config.dirDxfOut &/ filebase

    Steps = 2 ' Calling the converter
    Shell "ODAFileConverter '" & config.dirDxfOut & "' '" & config.dirDwgOut & "' 'ACAD2010' 'DWG' 0 0" Wait To str

    gcd.debuginfo(str)

    steps = 3
    ' vacio el directorio de entrada
    'Kill main.dirDxfOut &/ filebase 'FIXME: descomentar esto despues del debug

    Return config.dirDwgOut &/ utils.FileWithoutExtension(filebase) & ".dwg"

Catch

    Select Case Steps
        Case 0
            ' esto puede fallar por acceso denegado
            gcd.debuginfo("Acces denied to temp file")
            Return Null
        Case 1
            ' esto puede fallar por file corrupt
            gcd.debuginfo("File corrupt")
            Return Null
        Case 2
            ' esto puede fallar por diversas cuestiones
            gcd.debuginfo("Conversion failed")
            Return Null
        Case 3
            ' esto puede fallar por diversas cuestiones
            gcd.debuginfo("Could't empty temp dir")
            Return Null

    End Select

End

''  Lee entidades e intenta dibujarlas centrado en el contenedor: DrawingArea, Picture, Image
''  iColor: CAD color o -1 para usar como vienen en el DXF
''  fLineWidth: -1=como vienen, 0=automatico, >0 = fijo en ese valor
Public Function FitEntitiesToImage(cEntities As Collection, imgPreview As Object, Optional iColor As Integer = 0, fLineWIdth As Float = 1, iBackGround As Integer = -1) As Boolean

    Dim scaleX, scale, scaleY As Float

    Dim entIdad As Entity

    Dim flxLimits As New Float[]

    'depre clsEntities.BuildPoi(cEntities)
    If cEntities.Count > 0 Then
        flxLimits = clsEntities.ComputeLimits(cEntities)                    ' computo el tamaño de la entidad, y luego determino la escala

        Paint.Begin(imgPreview)
        If iBackGround >= 0 Then Paint.Background = iBackGround

        Paint.Reset ' vuelvo escalas y traslados a cero
        Paint.Translate(Paint.W / 2, Paint.H / 2) ' centro el dibujo
        If (flxLimits[2] - flxLimits[0]) > 1e-10 Then scaleX = Paint.w / (flxLimits[2] - flxLimits[0]) Else scaleX = 1e10
        If (flxLimits[3] - flxLimits[1]) > 1e-10 Then scaleY = Paint.H / (flxLimits[3] - flxLimits[1]) Else scaleY = 1e10
        If scaleX < scaleY Then Scale = scaleX Else Scale = scaley
        Paint.Scale(scale * 0.85, -scale * 0.85)

        PrintingScale = scale * 0.85

        ' centro el dibujo
        Paint.Translate(-(flxLimits[2] + flxLimits[0]) / 2, -(flxLimits[3] + flxLimits[1]) / 2)

        For Each entIdad In cEntities
            If entIdad.pLayer = Null Then entIdad.pLayer = gcd.Drawing.CurrLayer
            If iColor < 0 Then
                Paint.Brush = Paint.Color(gcd.gColor[entIdad.colour])
            Else
                Paint.Brush = Paint.Color(iColor)
            Endif
            If fLineWIdth = 0 Then
                If entIdad.LineWIdth = 0 Then entIdad.LineWIdth = 1

                Paint.LineWIdth = GetLineWt(entIdad.LineWIdth) / scale
            End If

            gcd.CCC[entIdad.gender].draw2(entIdad)
        Next
        Paint.End

    End If

End

'' Carga un DXF e intenta dibujarlo centrado en el contenedor: DrawingArea, Picture, Image
'' iColor: CAD color o -1 para usar como vienen en el DXF
'' fLineWidth: -1=como vienen, 0=automatico, >0 = fijo en ese valor
Public Function FitDxfToImage(sDXFfile As String, imgPreview As Object, Optional iColor As Integer = 0, fLineWIdth As Float = 1) As Boolean

    Dim LastDrw, drwTemp As Drawing

    If Not Exist(sDxfFile) Then Return False
    LastDrw = gcd.drawing

    drwTemp = gcd.NewDrawing(sDxfFile)
    gcd.Drawing = drwTemp
    Dxf.LoadFile(sDxfFile, drwTemp)
    gcd.Drawing = LastDrw

    FitEntitiesToImage(drwTemp.Model.Entities, imgPreview, iColor, fLineWIdth)

End

Public Function IsPoint(sVal As String) As Boolean

    Dim v As Variant
    Dim slx As String[]
    Dim s As String
    Dim f As Float

    sVal = Trim(sVal)
    If Left$(sVal) = "@" Then sval = Mid(sval, 2)

    slx = Split(sval, ",")

    For Each s In slx
        f = CFloat(s)
    Next
    If slx.Count = 2 Or slx.Count = 3 Then Return True Else Return False
Catch
    Return False

End

Fast Unsafe Public Function Xreal(ScreenX As Integer) As Float

    'Return Metros((screenx - gcd.Drawing.Sheet.GlSheet.w / 2 - (gcd.Drawing.Sheet.PanX + gcd.Drawing.Sheet.PanBaseX)))
    If IsNull(gcd.Drawing.Sheet.GlSheet) Then Return 0
    Return Metros((screenx - gcd.Drawing.Sheet.GlSheet.w / 2 - (gcd.Drawing.Sheet.PanX))) + gcd.Drawing.Sheet.PanBaseRealX

End

Fast Unsafe Public Function Yreal(ScreenY As Integer) As Float

    'Return Metros((-ScreenY + gcd.Drawing.Sheet.GlSheet.h / 2 - (gcd.Drawing.Sheet.PanY + gcd.Drawing.Sheet.PanBaseY)))
    If IsNull(gcd.Drawing.Sheet.GlSheet) Then Return 0
    Return Metros((-ScreenY + gcd.Drawing.Sheet.GlSheet.h / 2 - (gcd.Drawing.Sheet.PanY))) + gcd.Drawing.Sheet.PanBaseRealY

End

Fast Unsafe Public Function XPix(X As Float) As Float

    Return Me.Pixels(X - gcd.Drawing.Sheet.PanBaseRealX) + gcd.Drawing.Sheet.GlSheet.w / 2 + gcd.Drawing.Sheet.PanX '+ gcd.Drawing.Sheet.PanBaseX

End

Fast Unsafe Public Function YPix(Y As Float) As Float

    'Return Metros((-ScreenY + glarea1.h / 2 - gcd.Drawing.PanY))
    Return -(Me.Pixels(Y - gcd.Drawing.Sheet.PanBaseRealY) - gcd.Drawing.Sheet.GlSheet.h / 2 + gcd.Drawing.Sheet.PanY)' + gcd.Drawing.Sheet.PanBaseY)

End

'' Returns the neares point to the grid, if active.
Fast Unsafe Public Function Near(xyzReal As Float) As Float
    ' return the nearest point to the grid
    ' this is a world to world points (not pixels)

    ' Example:
    ' if                    GridSpacing = 0.2
    ' we pass               xyzReal = 1.35
    ' function will give    NearReal = 1.40

    Dim n As Integer, r As Float

    If Not gcd.Drawing.GrIdActive Then Return xyzReal

    r = xyzReal / gcd.Drawing.GridCurentSpacing
    n = Int(r)
    r = r - Int(r)

    If r > 0.5 Then n += 1

    Return n * gcd.Drawing.GridCurentSpacing

End

Public Function ScreenWIdth() As Integer

    Return gcd.Drawing.Sheet.GlSheet.W

End

Public Function ScreenHeight() As Integer

    Return gcd.Drawing.Sheet.GlSheet.h

End

Public Sub redraw()

    fmain.redraw

End

Public Sub RefreshTexts()

    fmain.tmrSlash_Timer()

End

'' Regenera las listas de OpenGL
Public Sub Regen()

    ' La parte de los VBO
    gcd.debugInfo("Generating GL graphics",,, True)
    gcd.StepsDone = 0
    'ReEscalar(drawing.Sheet)
    'PanToOrigin()
    clsEntities.glGenDrawList
    clsEntities.glGenDrawListSel

    redraw

End

'' Centra el grafico en una posicion
Public Sub PanTo(Xr As Float, Yr As Float, Optional s As Sheet = drawing.Sheet)

    Dim Xcentro, Ycentro As Float

    Xcentro = Xreal(s.GlSheet.w / 2)
    Ycentro = Yreal(s.GlSheet.h / 2)

    ' drw.Model.PanBaseRealX = -Xcentro
    ' drw.Model.PanBaseRealY = -Ycentro
    '
    ' drw.Model.PanBaseX = XPix(drw.Model.PanBaseRealX)
    ' drw.Model.PanBaseY = YPix(drw.Model.PanBaseRealY)

    s.PanX -= Pixels(Xr - Xcentro) 'drw.Model.PanBaseX
    s.PanY -= Pixels(Yr - Ycentro)

End

Public Sub PanToOrigin(Optional s As Sheet = drawing.Sheet)

    ' muevo el grafico desde la posicion actual al 0,0
    Dim Xcentro, Ycentro As Float

    Xcentro = Metros(-(gcd.Drawing.Sheet.PanX))
    Ycentro = Metros(-(gcd.Drawing.Sheet.PanY))

    ' FIXME: despues de qe todo funcione bien, volvemos con esto
    's.PanBaseRealX += Xcentro
    's.PanBaseRealY += Ycentro

    s.PanX = 0
    s.PanY = 0

End

'' Regenera los layers, sin regenerar cada entidad
Public Sub RegenList()

    ' La parte de los VBO
    gcd.debugInfo("Generating GL graphics",,, True)

    'clsEntities.glGenBuffers()
    'clsEntities.FillLayersWithEntities(Drawing)
    'clsEntities.CollectVisibleEntities
    'clsEntities.glGenDrawList
    'clsEntities.glGenDrawListSel
    clsEntities.glGenDrawListLAyers
    redraw

End

' Public Sub ReEscalar(sToScale As Sheet)
'
'     Dim limits As New Float[]
'     Dim dX, dY As Float         ' DIMENSION DEL DIBUJO
'     Dim gX, gY As Float         ' POSICION DEL CG
'     Dim fX, fY As Float          ' relacion del tamaño con la posicion
'
'     limits = clsEntities.ComputeLimits(sToScale.Entities)
'
'     dX = limits[2] - limits[0]
'     dy = limits[3] - limits[1]
'
'     GX = (limits[2] + limits[0]) / 2
'     Gy = (limits[3] + limits[1]) / 2
'
'     If dX = 0 Or dY = 0 Then Return
'
'     fX = Abs(gX / dX)
'     fY = Abs(gY / dY)
'
'     If fY > 1e5 Or fX > 1e5 Then ' existe la posibilidad de artifacts
'         Debug "ARTIFACTS EN", sToScale.Name
'     End If
'
'     ' de todas formas el rescalado tendria que ser
'
'     sToScale.PanBaseX = gx
'     sToScale.PanBaseY = gy
'
' End

Public Sub GetZoomExtents(s As Sheet)

    Dim limits As New Float[]
    Dim SZx As Float
    ' ahora calculo donde estaria el centro de este dibujo

    Dim cx, cy As Float
    Dim px, py As Integer           ' coordenadas del punto medio

    limits = clsEntities.ComputeLimits(s.Entities)

    cx = limits[2] - limits[0]
    cy = limits[3] - limits[1]

    If cx = 0 Then cx = 0.00001
    If cy = 0 Then cy = 0.00001
    s.ScaleZoom = s.GlSheet.h / cy * 0.9

    szx = s.GlSheet.w / cx * 0.9

    If szx < s.ScaleZoom Then s.ScaleZoom = szx

    px = (limits[2] + limits[0]) / 2
    py = (limits[3] + limits[1]) / 2

    s.PanX = -gcd.Pixels(px)
    s.PanY = -gcd.Pixels(py)

    If s.ScaleZoom > 1e6 Or s.ScaleZoom < 1e-6 Then
        s.ScaleZoom = 1
        s.PanX = 0
        s.PanY = 0
    End If

End

Public Function LibreDWGtoDXF(sDwgFile As String) As String

    Dim str, filebase As String
    Dim Steps As Integer

    filebase = utils.FileFromPath(sDwgFile)
    'filebase = sDwgFile
    steps = 0 ' elimino el archivo temporal que hubiese creado

    If Exist(main.dirDwgIn &/ filebase) Then Kill main.dirDwgIn &/ filebase

    Steps = 1 ' hago una copia previa a la conversion
    Copy sDwgFile To main.dirDwgIn &/ filebase

    Steps = 2 ' Calling the converter
    Shell "dwgread -O DXF " & " -o '" & main.dirDxfOut &/ utils.FileWithoutExtension(filebase) & ".dxf' '" & main.dirDwgIn &/ filebase & "'" Wait To str
    Debug str
    steps = 3
    ' vacio el directorio de entrada

    Return main.dirDxfOut &/ utils.FileWithoutExtension(filebase) & ".dxf"

Catch

    Select Case Steps
        Case 0
            ' esto puede fallar por acceso denegado
            Print ("Acces denied to temp file")
            Return Null
        Case 1
            ' esto puede fallar por file corrupt
            Print ("File corrupt")
            Return Null
        Case 2
            ' esto puede fallar por diversas cuestiones
            Print ("Conversion failed")
            Return Null
        Case 3
            ' esto puede fallar por diversas cuestiones
            Print ("Could't empty temp dir")
            Return Null

    End Select

End

'' Prepara un dibujo y lo devuelve listo para usarse
Public Sub NewDrawing(sName As String) As Drawing

    Dim D As New Drawing

    d.FileName = sname
    Dim S As New Sheet
    s.Name = "Model"
    s.IsModel = True
    's.Entities = d.Entities
    ' s.Handle = "2" ' Le asigno el 2 porque el 1 es el block_record
    D.Sheets.Add(s, "Model")
    d.Sheet = s
    d.Model = s
    'D.Entities = d.Sheet.Entities

    ' lo agrego a los bloques
    Dim b As New Block
    b.name = "*Model_Space"
    b.entities = New Collection
    d.Sheet.Entities = b.entities
    b.IsAuxiliar = True
    b.IsReciclable = False

    s.Block = b

    d.Blocks.Add(b, b.name)

    Dim L As New Layer
    l.Name = "0"
    l.id = "20"
    D.Layers.Add(l, l.name)                     'Agrego un layer
    d.CurrLayer = l

    Dim LT As New LineType
    lt.Name = "CONTINUOUS"
    lt.id = "21"
    D.LineTypes.Add(lt, lt.Name)                ' Agrego un LineType
    l.LineType = lt
    d.CurrLineType = lt

    Dim DS As New DimStyle
    DS.id = "22" 'gcd.NewHandle(d)
    ds.name = "standard"

    d.CurrDimStyle = ds
    D.DimStyles.Add(ds, ds.name)                ' Agrego un DimStyle

    ' d.Tables.Add(d.Blocks, "1")
    ' d.Tables.Add(d.Layers, "10")
    ' d.Tables.Add(d.Viewports, "11")
    ' d.Tables.Add(d.LineTypes, "12")
    ' d.Tables.Add(d.TextStyles, "13")
    ' d.Tables.Add(d.Views, "14")
    ' d.Tables.Add(d.AppIDs, "15")
    ' d.Tables.Add(d.DimStyles, "16")

    Dim ts As New TextStyle
    ts.FontName = "romans"
    ts.name = "standard"
    ts.sFont_3 = "romans"
    ts.FixedH_40 = 0.10
    ts.Id = 23
    d.TextStyles.Add(ts, ts.name)
    d.CurrTextStyle = ts

    d.Headers.FINGERPRINTGUID = UniqueId()

    Return D

End

Public Function ImportPAT(sFile As String) As Boolean
    ' *ACAD_ISO14W100, dashed triplicate-dotted line
    ' 0, 0,0, 0,5, 12,-3,.5,-3,.5,-6.5
    ' 0, 0,0, 0,5, -22,.5,-3
    ' *ACAD_ISO15W100, double-dashed triplicate-dotted line
    ' 0, 0,0, 0,5, 12,-3,12,-3,.5,-10
    ' 0, 0,0, 0,5, -33.5,.5,-3,.5,-3
    ' ;;
    ' ;; en

    Dim f As File
    Dim s, s2 As String
    Dim p As Pattern
    Dim hp As HatchPattern
    Dim sp As String[]
    Dim i As Integer

    f = Open sfile For Input

    Do
        Line Input #f, s

        s = Replace(s, "\r", "")

        s2 = Left(s, 1)
        If s2 = ";" Then ' es un comentario, se ignora

        Else If s2 = "*" Then ' es un nuevo patron

            ' si tenia un patron anterior, lo guardo
            If hp Then
                gcd.HatchPatterns.Add(hp, hp.name)
            Endif
            s = Mid(s, 2)
            hp = New HatchPattern
            sp = Split(s, ",")
            hp.name = sp[0]
            hp.description = sp[1]

        Else If s <> "" Then
            p = New Pattern
            s = Replace(s, " ", "")
            sp = Split(s, ",")
            p.AngleDeg = CFloat(sp[0])
            p.BaseX = CFloat(sp[1])
            p.BaseY = CFloat(sp[2])
            p.OffsetX = CFloat(sp[3])
            p.OffsetY = CFloat(sp[4])
            For i = 5 To sp.Max
                If Left(sp[i], 1) = "-" Then
                    sp[i] = "-0" & Mid(sp[i], 2)
                Else
                    sp[i] = "0" & sp[i]
                End If
                p.DashLength.Add(CFloat(sp[i]))
            Next
            hp.patterns.Add(p)

        Endif

    Loop Until Eof(f)

End

' Public Sub DigestInserts()
'
'     Dim s As Sheet
'     Dim e, e2 As Entity
'     Dim cParts As New Collection
'
'     For Each s In Drawing.Sheets
'         For Each e In s.Entities
'             'Debug e.Gender
'             If e.Gender = cadInsert.Gender Or InStr(e.Gender, "DIMENSION") > 0 Then
'                 'Debug e.Gender
'                 For Each e2 In cadInsert.InsertParts(e, InStr(e.Gender, "DIMENSION") > 0)
'
'                     cParts.Add(e2, e2.Id)
'                 Next
'             Endif
'         Next
'         For Each e2 In cParts
'
'             s.Entities.Add(e2, e2.Id)
'         Next
'         cParts.Clear
'     Next
'
' End

'' Debug hacia texarea con numero indefinido de parámetros
Public Sub debugInfo(txt As String, Optional MismaLineaAnterior As Boolean = False, Optional forzar As Boolean = False, LogToFile As Boolean = False)

    If LogToFile Then Write #main.MyLog, Format(Now, "hh:nn:ss") & " -> " & txt & gb.CrLf

    ' fmain.txtCmd.Text = ": " & txt
    ' fmain.txtcmd.Tag = "True"

    If debugTime Then
        txt = Format$(Timer - LastTimer, "0.00") & " : " & txt & gb.CrLf
    Else
        txt = ": " & txt & gb.CrLf
    End If

    If MismaLineaAnterior Then
        fdebug.txtDebug.Undo

    Else ' no voy a loguear lineas repetidas
        ''hlog(txt)
        LastTimer = Timer
    End If

    fdebug.txtDebug.Insert(txt)
    fDebug.txtDebug.EnsureVisible

    ' txt = ": "
    ' txtDebug.Insert(txt)
    'txtDebug.EnsureVisible

    'txtDebug.Insert(": ")
    'lastPos = txtDebug.Length
    ' en caso que el ususario tenga cerrada esta ventana, le muestro la linea en
    'lblAyudaRapida.text = Left$(txt, -2)

    'itsTime = False
    If forzar Then
        fdebug.txtDebug.Refresh
        Wait 0.01
    End If

    Utils.doevents

End
