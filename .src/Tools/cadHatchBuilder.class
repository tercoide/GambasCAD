' Gambas class file

' GambasCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA

Inherits ToolsBase
Public Const Gender As String = "HATCHS"

Public StepsDone As Integer

Public UserResponse As Integer  ' 1 = Cancel ; 2 =
Public entHatch As Entity

Public Function Start(Optional filename As Variant, Optional _mode As Integer = 0) As Boolean

    Dim xf As String[]
    Dim f As String
    Dim iREt, nsel, i As Integer
    Dim eBorder As Entity
    Dim eBorders As New Entity[]
    Dim p, p2 As Pattern
    Dim hp As HatchPattern
    Dim h As Hatch
    Dim c, s, x, y As Float

    ' desde el grafico entramos siempre a esta parte de la clase
    ' yo tengo q saber el estado de la comunicacion con el user
    ' entonces verifico

    Select Case StepsDone
        Case 0 ' nuevo hatch

            iRet = FHatch.Showmodal()

            Debug gcd.Drawing.LastHatchFile

            Select Case iRet
                Case 2 ' busqueda de contorno
                    gcd.clsJobPrevious = Me
                    gcd.clsJob = cadSelection

                    gcd.Drawing.Sheet.GlSheet.PopupMenu = ""

                    StepsDone = 1 ' cuando vuelvo aca, ya tengo un contorno

                Case 1 ' el user cancelo el hatch
                    gcd.clsJobPrevious = Me
                    gcd.clsJob = cadSelection
                    StepsDone = 0 ' cuando vuelvo aca, empiezo de nuevo

            End Select

        Case 1 ' vengo de seleccionar los parametros de hatch

            nSel = gcd.Drawing.Sheet.EntitiesSelected.Count
            If nsel = 0 Then Return
            If (gcd.Drawing.Sheet.EntitiesSelected[gcd.Drawing.Sheet.EntitiesSelected.First].Gender <> "LWPOLYLINE") And (gcd.Drawing.Sheet.EntitiesSelected[gcd.Drawing.Sheet.EntitiesSelected.First].PolyLine.Count < 6) Then
                Message("El contorno esta mal definIdo")
                iRet = FHatch.Showmodal()
            Else
                StepsDone = 2
                iRet = FHatch.Showmodal()

                'Debug gcd.Drawing.LastHatchFile

                Select Case iRet
                    Case 2 ' nueva busqueda de contorno
                        gcd.clsJobPrevious = Me
                        gcd.clsJob = cadSelection
                        StepsDone = 1 ' cuando vuelvo aca, ya tengo un contorno

                    Case 1 ' el user cancelo el hetch
                        gcd.clsJobPrevious = Me
                        gcd.clsJob = cadSelection
                        StepsDone = 0 ' cuando vuelvo aca, empiezo de nuevo

                    Case 3 ' confirma el Hatch

                        entHatch = gcd.Drawing.LastEntity
                        entHatch.Id = gcd.NewId()
                        entHatch.PolyLine.Clear
                        entHatch.pBlock.PolyLines.Clear

                        For Each eBorder In gcd.Drawing.Sheet.EntitiesSelected
                            Select Case eBorder.Gender  ' veo si me sirve de borde
                                Case "LINE"

                                    eBorders.add(eBorder)
                                Case "LWPOLYLINE", "ARC", "CIRCLE", "ELLIPSE", "SPLINE"
                                    eBorders.Add(eBorder)
                                Case Else

                            End Select

                        Next

                        entHatch.pBlock.eSegments.Add(eBorders)
                        entHatch.Container = gcd.Drawing.Sheet.Block
                        gcd.Drawing.Sheet.Entities.Add(entHatch, entHatch.Id)
                        Gcd.CCC[entHatch.gender].buildgeometry(entHatch)

                        Gcd.CCC[entHatch.gender].Finish(entHatch)
                        gcd.Drawing.uUndo.OpenUndoStage("Hatch", Undo.TypeCreate)
                        gcd.Drawing.uUndo.AddUndoItem(entHatch)
                        gcd.Drawing.uUndo.CloseUndoStage()
                        'LastEntity = entHatch                                       ' save it to repeat on rigth click

                        gcd.clsJobPrevious = Me
                        gcd.clsJob = cadSelection
                        cadSelection.PoiChecking = True
                        DrawingAIds.CleanTexts

                        'clsEntities.GLGenDrawList

                        gcd.Regen()
                        StepsDone = 0
                End Select

            Endif

    End Select

End

Public Function MakePattern(eHatch As Entity, sPattern As String, fAngleDeg As Float, fScale As Float) As Boolean

    Dim h As Hatch
    Dim hp As HatchPattern
    Dim i As Integer
    Dim fAng, c, s, x, y As Float
    Dim flxOffset, flxBase As New Float[]
    Dim p, p2 As Pattern

    h = eHatch.pBlock

    h.Patterns.Clear

    hp = gcd.HatchPatterns[sPattern]

    If Not hp Then Return False

    eHatch.fParam[cadHatch.ipaScale] = fScale
    eHatch.fParam[cadHatch.ipaRotation] = fAngleDeg
    eHatch.sParam[cadHatch.sdaPattern] = sPattern

    For Each p In hp.patterns
        p2 = New Pattern
        h.Patterns.Add(p2)
        p2.AngleDeg = p.AngleDeg + fAngleDeg
        p2.BaseX = p.BaseX * fScale
        p2.BaseY = p.BaseY * fScale
        p2.OffsetX = p.OffsetX * fScale
        p2.OffsetY = p.OffsetY * fScale

        fAng = Rad(fAngleDeg + p2.AngleDeg)
        fAng = Rad(p2.AngleDeg)

        flxBase.Clear
        flxBase.Insert([p2.BaseX, p2.BaseY])
        puntos.Rotate(flxBase, Rad(fAngleDeg))
        p2.Basex = flxBase[0]
        p2.Basey = flxBase[1]

        flxOffset.Clear
        flxOffset.Insert([p2.OffsetX, p2.OffsetY])
        puntos.Rotate(flxOffset, Rad(p2.AngleDeg))

        p2.Offsetx = flxOffset[0]
        p2.Offsety = flxOffset[1]

        For i = 0 To p.DashLength.max
            p2.DashLength.Add(p.DashLength[i] * fScale)
        Next

    Next

    ' cadHatch.Finish(eHatch)

    Return True

End
