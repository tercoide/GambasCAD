' Gambas class file

' GambasCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA

' Tool maintained by Terco
Inherits ToolsBase
Create Static
Public Const Gender As String = "ROTATE"

Private Radianes As Float

Private glSelectedList As Integer

Public Function Start(Optional ElemToBuild As Variant, Optional _Mode As Integer = 0) As Boolean
    ' Llamada por FCAD al inicio de la aplicacion de esta herramienta

    Dim i As Integer
    ' Aprovechamos para establecer los helpers (comentarios de ayuda en pantalla)
    Me.PointsDone = 0
    Me.PointsTotal = 2

    run
    Me.Active = True
    gcd.Drawing.Sheet.GlSheet.PopupMenu = ""
    fmain.PopupMenu = ""

End

'' cadSelection o algun otro proceso nos devuelve el control
Public Sub Run()

    If gcd.Drawing.Sheet.EntitiesSelected.Count = 0 Then                                     ' we have no elements in the selection

        Me.Prompt = ("Select entities")

        gcd.clsJobCallBack = Me
        gcd.clsJob = cadSelection

        cadSelection.ReturnOnFirstSelection = False

    Else                                                                    ' need the first point

        'DrawingAids.CmdLineHelper = DrawingAids.CmdLineHelper & ": " & ("Base point")
        Me.Prompt = Str(gcd.Drawing.Sheet.EntitiesSelected.Count) & " " & ("elements") & "-> " & ("Base point") & ":"

        Me.NextParamType = "P"

        Me.PointsDone = 1

        gcd.SnapMode = Config.SnapModeSaved                 ' vuelvo al Snap Guardado

        clsEntities.GLGenDrawListSel(0)                     ' genero drawing lists
        clsEntities.GLGenDrawListAll(True)

        ' gcd.Drawing.uUndo.OpenUndoStage("Move entities", Undo.TypeModify)
        ' For Each E In gcd.Drawing.EntitiesSelected
        '     gcd.Drawing.uUndo.AddUndoItem(clsEntities.ClonEntity(E, False))
        ' Next

    Endif

End

Public Sub NewParameter(tipo As String, vValor As Variant, Optional definitive As Boolean = False)

    Select Case LCase(tipo)
        Case "point"

            If definitive Then

                If Me.PointsDone = 1 Then ' acabo de marcar el punto base
                    Dim e As Entity
                    ' ya tengo cosas seleccionadas
                    DrawingAIds.Helper.texto = Me.Prompt & ": " & ("Angle") & " [90]"

                    ' punto real base
                    Me.SelStartXr = vValor[0]
                    Me.SelStartYr = vValor[1]

                    Me.glTranslate[0] = Me.SelStartXr
                    Me.glTranslate[1] = Me.SelStartYr
                    Me.glTranslate[2] = 0

                    gl.PushMatrix
                    gl.NewList(gcd.Drawing.GlListEntitiesSelected, gl.COMPILE)                      ' genero los graficos dentro de la lista
                    gl.Translatef(-Me.SelStartXr, -Me.SelStartYr, 0)
                    gl.Translatef(gcd.Drawing.Sheet.PanBaseRealX, gcd.Drawing.Sheet.PanBaseRealY, 0)
                    For Each E In gcd.Drawing.Sheet.EntitiesSelected
                        gl.CallList(E.glDrwList)
                    Next
                    gl.EndList
                    gl.PopMatrix

                    Inc Me.PointsDone

                Else If Me.PointsDone = 2 Then
                    '     ' we compare Real values from the starting point to the location
                    '     ' represente by the mouse now, taking account that the drawing
                    '     ' could have being moved by the mouse wheel
                    '
                    '     ' new Real position is
                    Me.SelEndXr = vValor[0]
                    Me.SelEndYr = vValor[1]
                    Radianes = Ang(Me.SelEndXr - Me.SelStartXr, Me.SelEndYr - Me.SelStartYr)

                    Me.Finish

                End If

            Else ' mousemove
                If Me.PointsDone = 2 Then
                    '     ' we compare Real values from the starting point to the location
                    '     ' represente by the mouse now, taking account that the drawing
                    '     ' could have being moved by the mouse wheel
                    '
                    '     ' new Real position is
                    Me.SelEndXr = vValor[0]
                    Me.SelEndYr = vValor[1]

                    Radianes = Ang(Me.SelEndXr - Me.SelStartXr, Me.SelEndYr - Me.SelStartYr)

                    Me.glAngle = Deg(Radianes)

                    Me.Prompt = ("Angle") & " [" & Format$(Me.glAngle, "0.0") & "]"
                    gcd.redraw
                End If

            End If
        Case Else
            If Me.PointsDone = 2 Then
                Try radianes = Rad(CFloat(vvalor))
                Me.Finish
            Endif

            If Trim(LCase(vvalor)) = "_cancel" Then Me.Cancel
    End Select

End

Public Sub Draw()

    gl.PushMatrix
    gl.Translatef(Me.glTranslate[0], Me.glTranslate[1], Me.glTranslate[2])
    gl.Rotatef(Me.glAngle, Me.glRotate[0], Me.glRotate[1], Me.glRotate[2])
    gl.CallList(gcd.Drawing.GlListEntitiesSelected)
    gl.PopMatrix

End

Public Sub Finish()

    Dim E As Entity, ip As Integer, Prot As New Float[]
    ' Recolecto la ultima seleccion
    gcd.Drawing.Sheet.EntitiesSelectedPrevious = gcd.Drawing.Sheet.EntitiesSelected.Copy()

    gcd.Drawing.uUndo.OpenUndoStage("Rotate", Undo.TypeModify)
    For Each E In gcd.Drawing.Sheet.EntitiesSelected
        gcd.Drawing.uUndo.AddUndoItem(e, Undo.TypeModify)
        gcd.CCC[e.gender].Translate(E, -Me.glTranslate[0], -Me.glTranslate[1])

        gcd.CCC[e.gender].Rotate(E, radianes)
        gcd.CCC[e.gender].Translate(E, Me.glTranslate[0], Me.glTranslate[1])
    Next
    gcd.Drawing.uUndo.CloseUndoStage

    clsEntities.glGenDrawListSel(True)

    Super.Finish()

End
