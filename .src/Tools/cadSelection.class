' Gambas class file

' GambasCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA

' Tool maintained by Terco

' this is the Main Job, either we are doing this or other job
Inherits ToolsBase
' Create Static
Public Const Gender As String = "SELECT"

Private EntityType As String[]

Private GripPoint As Grip
Private GripHovered As Grip
Private GripCopying As Boolean = False
'Public GripCopying As Boolean = False

Private dX As Float
Private dY As Float
'Public ToolActive As Boolean = False
Private PanActive As Boolean = False
Private GripActive As Boolean = False
Private RectActive As Boolean = False

' nuevo, para integrar el resto de las tools con esta, que es la principal
Public AllowSingleSelection As Boolean = True
Public AllowRectSelection As Boolean = True
Public AllowPolySelection As Boolean = True
Public AllowGripEdit As Boolean = True
Public AllowTextInput As Boolean = True

Public ReturnOnFirstSelection As Boolean = True

' mas nuevo
Public SelectType As Integer = 1
Public Const SelectTypeSingleAndRect As Integer = 1
Public Const SelectTypeSingle As Integer = 0
Public Const SelectTypeRect As Integer = 2
Public Const SelectTypePoly As Integer = 3
Public Const SelectTypePoint As Integer = 4

Public SelectMode As Integer = 0
Public Const SelectModeNew As Integer = 0
Public Const SelectModeAdd As Integer = 1
Public Const SelectModeRem As Integer = 2

Public SelectCrossing As Boolean = False                ' las entidades puedn estar parcialmente dentro del contorno

Public SelectionPoly As New Float[]

' Funcionamiento:

' ToolActive: significa que otra Tool (Copy, Move, etc) le pidio a esta que modifique la seleccion de entidas

' A MouseDown
' A.1 Izquierdo
' A.1.1 No estoy sobre ninguna entidad -> Inicio una seleccion rectangular ActionActive = ActionRectActive
' A.1.2 Estoy sobre una entidad
' A.1.2.1 No esta seleccionada -> seleccionar
' A.1.2.2 Esta seleccionada previamente
' A.1.2.2.1 Estoy sobre un grip -> Inicio edicion por grip ActionActive = ActionGripActive (solo si ToolActive=False)
' A.1.2.2.2 No estoy sobre un grip -> deseleccionar
' A.2 Derecho
' A.2.1 ToolActive = False?
' A.2.1.1 No tengo ninguna seleccion previa-> Repito el ultimo comando, independientemente de si estoy sobre una entidad o no
' A.2.1.2 Tengo una seleccion previa -> Menu: Cortar, Copiar, Agrupar, Desagrupar, Llevar al layer actual, etc
' A.2.2 ToolActive = True? -> Finalizo la seleccion y vuelvo a la Tool
' A.3 Medio -> Inicio el Paneo ActionActive = ActionPanActive

' B MouseMove
' B.1 ActionActive = ActionRectActive: actualizo coordenadas del punto final del Rect
' B.2 ActionActive = ActionGripActive: modifico la entidad con la nueva posicion del punto
' B.3 ActionActive = ActionPanActive: mando la coordenada a cadPan
' B.4 ActionActive = 0: nada

' C MouseUp
' C.1 Izquierdo
' C.1.1 ActionActive = ActionRectActive -> Finalizo la seleccion por recuadro
' C.1.2 ActionActive = ActionGripActive -> Finalizo la edicion por grips
' C.1.3 ActionActive = ActionPanActive -> nada
' C.1.4 ActionActive = 0
' C.2 Derecho -> nada
' C.3 Medio -> ActionActive = ActionPanActive -> finalizo el paneo

Public Function Start(Optional ElemToBuild As Variant, Optional _Mode As Integer = 2) As Boolean
    ' Modes:
    '       0 = Move, all points in the element must be selected, or click on it.
    '       1 = Stretch, selection may be partial, each element is called to see if the support stretching

    Me.Mode = _Mode

    Me.Prompt = ("Selected") & " " & Str$(gcd.Drawing.Sheet.EntitiesSelected.Count) & " " & ("elements") & " " & ("New/Add(Ctrl)/Remove(Shft)/Previous selection")

    ' If Me.Mode = ModeNewSelection Then
    '     fMain.PopupMenu = ""                    ' no hay menu contextual
    '     Me.Prompt = "New selection"
    '     If gcd.clsJobPrevious.gender = cadEntityBuilder.gender Then
    '         If cadEntityBuilder.LastEntity Then
    '             Me.Prompt &= " or <rigth click> to repeat " & cadEntityBuilder.LastEntity.gender
    '         End If
    '     End If
    ' Else If Me.Mode = ModeAddEntities Then
    '     Me.Prompt = "Add entities to selection"
    ' Else If Me.Mode = ModeRemoveEntities Then
    '     Me.Prompt = "Remove entities from selection"
    '
    ' Else
    '     Utils.MenuMaker(fMain, "mToolsBase", Me.ContextMenu)
    '     'gcd.Drawing.Sheet.GlSheet.PopupMenu = "mToolsBase"  ' TODO: ver si damos soporte a menus
    ' End If
    gcd.Drawing.iEntity.Clear
    Me.PoiChecking = True
    gcd.DrawHoveredEntity = True
    GripPoint = Null

End

' Public Sub DblClick()
'
'     Dim k As Single
'     Dim e As Entity
'     Dim te As Entity
'
'
'
'     Me.EntityForEdit = clsMouseTracking.CheckAboveEntity(gcd.Xreal(Mouse.x), gcd.Yreal(Mouse.y))
'     Return
'
'     If Not gcd.flgSearchingPOI Then
'         gcd.Drawing.iEntity = clsMouseTracking.CheckBestPOI(gcd.Xreal(mouse.x), gcd.Yreal(mouse.Y))
'     Else    ' estoy buscando, pero me movi, asi que me desengancho del POI anterior
'
'         gcd.Drawing.iEntity[0] = gcd.Xreal(mouse.x)
'         gcd.Drawing.iEntity[1] = gcd.Yreal(mouse.y)
'         gcd.Drawing.iEntity[2] = -1                 ' POI type
'
'     End If
'
'     If gcd.Drawing.iEntity[3] >= 0 Then
'
'         'Stop
'         ' I comment the abobe line because its stop my tool also. What is the idea whit stop?
'         '  aca podes lanzar tu editor de texto u otras propiedades
'         k = gcd.Drawing.iEntity[3]
'         e = gcd.Drawing.Entities[k]
'
'         ' Select e.Gender
'         '   Case "Text"
'         '     If EditingText = False Then
'         '       ' Copying the entity for undo
'         '       te = clsEntities.ClonEntity(e)
'         '       te.Handle = e.Handle
'         '       ftx = New FText([pnlDrawing.ScreenX + 7, pnlDrawing.ScreenY + pnlDrawing.H - 7], e)
'         '       ftx.Run()
'         '       While EditingText = False
'         '         Wait 0.1
'         '       Wend
'         '       gcd.regen
'         '       EditingText = False
'         '     Endif
'         ' End Select
'     Endif
'
' End

Public Function MouseDown()

    Dim i As Integer, e As Entity

    'Return
    If RectActive Then Return

    'GripPoint = -1
    Me.SelStartX = mouse.X
    Me.SelStartY = mouse.Y
    Me.SelStartXr = gcd.Xreal(Me.SelStartX)
    Me.SelStartYr = gcd.Yreal(Me.SelStartY)

    dX = Me.SelStartXr
    dY = Me.SelStartYr

    Me.SelEndX = Me.SelStartX
    Me.SelEndy = Me.SelStartY

    Me.SelEndXr = Me.SelStartXr
    Me.SelEndyr = Me.SelStartYr

    Me.PoiChecking = False
    If Mouse.Right Then Return
    If gcd.clsJobCallBack Then Return
    If RectActive Then Return

    ' A.1 Izquierdo
    If Mouse.Left Then

        ' veo si esta en un grip(solo si ToolActive = False)

        ' chequeo si estoy sobre un grip
        If AllowGripEdit Then GripPoint = FindGrip(Me.SelStartXr, Me.SelStartYr) Else GripPoint = Null

        If GripPoint Then

            ' creo una entidad al vuelo, clonada de la engripada
            Me.OriginalEntityForEdit = GripPoint.AsociatedEntity
            Me.EntityForEdit = clsEntities.ClonEntity(GripPoint.AsociatedEntity, False)
            GripPoint.AsociatedEntity = Me.EntityForEdit
            gcd.Drawing.Sheet.SkipSearch = GripPoint.AsociatedEntity

            ' rectifico la posicion del punto
            Me.SelStartXr = GripPoint.X
            Me.SelStartYr = GripPoint.Y

            Return
        Else If gcd.Drawing.HoveredEntity Then 'Or Me.ModeRectSelection Then

            ' ' A.1.2 Estoy sobre una entidad
            '
            ' If Not gcd.Drawing.Sheet.EntitiesSelected.Exist(gcd.Drawing.HoveredEntity.Id) Then
            '     ' A.1.2.1 No esta seleccionada -> seleccionar
            '     gcd.Drawing.Sheet.EntitiesSelected.add(gcd.Drawing.HoveredEntity, gcd.Drawing.HoveredEntity.Id)
            '     gcd.Drawing.Sheet.Grips.Clear
            '     gcd.CCC[gcd.Drawing.HoveredEntity.Gender].generategrips(gcd.Drawing.HoveredEntity)
            '     clsEntities.glGenDrawListSel
            '     fProps.FillProperties(gcd.Drawing.Sheet.EntitiesSelected)
            '     gcd.Redraw
            ' Else
            '     ' A.1.2.2 Esta seleccionada previamente
            '     ' A.1.2.2.2 No estoy sobre un grip -> deseleccionar
            '     gcd.Drawing.Sheet.EntitiesSelected.Remove(gcd.Drawing.HoveredEntity.Id)
            '     fprops.FillProperties(gcd.Drawing.Sheet.EntitiesSelected)
            '     clsEntities.glGenDrawListSel
            '     gcd.Redraw
            ' End If

        Endif

        Return ' este return es para evitar clicks simultaneos
    End If

    If Mouse.MIddle Then
        ' A.3 Medio -> Inicio el Paneo ActionActive = ActionPanActive

        Return ' este return es para evitar clicks simultaneos
    End If

    '         If gcd.Drawing.Sheet.Viewport Then
    '
    '             ' si el click esta fuera del viewport, lo desestimo
    '             If Me.SelStartXr < gcd.Drawing.Sheet.Viewport.X0 Or Me.SelStartXr > gcd.Drawing.Sheet.Viewport.X1 Or Me.SelStartYr < gcd.Drawing.Sheet.Viewport.Y0 Or Me.SelStartYr > gcd.Drawing.Sheet.Viewport.Y1 Then
    '                 gcd.Drawing.Sheet.Viewport = Null ' Desactivo el viewport
    '             Else
    '
    '                 gcd.Drawing.GLAreaInUse.Mouse = Mouse.SizeAll
    '                 Me.active = True
    '             End If
    '         Else
    '
    '
    '
    '             If Me.Mode = Me.ModeRectSelection Then
    '                 Me.Active = True
    '
    '             Else
    '
    '
    '                 If gcd.Drawing.HoveredEntity.selected Then
    '
    '
    '                 Else
    '                     clsEntities.SelectElem(gcd.Drawing.HoveredEntity)                 '   -> la selecciono
    '
    '                 Endif
    '                 Me.Active = False
    '
    '                 clsEntities.GLGenDrawListSel(0)
    '
    '
    '             End If
    '         End If
    '     End If
    ' End If

End

Public Sub MouseUp()

    Dim s, tipo As String
    Dim t As Float = Timer
    Dim e As Entity
    Dim cSel As New Collection

    gcd.Drawing.iEntity.Clear
    gcd.Drawing.Sheet.SkipSearch = Null
    gcd.Drawing.LastPoint.Clear
    ' If gcd.Drawing.Sheet.Viewport Then
    '     '
    '     gcd.Drawing.GLAreaInUse.Mouse = Mouse.Cross
    '     gcd.flgNewPosition = True
    '     Me.active = False
    '     Return
    ' End If

    tipo = "new"
    If Mouse.Shift Or Me.SelectMode = Me.SelectModeRem Then tipo = "rem" ' estos elementos de la seleccion anterior
    If Mouse.Control Or Me.SelectMode = Me.SelectModeAdd Then tipo = "add" ' elementos a la seleccion anterior
    '

    If Mouse.Left Then
        ' C.1 Izquierdo

        ' determino que hacer con la seleccion
        If gcd.clsJobCallBack And Me.ReturnOnFirstSelection And Me.SelectType = Me.SelectTypePoint Then
            gcd.clsJob = gcd.clsJobCallBack
            gcd.clsJobCallBack = Null
            gcd.clsJob.run
            Return
        Endif

        Me.PoiChecking = True
        If RectActive Then

            If Me.SelectType = Me.SelectTypePoly Then
                Me.SelectionPoly.Add(gcd.Xreal(Mouse.x))
                Me.SelectionPoly.Add(gcd.Yreal(Mouse.y))
                Return ' porque esto requiere un RigthClick para terminar
            End If
            ' C.1.1 ActionActive = ActionRectActive -> Finalizo la seleccion por recuadro
            RectActive = False

            ' corrijo para start<end  <- DEPRE
            ' If Me.SelStartX > Me.SelEndX Then
            '     crossing = True <- DEPRE
            '     Swap Me.SelStartX, Me.SelEndX
            ' Else
            '     crossing = False  <- DEPRE
            ' End If

            If Me.SelStartX > Me.SelEndX Then Swap Me.SelStartX, Me.SelEndX
            If Me.SelStartY < Me.SelEndy Then Swap Me.SelStartY, Me.SelEndy                     ' this is FLIPPED

            If Me.SelStartXr > Me.SelEndXr Then Swap Me.SelStartXr, Me.SelEndXr
            If Me.SelStartYr > Me.SelEndyr Then Swap Me.SelStartYr, Me.SelEndyr

            ' veo si el rectangulo es suficientemente grande como para representar una seleccion por rectangulo
            If (Me.SelEndX - Me.SelStartX + (-Me.SelEndy + Me.SelStartY)) > 10 Then

                cSel = clsEntities.SelectionSquare(Me.SelStartXr, Me.SelStartYr, Me.SelEndXr, Me.SelEndyr, Me.SelectCrossing)
                Debug "Select parsing time ", Timer - t

                ' Else ' TODO: ver si tengo que desseleccionar
                '     clsEntities.DeSelection()

            End If
            gcd.Drawing.Sheet.EntitiesSelected = clsEntities.SelectionCombine(gcd.Drawing.Sheet.EntitiesSelected, cSel, tipo)

            ' determino que hacer con la seleccion
            If gcd.clsJobCallBack And Me.ReturnOnFirstSelection Then
                gcd.clsJob = gcd.clsJobCallBack
                gcd.clsJobCallBack = Null
                gcd.clsJob.run
                Return
            Endif
            ' e = gcd.Drawing.Sheet.EntitiesSelected[gcd.Drawing.Sheet.EntitiesSelected.Last]
            ' If e Then
            '     'gcd.Drawing.Sheet.Grips.Clear
            '     gcd.CCC[e.Gender].generategrips(e)
            ' Endif
            fMain.fp.FillProperties(gcd.Drawing.Sheet.EntitiesSelected)
            clsEntities.GLGenDrawListSel()

            'Try s = gcd.clsJobCallBack.gender
            Me.Prompt = ("Selected") & " " & Str$(gcd.Drawing.Sheet.EntitiesSelected.Count) & " " & ("elements") & " " & ("New/Add(Ctrl)/Remove(Shft)/Previous selection")

            ' If gcd.clsJobCallBack Then
            '     Try gcd.clsJobCallBack.run()
            '     Return
            ' Else
            '
            '     ' vamos a darle mas funcionalidad
            '     If gcd.Drawing.Sheet.EntitiesSelected.Count = 0 Then
            '
            '     Else If gcd.Drawing.Sheet.EntitiesSelected.Count = 1 Then
            '
            '         'gcd.Drawing.Sheet.GlSheet.PopupMenu = "mColors"
            '
            '     Else ' tenemos varias entidades
            '
            '         'gcd.Drawing.Sheet.GlSheet.PopupMenu = "mEntities"
            '
            '     End If
            ' Endif

        Else If RectActive = False And Not GripPoint Then

            ' A.1.2 Estoy sobre una entidad
            If gcd.Drawing.HoveredEntity And AllowSingleSelection Then
                If tipo = "new" Then gcd.Drawing.Sheet.EntitiesSelected.Clear
                If AllowSingleSelection Then

                    ' A.1.2.1 No esta seleccionada -> seleccionar
                    If Not gcd.Drawing.Sheet.EntitiesSelected.Exist(gcd.Drawing.HoveredEntity.Id) Then
                        ' excepto que estos removiendo
                        If tipo <> "rem" Then
                            gcd.Drawing.Sheet.EntitiesSelected.add(gcd.Drawing.HoveredEntity, gcd.Drawing.HoveredEntity.Id)
                        End If
                    Else ' esta en la seleccion
                        If tipo = "rem" Then
                            gcd.Drawing.Sheet.EntitiesSelected.Remove(gcd.Drawing.HoveredEntity.Id)
                        End If
                    End If
                    If gcd.clsJobCallBack And Me.ReturnOnFirstSelection Then
                        gcd.clsJob = gcd.clsJobCallBack
                        gcd.clsJobCallBack = Null
                        gcd.clsJob.run
                        Return
                    End If
                End If
                If AllowGripEdit Then

                    gcd.Drawing.Sheet.Grips.Clear
                    clsEntities.GenGrips(gcd.Drawing.HoveredEntity)

                    ' Else  ' TODO: ver que pasa con esto

                    '     ' A.1.2.2 Esta seleccionada previamente
                    '     ' A.1.2.2.2 No estoy sobre un grip -> deseleccionar
                    '     gcd.Drawing.Sheet.EntitiesSelected.Remove(gcd.Drawing.HoveredEntity.Id)
                    '     fprops.FillProperties(gcd.Drawing.Sheet.EntitiesSelected)
                    '     clsEntities.glGenDrawListSel
                    '     gcd.Redraw
                End If
                fProps.FillProperties(gcd.Drawing.Sheet.EntitiesSelected)
                clsEntities.GLGenDrawListSel()
                gcd.Redraw
                Me.Prompt = ("Selected") & " " & Str$(gcd.Drawing.Sheet.EntitiesSelected.Count) & " " & ("elements")

            Else    ' inicio la seleccion por recuadro

                If Me.SelectType > 0 Then RectActive = True
                Me.SelStartX = mouse.x
                Me.SelStartY = mouse.Y
                ' Paso a coordenadas reales
                Me.selStartXr = gcd.Xreal(Me.SelStartX)
                Me.selStartYr = gcd.Yreal(Me.SelStartY)
                If Me.SelectType = Me.SelectTypePoly Then
                    Me.SelectionPoly.Add(Me.SelStartXr)
                    Me.SelectionPoly.Add(Me.SelStartYr)
                Endif
                gcd.Drawing.Sheet.Grips.Clear

            End If

        Else If GripPoint Then

            ' C.1.2 ActionActive = ActionGripActive -> Finalizo la edicion por grips
            ' guardo todo

            GripEdit
            gcd.Drawing.Sheet.Grips.Clear
            If Not GripCopying Then
                Me.EntityForEdit.id = Me.OriginalEntityForEdit.id
                s = GripPoint.ToolTip & (" in ") & GripPoint.AsociatedEntity.Gender
                gcd.Drawing.uUndo.OpenUndoStage(s, Undo.TypeModify)
                gcd.Drawing.uUndo.AddUndoItem(Me.OriginalEntityForEdit)

                gcd.Drawing.Sheet.Entities.Remove(Me.OriginalEntityForEdit.id)
                gcd.Drawing.Sheet.EntitiesVisibles.Remove(Me.OriginalEntityForEdit.id)
                gcd.Drawing.Sheet.EntitiesSelected.Remove(Me.OriginalEntityForEdit.id)
            Else
                Me.EntityForEdit.id = gcd.NewId()
                gcd.Drawing.uUndo.OpenUndoStage("Grip copy ", Undo.TypeCreate)
                gcd.Drawing.uUndo.AddUndoItem(Me.EntityForEdit)

            Endif

            gcd.Drawing.uUndo.CloseUndoStage()

            'gcd.CCC[Me.EntityForEdit.Gender].finish(Me.EntityForEdit)
            gcd.CCC[Me.EntityForEdit.Gender].generategrips(Me.EntityForEdit)
            gcd.Drawing.Sheet.entities.Add(Me.EntityForEdit, Me.EntityForEdit.id)
            gcd.Drawing.Sheet.EntitiesVisibles.Add(Me.EntityForEdit, Me.EntityForEdit.id)
            gcd.Drawing.Sheet.EntitiesSelected.Add(Me.EntityForEdit, Me.EntityForEdit.id)

            clsEntities.glGenDrawList(Me.EntityForEdit)
            clsEntities.glGenDrawListSel()
            clsEntities.glGenDrawListLAyers(Me.EntityForEdit.pLayer)
            Me.EntityForEdit = Null
            Me.OriginalEntityForEdit = Null
            GripPoint = Null
            'GripCopying = False

        End If

        If Me.Mode = PanActive Then
            ' C.1.3 ActionActive = ActionPanActive -> nada
        End If

        If Me.Mode = False Then
            ' C.1.4.1 Estoy sobre una entidad

        Endif
        ' C.1.4 ActionActive = 0

        Return ' este return es para evitar clicks simultaneos
    End If

    ' A.2 Derecho
    If Mouse.Right Then

        If RectActive And Me.SelectType = Me.SelectTypePoly Then

            ' C.1.1 Finalizo la seleccion por POLY
            RectActive = False
            Me.SelectionPoly.Add(gcd.Xreal(Mouse.x))
            Me.SelectionPoly.Add(gcd.Yreal(Mouse.y))

            cSel = clsEntities.SelectionPoly(Me.SelectionPoly, Me.SelectCrossing)
            Me.SelectionPoly.Clear
            gcd.Drawing.Sheet.EntitiesSelected = clsEntities.SelectionCombine(gcd.Drawing.Sheet.EntitiesSelected, cSel, tipo)

            ' determino que hacer con la seleccion
            If gcd.clsJobCallBack And Me.ReturnOnFirstSelection Then
                gcd.clsJob = gcd.clsJobCallBack
                gcd.clsJobCallBack = Null
                gcd.clsJob.run
                Return
            Endif

            e = gcd.Drawing.Sheet.EntitiesSelected[gcd.Drawing.Sheet.EntitiesSelected.Last]
            If e Then
                'gcd.Drawing.Sheet.Grips.Clear
                gcd.CCC[e.Gender].generategrips(e)
            Endif
            fProps.FillProperties(gcd.Drawing.Sheet.EntitiesSelected)
            clsEntities.GLGenDrawListSel()

            Me.Prompt = ("Selected") & " " & Str$(gcd.Drawing.Sheet.EntitiesSelected.Count) & " " & ("elements")

        Else If Not gcd.clsJobCallBack Then
            ' Si estoy aca es porque:
            ' -No estoy en un proceso de seleccion
            ' -No estoy aplicando una herramienta
            ' -No hay entidades selecionadas

            If gcd.clsJobPrevious Then
                If (gcd.Drawing.Sheet.EntitiesSelected.Count = 1) And (gcd.clsJobPrevious.gender = cadEntityBuilder.gender) Then
                    If cadEntityBuilder.LastEntity Then

                        gcd.clsJob = gcd.clsJobPrevious
                        gcd.clsJob.Start()

                    Endif

                Else
                    'If gcd.Drawing.Sheet.EntitiesSelected.Count = 0 Then              'Sin entidades seleccionadas podria significar cancelar
                    '
                    '                 gcd.clsJob = gcd.clsJobPrevious
                    '                 gcd.clsJob.Cancel
                    '             Else If gcd.Drawing.Sheet.EntitiesSelected.Count = 1 Then
                    '                 gcd.clsJob = gcd.clsJobPrevious
                    '                 gcd.clsJob.Start()
                    '
                    '             Else ' tenemos varias entidades
                    gcd.clsJob = gcd.clsJobPrevious
                    gcd.clsJob.Start()

                End If
            End If
            '     End If
            ' Else
            '     ' A.2.1.2 Tengo una seleccion previa -> Menu: Cortar, Copiar, Agrupar, Desagrupar, Llevar al layer actual, etc
            '     ' Esto salta solo, pero debo configurarlo en algun lado
            '     gcd.clsJob = gcd.clsJobCallBack
            '     gcd.clsJob.run()
            '
            'End If

        Else If gcd.Drawing.Sheet.EntitiesSelected.Count > 0 Then
            ' Si estoy aca es porque:
            ' -No estoy en un proceso de seleccion
            ' -No estoy aplicando una herramienta
            ' -Hay entidades selecionadas
            gcd.Drawing.Sheet.EntitiesSelected.Clear
            clsEntities.GLGenDrawListSel()
            fProps.FillProperties(gcd.Drawing.Sheet.EntitiesSelected)

        Else

            ' A.2.2 ToolActive = True? -> Finalizo la seleccion y vuelvo a la Tool
            gcd.Drawing.Sheet.EntitiesSelectedPrevious = gcd.Drawing.Sheet.EntitiesSelected.Copy()
            gcd.clsJob = gcd.clsJobCallBack
            gcd.clsJob.run()

        End If
        Return ' este return es para evitar clicks simultaneos
    End If

    If Mouse.MIddle Then

        ' C.3 Medio -> ActionActive = ActionPanActive -> finalizo el paneo
        Return ' este return es para evitar clicks simultaneos
    End If

    gcd.Redraw

End

Public Sub MouseMove()

    Dim g As Grip, e As Entity

    Me.SelEndX = mouse.X
    Me.SelEndy = mouse.Y
    Me.SelEndXr = gcd.Xreal(Me.SelEndX)
    Me.SelEndyr = gcd.Yreal(Me.SelEndy)
    Me.SelEndXr = gcd.Near(Me.SelEndXr)
    Me.SelEndYr = gcd.Near(Me.SelEndYr)

    ' ' yo soy el responsable de chequear POI
    ' If Not gcd.flgSearchingPOI Thenntity

    'End If

    'end If
    If RectActive And Me.SelectType <> Me.SelectTypeSingle Then
        ' B.1 ActionActive = ActionRectActive: actualizo coordenadas del punto final del Rect
        ' (se hace mas arriba)

        If Me.SelEndXr <= Me.SelStartXr Then Me.SelectCrossing = True Else Me.SelectCrossing = False
    Else If GripPoint Then
        ' B.2 ActionActive = ActionGripActive: modifico la entidad con la nueva posicion del punto
        gcd.Drawing.iEntity = clsMouseTracking.CheckBestPOI(Me.SelEndXr, Me.SelEndYr)

        If (gcd.Drawing.iEntity[2] > 0) Then

            Me.SelEndXr = gcd.Drawing.iEntity[0]
            Me.SelEndYr = gcd.Drawing.iEntity[1]

            ' Else
        Else                                     ' puedo hacer ortogonal
            If gcd.Orthogonal Then          ' hablame de operadores logicos

                If Abs(Me.SelEndX - Me.SelStartX) > Abs(Me.SelEndY - Me.SelStartY) Then ' prevalece X
                    Me.SelEndYr = Me.SelStartYr

                Else
                    Me.SelEndXr = Me.SelStartXr
                Endif

            End If

        End If        '
        If GripCopying Then

        Else

        Endif
        GripEdit
        DrawingAids.txtFrom = GripPoint.ToolTip

    Else If Me.Active And PanActive Then
        ' B.3 ActionActive = ActionPanActive: mando la coordenada a cadPan
        ' (ni siquiera deberiamos estar aca, deberiamos estar en cadPan.class)
    Else
        ' busco algun grip
        GripHovered = FindGrip(Me.SelEndXr, Me.SelEndYr)
        ' B.4 ActionActive = 0: nada

        If gcd.Drawing.HoveredEntity Then
            If Config.ShowEntityInspector Then FInspector.Run(gcd.Drawing.HoveredEntity)
        Else
            FInspector.Close()
        Endif
    End If

    ' Else

    ' End If

End

Public Function KeyText(EnteredText As String)

    ' in this case, we try to run the command wich is a class
    Dim o As Object, RunWith As String, c As Class

    EnteredText = UCase(Trim(EnteredText))
    If EnteredText = "" Then Return                                ' no BS here

    Select Case EnteredText
        Case "_CANCEL"
            Me.Cancel
        Case "R"
            Me.SelectMode = Me.SelectModeRem
        Case "A"
            Me.SelectMode = Me.SelectModeAdd
        Case "N"                ' seleccion previa
            gcd.Drawing.Sheet.EntitiesSelected.Clear' = gcd.Drawing.Sheet.EntitiesSelectedPrevious.Copy()
            clsEntities.GLGenDrawListSel()
            gcd.redraw

        Case "P"                ' seleccion previa
            gcd.Drawing.Sheet.EntitiesSelected = gcd.Drawing.Sheet.EntitiesSelectedPrevious.Copy()
            clsEntities.GLGenDrawListSel()
            gcd.redraw

        Case "CENTER"
            gcd.PanTo(0, 0)
            gcd.Redraw
            'gcd.regen
        Case "REGEN"
            gcd.regen
        Case "REGENALL"
            gcd.PanToOrigin
            gcd.regen
        Case "REDRAW"
            gcd.Redraw

        Case Else
            'o = cadDimension ' a test

            ' Intercepto Alias
            If Config.oAlias.Exist(Lower(EnteredText)) Then
                EnteredText = Upper(Config.oAlias[Lower(EnteredText)])
            Endif

            If gcd.CCC.Exist(EnteredText) Then
                o = gcd.CCC[EnteredText]
            Else

                DrawingAIds.ErrorMessage = "Command not recognized"
                Return
            Endif

            ' check if the class needs to be run trough other
            If o.usewith = "" Then                        ' its a tool
                gcd.clsJobPrevious = gcd.clsJob
                gcd.clsJob = o
                gcd.clsJob.start

            Else                                                    ' its propably an eentity
                gcd.clsJobPrevious = gcd.clsJob
                gcd.clsJob = gcd.CCC[o.usewith]
                gcd.clsJob.start(o)

            End If

    End Select
    gcd.Drawing.iEntity.Clear
    Return

    ' TODO: dejar comentado mientras hagamos debug
    '' catch

    DrawingAIds.ErrorMessage = "Command not recognized"
    '
    '

End

Public Sub Draw()

    Dim flxPoly As New Float[]
    Dim iColor As Integer

    Super.Draw()

    If Me.SelectCrossing Then iColor = Color.red Else iColor = Color.Green
    If RectActive Then

        ' si estamos dentro un viewport no hay nada que dibujar, porque no estamos seleccionando nada
        If gcd.Drawing.Sheet.Viewport Then Return
        If Me.SelectType = Me.SelectTypeRect Or Me.SelectType = Me.SelectTypeSingleAndRect Then
            Me.SelectionPoly.Clear  ' aprovecho

            glx.Rectangle2D(Me.SelStartXr, Me.SelStartYr, Me.SelEndXr - Me.SelStartXr, Me.SelEndyr - Me.SelStartYr, Color.RGB(224, 220, 207, 215),,,, iColor, 1, gcd.stiDashedSmall, 2)

            Return
        Else If Me.SelectType = Me.SelectTypePoly Then

            fMain.PopupMenu = ""                    ' no hay menu contextual

            ' como pude habver cambiado en este momento el modo de seleccion, chequeo
            If Me.SelectionPoly.Count = 0 Then
                Me.SelectionPoly.Add(Me.SelStartXr)
                Me.SelectionPoly.Add(Me.SelStartYr)
            Endif
            flxPoly.Clear
            flxPoly.Insert(Me.SelectionPoly.Copy())
            flxPoly.Add(Me.SelEndXr)
            flxPoly.Add(Me.SelEndyr)
            flxPoly.Add(Me.SelectionPoly[0])
            flxPoly.Add(Me.SelectionPoly[1])
            glx.PolyLines(flxPoly, Color.red, 1, gcd.stiDashedSmall)
        Else
            Me.SelectionPoly.Clear

        End If

    End If

    '' No vamos a dibujar nada relativo a los grips si estamsos selecionando para alguna Tool
    If gcd.clsJobCallBack Then Return

    DrawingAids.DrawGrips(gcd.Drawing.Sheet.Grips)

    If Me.EntityForEdit Then Gcd.CCC[Me.EntityForEdit.Gender].Draw(Me.EntityForEdit)
    If Me.OriginalEntityForEdit Then
        If GripCopying Then
        Else
            Gcd.CCC[Me.OriginalEntityForEdit.Gender].DrawShadow(Me.OriginalEntityForEdit)
        End If
    End If
    If GripPoint Then

        Gcd.CCC[GripPoint.AsociatedEntity.Gender].DrawEditing(GripPoint)
        If GripCopying Then
        Else

            Gcd.CCC[GripPoint.AsociatedEntity.Gender].DrawShadow(Me.EntityForEdit)
        Endif
        DrawingAids.DrawSnapText()

    Else If GripHovered Then

        DrawingAids.Helper.texto = GripHovered.ToolTip
        DrawingAids.Helper.dX = 15
        DrawingAids.Helper.dY = 15
    Else
        DrawingAids.Helper.texto = ""

    Endif

End

Public Sub GripEdit()

    If GripPoint Then
        If GripCopying Then
            ' GripPoint.X = Me.SelEndXr
            ' GripPoint.Y = Me.SelEndYr
            ' gcd.CCC[GripPoint.AsociatedEntity.Gender].translate(GripPoint.AsociatedEntity, Me.SelEndXr - Me.SelStartXr, Me.SelEndYr - Me.SelStartYr)

        Endif

        GripPoint.X = Me.SelEndXr
        GripPoint.Y = Me.SelEndYr
        gcd.CCC[GripPoint.AsociatedEntity.Gender].GripEdit(GripPoint)
        gcd.CCC[GripPoint.AsociatedEntity.Gender].finish(GripPoint.AsociatedEntity)
        gcd.redraw

    Endif

End

Public Function FindGrip(x As Float, y As Float) As Grip

    Dim g As Grip

    For Each g In gcd.Drawing.Sheet.Grips
        If puntos.Around(x, y, g.x, g.y, gcd.Metros(Config.GripProximityDistance)) Then

            Return g
        Endif
        '
    Next
    DrawingAids.txtFrom = ""
    Return Null

End

Public Sub KeyDown(iCode As Integer)

    If iCode = Key.ControlKey Then
        GripCopying = True
        fMain.GLArea1.Cursor = gcd.CursorSelectAdd
        SelectMode = SelectModeAdd
    Else If iCode = Key.ShiftKey Then
        GripCopying = False
        fMain.GLArea1.Cursor = gcd.CursorSelectRem
        SelectMode = SelectModeRem
    Else If iCode = Key.AltKey Then
        GripCopying = False
        fMain.GLArea1.Cursor = gcd.CursorSelectXchange
    Endif

End

Public Sub KeyUp(iCode As Integer)

    If iCode = Key.ControlKey Then
        GripCopying = False
        fMain.GLArea1.Cursor = gcd.CursorCross
        SelectMode = SelectModeNew
    Else If iCode = Key.ShiftKey Then
        GripCopying = False
        SelectMode = SelectModeNew
        fMain.GLArea1.Cursor = gcd.CursorCross
    Else If iCode = Key.AltKey Then
        GripCopying = False
        SelectMode = SelectModeNew
        fMain.GLArea1.Cursor = gcd.CursorCross
    Endif

End
