' Gambas class file

' GambasCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA

' Scale from a certain point
' Tool maintained by Terco
Inherits ToolsBase
Create Static
Public Const Gender As String = "SCALE"

Public ScaleFactor As Float

Public Function Start(Optional ElemToBuild As Variant, Optional _Mode As Integer = 0) As Boolean
    ' Llamada por FCAD al inicio de la aplicacion de esta herramienta

    ' Aprovechamos para establecer los helpers (comentarios de ayuda en pantalla)
    Me.PointsDone = 0
    Me.PointsTotal = 2
    Run
    Me.Active = True
    gcd.Drawing.Sheet.GlSheet.PopupMenu = ""
    fmain.PopupMenu = ""

End

'' cadSelection o algun otro proceso nos devuelve el control
Public Sub Run()

    If gcd.Drawing.Sheet.EntitiesSelected.Count = 0 Then                                     ' we have no elements in the selection

        Me.Prompt = ("Select entities")

        gcd.clsJobCallBack = Me
        gcd.clsJob = cadSelection

        cadSelection.ReturnOnFirstSelection = False

    Else                                                                    ' need the first point

        'DrawingAids.CmdLineHelper = DrawingAids.CmdLineHelper & ": " & ("Base point")
        Me.Prompt = Str(gcd.Drawing.Sheet.EntitiesSelected.Count) & " " & ("elements") & "-> " & ("Base point") & ":"

        Me.NextParamType = "P"

        Me.PointsDone = 1

        gcd.SnapMode = Config.SnapModeSaved                 ' vuelvo al Snap Guardado

        clsEntities.GLGenDrawListSel(0)                     ' genero drawing lists
        clsEntities.GLGenDrawListAll(True)

        ' gcd.Drawing.uUndo.OpenUndoStage("Move entities", Undo.TypeModify)
        ' For Each E In gcd.Drawing.EntitiesSelected
        '     gcd.Drawing.uUndo.AddUndoItem(clsEntities.ClonEntity(E, False))
        ' Next
        gcd.Redraw

    Endif

End

Public Function MouseUp()

    Dim i As Integer, E As Entity

    If Me.PointsDone = 1 Then ' acabo de marcar el punto base

        ' ya tengo cosas seleccionadas
        Me.Prompt = Str(gcd.Drawing.Sheet.EntitiesSelected.Count) & " " & ("elements") & "-> " & ("Final point")

        ' ' punto real base
        ' Me.SelStartXr = gcd.Near(gcd.Xreal(mouse.x))
        ' Me.SelStartYr = gcd.Near(gcd.Yreal(mouse.y))

        ' and we save the mouse click
        Me.SelStartX = mouse.x
        Me.SelStartY = mouse.y

        Me.glTranslate[0] = Me.SelStartXr
        Me.glTranslate[1] = Me.SelStartYr
        Me.glTranslate[2] = 0

        PrepareGlList(Me.SelStartXr, Me.SelStartYr)

        Inc Me.PointsDone
        ' prevenir acciones tontas como hacer click en otro elemento antes de terminar con el actual
        ' TODO: reparar -> gcd.CurrDrawing.DesHabilitarBotones
    Else If Me.PointsDone = 2 Then ' acabo de marcar el punto destino
        ' permitir otros trabajos
        ' TODO: reparar -> gcd.CurrDrawing.HabilitarBotones

        ' we have the point set from MouseMove
        Me.SelEndX = mouse.x
        Me.SelEndY = mouse.y

        Scale(gcd.Drawing.Sheet.EntitiesSelected, Me.SelStartXr, Me.SelStartYr, ScaleFactor)

        Me.Finish()

    Endif
    gcd.Redraw

End

Public Function MouseMove()

    Dim X, Y As Float
    ' we are waiting for a point

    X = gcd.Near(gcd.Xreal(mouse.x))
    Y = gcd.Near(gcd.Yreal(mouse.y))

    ' yo soy el responsable de chequear POI
    If Not gcd.flgSearchingPOI Then
        gcd.Drawing.iEntity = clsMouseTracking.CheckBestPOI(X, Y)

        If (gcd.Drawing.iEntity[2] > 0) Then

            ' esto re enganchado

            X = gcd.Drawing.iEntity[0]
            Y = gcd.Drawing.iEntity[1]
        End If
    End If
    If Me.PointsDone = 1 Then
        Me.SelStartXr = X
        Me.SelStartYr = Y

    Else If Me.PointsDone = 2 Then
        ' we compare Real values from the starting point to the location
        ' represente by the mouse now, taking account that the drawing
        ' could have being moved by the mouse wheel

        ' new Real position is
        Me.SelEndXr = X
        Me.SelEndyr = Y

        '  we need To determine scale factor
        '
        ' lets say is the distance from first click to the current position / 10
        '

        ScaleFactor = (puntos.distancia(mouse.x, mouse.y, Me.SelStartX, Me.SelStartY) - 50) / 50

        Me.glScale[0] = ScaleFactor
        Me.glScale[1] = ScaleFactor
        Me.glScale[2] = ScaleFactor

    End If
    gcd.Redraw

End

Public Sub Scale(cEntities As Collection, dx As Float, dy As Float, ScaleFactor As Float)

    Dim e As Entity
    ' Recolecto la ultima seleccion
    gcd.Drawing.Sheet.EntitiesSelectedPrevious = gcd.Drawing.Sheet.EntitiesSelected.Copy()

    gcd.Drawing.uUndo.OpenUndoStage("Scale", Undo.TypeModify)
    For Each e In cEntities
        gcd.Drawing.uUndo.AddUndoItem(e)
        gcd.CCC[e.Gender].Translate(e, -dx, -dy)
        gcd.CCC[e.Gender].Scale(e, ScaleFactor, ScaleFactor)
        gcd.CCC[e.Gender].Translate(e, dx, dy)
        gcd.CCC[e.Gender].buildgeometry(e)
        clsEntities.glGenDrawList(e)
    Next
    gcd.Drawing.uUndo.CloseUndoStage()

End

Public Sub PrepareGlList(x As Float, y As Float)

    Dim e As Entity

    gl.PushMatrix
    gl.NewList(gcd.Drawing.GlListEntitiesSelected, gl.COMPILE)                      ' genero los graficos dentro de la lista
    gl.Translatef(-x, -y, 0)
    gl.Translatef(gcd.Drawing.Sheet.PanBaseRealX, gcd.Drawing.Sheet.PanBaseRealY, 0)
    For Each E In gcd.Drawing.Sheet.EntitiesSelected
        gl.CallList(E.glDrwList)
    Next
    gl.EndList
    gl.PopMatrix

End

Public Sub Draw()

    gl.PushMatrix
    gl.Translatef(Me.glTranslate[0], Me.glTranslate[1], Me.glTranslate[2])
    gl.Scalef(Me.glScale[0], Me.glScale[1], Me.glScale[2])
    gl.CallList(gcd.Drawing.GlListEntitiesSelected)
    gl.PopMatrix

End
