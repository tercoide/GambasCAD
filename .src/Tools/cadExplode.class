' Gambas class file

' GambasCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA

Inherits ToolsBase
Create Static
Public Const Gender As String = "EXPLODE"

Public Function Start(Optional ElemToBuild As Variant, Optional _Mode As Integer = 0) As Boolean

    ' Aprovechamos para establecer los helpers (comentarios de ayuda en pantalla)

    If gcd.Drawing.Sheet.EntitiesSelected.Count = 0 Then                                     ' we have no elements in the selection

        Me.Prompt = ("Select an entity")

        gcd.clsJobCallBack = Me
        gcd.clsJob = cadSelection

        cadSelection.ReturnOnFirstSelection = True

    Else                                                                    ' EXPLOTA !!!

        EXPLODE

    Endif

    gcd.Drawing.Sheet.GlSheet.PopupMenu = ""
    fmain.PopupMenu = ""

End

'' cadSelection o algun otro proceso nos devuelve el control
Public Sub Run()

    If gcd.Drawing.Sheet.EntitiesSelected.Count = 0 Then                                     ' we have no elements in the selection

        Me.Finish

    Else                                                                    ' need the first point

        EXPLODE

    Endif

End

Private Sub Explode()

    Dim i As Integer
    Dim e, e2 As Entity

    gcd.Drawing.uUndo.OpenUndoStage("Explode", Undo.TypeCreate)
    For Each e In gcd.Drawing.Sheet.EntitiesSelected

        Select e.Gender
            Case Like "DIM*", "INSERT"
                ' tengo q crear todas lass entidades del bloque que lo conforma
                ' y eliminar el Insert o Dimension
                ' para ello debo seguir el mismo metodo con que los dibujo
                gcd.Drawing.uUndo.AddUndoItem(e, Undo.TypeDelete)
                Explode_List(e.pBlock.entities, e, gcd.Drawing.Sheet.Entities)

                e.Container.entities.Remove(e.id)       ' obsoleto porque lo borro mas abajo

            Case "LWPOLYLINE"
                gcd.Drawing.uUndo.AddUndoItem(e, Undo.TypeDelete)

                For i = 0 To e.P.max - 3 Step 2

                    e2 = cadLine.NewEntity([e.P[i], e.P[i + 1], e.P[i + 2], e.P[i + 3]], True)
                    cadLine.Finish(e2)
                    gcd.Drawing.uUndo.AddUndoItem(e2, Undo.TypeCreate)

                    clsEntities.glGenDrawList(e2)
                    e.Container.entities.Add(e2, e2.id)

                Next

                e.Container.entities.Remove(e.id)       ' obsoleto porque lo borro mas abajo
            Case "HATCH"
                gcd.Drawing.uUndo.AddUndoItem(e, Undo.TypeDelete)
                Dim oBound As Float[]

                For Each oBound In e.pBlock.Polylines
                    e2 = cadLWPolyline.NewEntity(obound, True)
                    cadLWPolyline.Finish(e2)
                    gcd.Drawing.uUndo.AddUndoItem(e2, Undo.TypeCreate)

                    clsEntities.glGenDrawList(e2)
                    e.Container.entities.Add(e2, e2.id)
                Next
                For i = 0 To e.PolyLine.max - 3 Step 2

                    e2 = cadLine.NewEntity([e.PolyLine[i], e.PolyLine[i + 1], e.PolyLine[i + 2], e.PolyLine[i + 3]], True)
                    cadLine.Finish(e2)
                    gcd.Drawing.uUndo.AddUndoItem(e2, Undo.TypeCreate)

                    clsEntities.glGenDrawList(e2)
                    e.Container.entities.Add(e2, e2.id)

                Next

                e.Container.entities.Remove(e.id)       ' obsoleto porque lo borro mas abajo

            Case Else


                ' lo remuevo de la seleccion
                gcd.Drawing.Sheet.EntitiesSelected.Remove(e.id)

        End Select

    Next

    gcd.Drawing.uUndo.CloseUndoStage

    Me.Finish

End

Private Sub Explode_List(eList As Collection, eParent As Entity, cDestination As Collection, Optional InsertionPlace As Integer = 0, ExplodeInserts As Boolean = False)
    'insertion place:
    ' 0 = entity.P[0],[1]
    ' 1 = entity.pBlock.entities.P[0],[1]
    ' 2 = entity.pBlock.x0,y0

    Dim et, etnew As Entity

    For Each ET In eList
        gcd.Drawing.uUndo.AddUndoItem(et, Undo.TypeCreate)
        cDestination.Add(et, et.Id)
        clsEntities.glGenDrawList(et)

        ' If (et.Gender = "INSERT") And ExplodeInserts Then
        '
        '     If et.pBlock Then Explode_List(et.pBlock.entities, et, cDestination,, ExplodeInserts)
        '
        ' Else
        '
        '     If et.Gender <> "ENDBLK" Then
        '
        '         ' creo una entidad nueva
        '         etnew = clsEntities.ClonEntity(et)
        '         etnew.visible = True
        '         etnew.LineType = eParent.LineType
        '         etnew.colour = eParent.colour
        '         etnew.LineWIdth = eParent.LineWIdth
        '
        '         ' Gcd.CCC[etnew.gender].Scale(etnew, eParent.fParam[cadInsert.ipaEscX], eParent.fParam[cadInsert.ipaEscY])
        '         ' Gcd.CCC[etnew.gender].Rotate(etnew, eParent.fParam[cadInsert.ipaRotacion])
        '         ' If InsertionPlace = 0 Then
        '         '     Gcd.CCC[etnew.gender].translate(etnew, eParent.p[0], eParent.p[1])
        '         ' End If
        '
        '         Gcd.CCC[etnew.gender].Finish(etnew)
        '
        '         cDestination.Add(etnew, etnew.Id)
        '     End If
        ' End If

    Next
    cDestination.Remove(eParent.Id)

End
