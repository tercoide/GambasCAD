' Gambas class file

' GambasCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA

' Tool maintained by Terco
Create Static
Create Private
Public Const Gender As String = "TOOLSBASE"
Public Const USEWITH As String = ""
' Add more if needed

Public SelStartX As Integer                         ' Sel = selection, where? Start/End , axis? X/Y
Public SelStartY As Integer
Public SelEndX As Integer
Public SelEndy As Integer

Public SelStartPanX As Integer                         ' Sel = selection, where? Start/End , axis? X/Y
Public SelStartPanY As Integer

Public SelStartXr As Float                          ' same but in real space, METERS not pixel
Public SelStartYr As Float
Public SelEndXr As Float
Public SelEndyr As Float

Public StartXr As Float                          ' same but in real space, METERS not pixel
Public StartYr As Float
Public EndXr As Float
Public Endyr As Float

Public LastX As Float               ' change in MouseMove/MouseUp
Public LastY As Float

Public MouseX As Integer               ' change in MouseMove/MouseUp
Public MouseY As Integer
Public MouseButton As Integer
Public MouseFakeClick As Boolean = False

Public PointsDone As Integer
Public PointsTotal As Integer
Public NextParamType As String          ' What kind of input the element expects P=point, F=float, C=color, S=string, M=mixed either Point, or Float that is taken from Max(Px-Px', Pz-Pz')
Public NextParamDefault As Variant      ' default value
Public NextParam As String              ' Una descripcion de lo que esperamos: _BASe point, _ADDentities, _REMove entities
Public Prompt As String

Public Active As Boolean = False
Public PoiChecking As Boolean = False
Public EntityChecking As Boolean = False
Public Mode As Integer
Public EntityForEdit As Entity
Public OriginalEntityForEdit As Entity

Public MenuRightClick As String

Public inxSelected As New Integer[]

' this affects the gl Drawing list
Public glTranslate As New Float[]         ' dX, dY, dZ
Public glRotate As New Float[]            ' rX, rY, rZ
Public glAngle As Float                   ' deg
Public glScale As New Float[]             ' sX, sY, sZ

Public cursorX As Integer
Public cursory As Integer

Public Const ContextMenu As String = ("Finish;_FINISH;;;Cancel;_CANCEL;;") ' el menu para el boton derecho, los comandos en mayusculas NO se traducen

Public Sub _new()

    Me.glTranslate.Insert([0.0, 0.0, 0.0])         ' dX, dY, dZ
    Me.glRotate.Insert([0.0, 0.0, 1.0])            ' rX, rY, rZ
    Me.glAngle = 0                           ' deg
    Me.glScale.Insert([1.0, 1.0, 1.0])             ' sX, sY, sZ

End

Public Function Start(Optional ElemToBuild As Variant, _mode As Integer = 0) As Boolean

    Me.PointsDone = 0
    Me.mode = _mode
    ' Utils.MenuMaker(fMain, "mToolsBase", Me.ContextMenu)
    ' gcd.Drawing.GLAreaInUse.PopupMenu = "mToolsBase"

End

Public Sub Draw()               ' called by gcd.CurrDrawing.drwArea_Draw

    gl.Translatef(gcd.Drawing.Sheet.PanBaseRealX, gcd.Drawing.Sheet.PanBaseRealY, 0)
    gl.PushMatrix
    gl.Translatef(glTranslate[0], glTranslate[1], glTranslate[2])
    gl.Rotatef(glAngle, glRotate[0], glRotate[1], glRotate[2])
    gl.Scalef(glScale[0], glScale[1], glScale[2])
    gl.CallList(gcd.Drawing.GlListEntitiesSelected)
    gl.PopMatrix
    gl.Translatef(-gcd.Drawing.Sheet.PanBaseRealX, -gcd.Drawing.Sheet.PanBaseRealY, 0)

End

Public Sub KeyPress(iCode As Integer, sKey As String)

End

Public Sub KeyDown(iCode As Integer)

End

Public Sub KeyUp(iCode As Integer)

End

' esto viene despues de un <enter>
Public Function KeyText(EnteredText As String)
    ' Lets see what are we expecting

    Dim Xt, yt As Float, ErrTxt As String, Relative As Boolean

    ' primero veo si el entorno nos pide algo
    Select Case UCase(EnteredText)
        Case "_CANCEL"
            Me.Cancel
            Return
        Case "_FINISH"
            Me.Finish
            Return

            ' agregar o eliminar entidades de la seleccion
        Case "_ADD"

            gcd.clsJobPrevious = gcd.clsJob
            gcd.clsJob = cadSelection
            cadSelection.Mode = cadSelection.ModeAddEntities

        Case "_REM", "_REMOVE"
            gcd.clsJobPrevious = gcd.clsJob
            gcd.clsJob = cadSelection
            cadSelection.Mode = cadSelection.ModeRemoveEntities

            ' Snap points
        Case "_MIDPOINT", "_MID"
            gcd.SnapMode = gcd.poiMIdPoint
        Case "_ENDPOINT", "_END"
            gcd.SnapMode = gcd.poiEndPoint
        Case "_PERPENDICULAR", "_PER"
            gcd.SnapMode = gcd.poiPerpendicular
        Case "_NEAREST", "_NEA"
            gcd.SnapMode = gcd.poiNearest
        Case "_CENTER", "_CEN"
            gcd.SnapMode = gcd.poiCenter
        Case "_INTERSECTION", "_INT"
            gcd.SnapMode = gcd.poiIntersection
        Case "_BASEPOINT", "_BAS"
            gcd.SnapMode = gcd.poiBasePoint
        Case "_TANGENT", "_TAN"
            gcd.SnapMode = gcd.poiTangent
        Case "_QUADRANT", "_QUA"
            gcd.SnapMode = gcd.poiQuadrant
    End Select

    If gcd.IsPoint(EnteredText) Then
        errtxt = ", expected a valId point like 12.4,9.5  or @12.34,10.5"
        ' lets filter
        EnteredText = Trim$(UCase$(EnteredText))
        ' So we expect a position x,y , but in some cases it can be
        ' C = close
        ' U = undo, delete last segment
        ' and others

        ' an X,Y or @X,Y

        If InStr(EnteredText, "@") > 0 Then    ' may be a point
            Relative = True
            EnteredText = Replace(EnteredText, "@", "")
        Endif
        Xt = CFloat(Split(EnteredText, ",")[0])
        yt = CFloat(Split(EnteredText, ",")[1])

        If Relative Then
            xt += Me.LastX
            yt += Me.LastY

        Endif
        Me.LastX = xt
        Me.LastY = yt

        ' last point
        gcd.Drawing.LastPoint.Clear
        gcd.Drawing.LastPoint.Insert([xt, yt])

        Me.NewParameter("point", gcd.Drawing.LastPoint, True)
    Else
        Me.NewParameter("text", EnteredText, True)
    End If
    ' Case "T"
    '     errtxt = ", expected text, not a point"
    '     ' its a valid input?
    '     If EnteredText = "" Then
    '
    '         sText = ParamDefault[clsjob.StepsDone]
    '
    '     Else
    '
    '         sText = EnteredText
    '
    '     End If
    '
    '     If elem.Gcd.CCC[e.gender].NewParameter(elem, ["text", sText], True) Then AdvanceStep
    '
    ' Case "F", "M", "A", "L", "R"                ' Float, Mixed, Angle, Longitud
    '     errtxt = "enter a valid text size"
    '
    '     If EnteredText = "" Then
    '         Try bResult = elem.Gcd.CCC[e.gender].NewParameter(elem, ["float", ParamDefault[elem.Gcd.CCC[e.gender].StepsDone]], True)
    '
    '     Else
    '
    '         bResult = elem.Gcd.CCC[e.gender].NewParameter(elem, ["float", CFloat(EnteredText)], True)
    '
    '     Endif
    '
    '     If bResult Then AdvanceStep
    '
    ' Case "C"                                ' color
    '     If Dialog.SelectColor() Then
    '         elem.fParam[iFloat] = CFloat(Dialog.Color)
    '         Inc iFloat
    '         AdvanceStep
    '
    '     Endif
    '     Key.Cod

End

Public Sub NewParameter(tipo As String, vValor As Variant, Optional Definitive As Boolean = False)

End

Public Sub DblClick()
    ' veo si encuentro una entidad debao del mouse

    Dim v As Viewport

    Me.SelStartX = mouse.X
    Me.SelStartY = mouse.Y
    Me.SelStartXr = gcd.Xreal(Me.SelStartX)
    Me.SelStartYr = gcd.Yreal(Me.SelStartY)

    'clsMouseTracking.CheckAboveEntity(gcd.Xreal(Mouse.x), gcd.Yreal(Mouse.y))

    If gcd.Drawing.Sheet.Viewport Then

        ' si el click esta fuera del viewport, lo desestimo
        If Me.SelStartXr < gcd.Drawing.Sheet.Viewport.X0 Or Me.SelStartXr > gcd.Drawing.Sheet.Viewport.X1 Or Me.SelStartYr < gcd.Drawing.Sheet.Viewport.Y0 Or Me.SelStartYr > gcd.Drawing.Sheet.Viewport.Y1 Then
            gcd.Drawing.Sheet.Viewport = Null ' Desactivo el viewport
        End If
    Endif

    ' ahora veo si el click esta dentro de algun viewport
    For Each v In gcd.Drawing.Sheet.Viewports
        If Me.SelStartXr >= v.X0 And Me.SelStartXr <= v.X1 And Me.SelStartYr >= v.Y0 And Me.SelStartYr <= v.Y1 Then
            gcd.Drawing.Sheet.Viewport = v ' Activo el viewport
        End If
    Next

End

Public Sub MouseUp()

    Dim x, y As Float

    If Mouse.Right Then
        Me.NewParameter("action", "_CANCEL")
        Return
    Endif

    X = gcd.Xreal(Mouse.X)
    Y = gcd.Yreal(Mouse.Y)

    ' yo soy el responsable de chequear POI
    If Not gcd.flgSearchingPOI Then
        gcd.Drawing.iEntity = clsMouseTracking.CheckBestPOI(x, Y)
        If (gcd.Drawing.iEntity[2] > 0) Then

            ' esto re enganchado

            X = gcd.Drawing.iEntity[0]
            Y = gcd.Drawing.iEntity[1]

        End If
    End If

    X = gcd.Near(X)
    Y = gcd.Near(Y)

    If Me.PointsDone > 0 Then ' puedo buscar un ortogonal
        If gcd.Orthogonal Then

            If Abs(x - LastX) > Abs(Y - LastY) Then ' X prevails

                y = LastY

            Else

                X = LastX

            Endif

        End If
    End If

    LastX = X
    LastY = y
    Me.NewParameter("point", [LastX, LastY], True)

End
'

Public Sub MouseMove()

    Dim x, y As Float

    X = gcd.Xreal(Mouse.X)
    Y = gcd.Yreal(Mouse.Y)

    ' yo soy el responsable de chequear POI
    If Not gcd.flgSearchingPOI Then
        gcd.Drawing.iEntity = clsMouseTracking.CheckBestPOI(x, Y)
        If (gcd.Drawing.iEntity[2] > 0) Then

            ' esto re enganchado

            X = gcd.Drawing.iEntity[0]
            Y = gcd.Drawing.iEntity[1]

        End If
    End If

    X = gcd.Near(X)
    Y = gcd.Near(Y)

    If Me.PointsDone > 0 Then ' puedo buscar un ortogonal
        If gcd.Orthogonal Then

            If Abs(x - LastX) > Abs(Y - LastY) Then ' X prevails

                y = LastY

            Else

                X = LastX

            Endif

        End If
    End If
    Me.NewParameter("point", [X, Y])

End

Public Sub MouseDown()
    ' ' ex Public Sub drwArea_MouseUp()
    '
    ' ' "Los IF son mas rapidos" - Autor Anonimo
    '
    ' ' los rigth clicks se manejan en fMain , ni las herramientas ni las entidades los necesitan

    If Mouse.Right Then                ' rigth clicks means finish what you're doing rigth now and go back to the previous Job
        ' the Finish() sub will do this in a good manner
        If gcd.clsJob.gender = "BUILDER" Then

            gcd.clsJob.KeyText("U")

        Else If gcd.clsJob.gender = "SELECT" Then

            gcd.clsJob = gcd.clsJobPrevious
            gcd.clsJob.Start()

            ' Else    ' es una tool
            '
            '     gcd.clsJob.finish
            '     gcd.clsJobPrevious = gcd.clsJob
            '     gcd.clsJob = cadSelection
            '     gcd.clsJob.start()

        Endif

    Else If Mouse.Left Then

        'gcd.clsJob.MouseUp(mouse.x, mouse.y)

        ' ESTO SE MANEJA A NIVEL FMain 6/11/23
        ' Else If Mouse.MIddle Then
        '
        '     If gcd.clsJob.gender <> "PAN" Then
        '         gcd.clsJobPreZoom = gcd.clsJob
        '         gcd.clsJob = cadPan
        '         gcd.clsJob.Start()
        '         ' glarea1.Refresh  ' glarea1.Refresh
        '         '
        '         '
        '     Else
        '
        '         gcd.clsJob = gcd.clsJobPreZoom
        '         gcd.clsJob.start()
        '
        '     End If

    End If

    gcd.redraw

End

' El objetivo es que el zoom dinamico se haga manteniendo el dibujo que esta en la pos del mouse
Public Sub MouseWheel()

    Dim px, py, dx, dy, factor As Float
    Dim outsIde As Boolean

    If gcd.Drawing.Sheet.Viewport Then
        ' si el click esta fuera del viewport, lo desestimo
        If gcd.Xreal(mouse.X) < gcd.Drawing.Sheet.Viewport.X0 Or gcd.Xreal(mouse.X) > gcd.Drawing.Sheet.Viewport.X1 Or gcd.Yreal(mouse.Y) < gcd.Drawing.Sheet.Viewport.Y0 Or gcd.Yreal(mouse.Y) > gcd.Drawing.Sheet.Viewport.Y1 Then
            outsIde = True
        Else
            outsIde = False
        End If

    Else
        outsIde = True
    End If

    If outsIde Then

        ' TODO: revisar la siguiente linea
        'If gcd.Pixels(FMain.GridSpacing) < 5 Then FMain.GridActive = False Else FMain.GridActive = True
        '
        px = gcd.Xreal(Mouse.x) ' posicion real en donde esta el mouse, previo al zoom
        py = gcd.Yreal(Mouse.y)

        ' TODO: , redondear para que la escala sea 1:100 1:75 1:50 etc

        factor = (1 + 0.075 * Mouse.Delta)

        gcd.Drawing.Sheet.ScaleZoom = gcd.Drawing.Sheet.ScaleZoom * factor

        dx = gcd.Xreal(Mouse.x) ' posicion real en donde esta el mouse, posterior al zoom
        dy = gcd.Yreal(Mouse.y)

        ' pero con ciertos limites TODO: imponer
        ' If ScaleZoom < 0.001 Then ScaleZoom = 0.001
        ' If ScaleZoom > 50 Then ScaleZoom = 50

        ' nuevo metodo (el Pan esta en pixels)
        gcd.Drawing.Sheet.PanX += gcd.pixels(dx - px)
        gcd.Drawing.Sheet.PanY += gcd.pixels(dy - py)

        gcd.flgNewPosition = True
    Else

        '
        px = gcd.Xreal(Mouse.x) ' posicion real en donde esta el mouse, previo al zoom
        py = gcd.Yreal(Mouse.y)

        px -= gcd.Drawing.Sheet.Viewport.X0
        py -= gcd.Drawing.Sheet.Viewport.Y0

        ' TODO: , redondear para que la escala sea 1:100 1:75 1:50 etc

        factor = (1 + 0.075 * Mouse.Delta)

        gcd.Drawing.Sheet.Viewport.ScaleZoom *= factor

        dx = gcd.Xreal(Mouse.x) - gcd.Drawing.Sheet.Viewport.X0 ' posicion real en donde esta el mouse, posterior al zoom
        dy = gcd.Yreal(Mouse.y) - gcd.Drawing.Sheet.Viewport.Y0

        ' pero con ciertos limites TODO: imponer
        ' If ScaleZoom < 0.001 Then ScaleZoom = 0.001
        ' If ScaleZoom > 50 Then ScaleZoom = 50

        ' nuevo metodo (el Pan esta en pixels)
        gcd.Drawing.Sheet.Viewport.PanX += gcd.pixels(dx - px)
        gcd.Drawing.Sheet.Viewport.PanY += gcd.pixels(dy - py)

    End If
    gcd.redraw 'glarea1.Refresh

End

Public Sub Finish()

    gl.DeleteLists(gcd.Drawing.GlListEntitiesSelected, 1)
    Me.glAngle = 0
    Me.glTranslate[0] = 0
    Me.glTranslate[1] = 0
    Me.glTranslate[2] = 0
    Me.glScale[0] = 1
    Me.glScale[1] = 1
    Me.glScale[2] = 1

    clsEntities.glGenDrawListSelected()
    clsEntities.glGenDrawListLAyers()
    clsEntities.DeSelection()
    clsEntities.CollectVisibleEntities()
    gcd.Drawing.RequiresSaving = True
    gcd.Drawing.iEntity.Clear
    gcd.Drawing.iEntity.Insert([0, 0, -1, -1])
    gcd.clsJobPrevious = Me
    gcd.clsJobCallBack = Null
    gcd.clsJob = cadSelection
    gcd.clsJob.start()
    DrawingAIds.CleanTexts
    gcd.StepsDone = 0
    gcd.DrawOriginals = False
    Me.Active = False

    gcd.redraw()

End

Public Sub Cancel()

    gcd.clsJobPrevious = Null
    gcd.clsJobCallBack = Null
    clsEntities.DeSelection()
    gcd.clsJob = cadSelection
    gcd.clsJob.start()
    DrawingAIds.CleanTexts
    gcd.Redraw

End

'' Callback routine
Public Sub Run()

End
