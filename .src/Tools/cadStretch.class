' Gambas class file

' GambasCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA

' Tool maintained by Terco
Inherits ToolsBase
Create Static
Public Const Gender As String = "STRETCH"

Public dX As Float
Public dY As Float

' En esta tool no podemos usar OpenGL para acelerar, pero si podemos generar una lista ocn las entidades que solo se moveran, y dejar solo las que estan parcialmente seleccionadas para
' estirarlas y dibujarlas individualemnte. Dificilmente haya muchas entidades a estirar.

Public Function Start(Optional ElemToBuild As Variant, Optional _Mode As Integer = 0) As Boolean

    Me.PointsDone = 0
    Me.PointsTotal = 2
    Run
    Me.Active = True
    gcd.Drawing.Sheet.GlSheet.PopupMenu = ""
    fmain.PopupMenu = ""

End

'' cadSelection o algun otro proceso nos devuelve el control
Public Sub Run()

    If gcd.Drawing.Sheet.EntitiesSelected.Count = 0 Then                                     ' we have no elements in the selection

        Me.Prompt = ("Select entities")

        gcd.clsJobCallBack = Me
        gcd.clsJob = cadSelection

        cadSelection.ReturnOnFirstSelection = False
        cadSelection.SelectCrossing = True

    Else                                                                    ' need the first point

        'DrawingAids.CmdLineHelper = DrawingAids.CmdLineHelper & ": " & ("Base point")
        Me.Prompt = Str(gcd.Drawing.Sheet.EntitiesSelected.Count) & " " & ("elements") & "-> " & ("Base point") & ":"

        Me.NextParamType = "P"

        Me.PointsDone = 1

        gcd.SnapMode = Config.SnapModeSaved                 ' vuelvo al Snap Guardado

        clsEntities.GLGenDrawListSel()                      ' genero drawing lists
        clsEntities.GLGenDrawListAll(True)

        ' gcd.Drawing.uUndo.OpenUndoStage("Move entities", Undo.TypeModify)
        ' For Each E In gcd.Drawing.EntitiesSelected
        '     gcd.Drawing.uUndo.AddUndoItem(clsEntities.ClonEntity(E, False))
        ' Next
        gcd.Redraw

    Endif

End

' Public Function MouseMove()
'
'     Dim X, Y As Float
'     ' we are waiting for a point
'
'     X = gcd.Near(gcd.Xreal(mouse.x))
'     Y = gcd.Near(gcd.Yreal(mouse.y))
'
'     ' yo soy el responsable de chequear POI
'     If Not gcd.flgSearchingPOI Then
'         gcd.Drawing.iEntity = clsMouseTracking.CheckBestPOI(X, Y)
'
'         If (gcd.Drawing.iEntity[2] > 0) Then
'
'             ' esto re enganchado
'
'             X = gcd.Drawing.iEntity[0]
'             Y = gcd.Drawing.iEntity[1]
'         End If
'     End If
'
'     If Me.PointsDone = 1 Then
'         Me.SelStartXr = X
'         Me.SelStartYr = Y
'
'     Else If Me.PointsDone = 2 Then
'         ' we compare Real values from the starting point to the location
'         ' represente by the mouse now, taking account that the drawing
'         ' could have being moved by the mouse wheel
'
'         ' new Real position is
'         Me.SelEndXr = x
'         Me.SelEndyr = y
'
'         If gcd.Orthogonal Then
'
'             If Abs(Me.SelEndXr - Me.SelStartXr) > Abs(Me.SelEndyr - Me.SelStartYr) Then ' X prevails
'
'                 Me.SelEndyr = Me.SelStartYr
'
'             Else
'
'                 Me.SelEndXr = Me.SelStartXr
'
'             Endif
'
'         End If
'
'         clsEntities.Move(Me.SelEndXr - dX, Me.SelEndyr - dY,, True)
'         dX = Me.SelEndXr
'         dY = Me.SelEndYr
'
'     End If
'     gcd.Redraw
'
' End

Public Sub NewParameter(tipo As String, vValor As Variant, Optional definitive As Boolean = False)

    Select Case LCase(tipo)
        Case "point"
            If definitive Then

                If Me.PointsDone = 1 Then ' acabo de marcar el punto base
                    Inc Me.PointsDone
                    Me.SelStartXr = vValor[0]
                    Me.SelStartYr = vValor[1]

                    Dx = vValor[0]
                    Dy = vValor[1]

                    gcd.DrawOriginals = True

                    ' ya tengo cosas seleccionadas
                    Me.Prompt = Str(gcd.Drawing.Sheet.EntitiesSelected.count) & " " & ("elements") & ": " & ("Final point")

                    ' volvemos el Snap al original
                    gcd.SnapMode = Config.SnapModeSaved

                    ' prevenir acciones tontas como hacer click en otro elemento antes de terminar con el actual
                    ' TODO: reparar -> gcd.CurrDrawing.DesHabilitarBotones
                Else If Me.PointsDone = 2 Then ' acabo de marcar el punto destino
                    ' permitir otros trabajos
                    Me.SelEndXr = vValor[0]
                    Me.SelEndYr = vValor[1]
                    ' we have the point set from MouseMove
                    ' Recolecto la ultima seleccion
                    gcd.Drawing.Sheet.EntitiesSelectedPrevious = gcd.Drawing.Sheet.EntitiesSelected.Copy()

                    clsEntities.Move(Me.SelStartXr - dx, Me.SelStartYr - dy,, True)

                    gcd.Drawing.uUndo.OpenUndoStage("Stretch entities", Undo.TypeModify)
                    clsEntities.Move(Me.SelEndXr - Me.SelStartXr, Me.SelEndyr - Me.SelStartyr,, True, True)
                    gcd.Drawing.uUndo.CloseUndoStage()

                    clsEntities.glGenDrawListSel(True)
                    Me.Finish

                Endif

            Else    ' viene de mmousemoe

                If Me.PointsDone = 2 Then ' puedo redibujar
                    Dx = vValor[0] - Dx
                    Dy = vValor[1] - Dy
                    ' we have the point set from MouseMove
                    clsEntities.Move(Dx, Dy,, True)
                    Dx = vValor[0]
                    Dy = vValor[1]

                    gcd.redraw
                End If
            End If

            ' If Me.PointsDone = 1 Then ' acabo de marcar el punto base
            '     Me.SelStartXr = vValor[0]
            '     Me.SelStartYr = vValor[1]
            '
            '     ' ya tengo cosas seleccionadas
            '     DrawingAIds.Helper.texto = ("Final point")
            '
            '     ' punto real base
            '
            '     Me.LastX = Me.SelStartXr
            '     Me.LastY = Me.SelStartYr
            '     dX = Me.SelStartXr
            '     dY = Me.SelStartYr
            '     ' prevenir acciones tontas como hacer click en otro elemento antes de terminar con el actual
            '     ' TODO: reparar -> gcd.CurrDrawing.DesHabilitarBotones
            '     Inc Me.PointsDone
            ' Else If Me.PointsDone = 2 Then ' acabo de marcar el punto destino
            '     Me.SelEndXr = vValor[0]
            '     Me.SelEndYr = vValor[1]
            '
            '     ' we have the point set from MouseMove
            '     clsEntities.Move(Me.SelEndXr - me.SelStartXr, Me.SelEndyr - me.SelStartYr,, True)
            '
            '     Me.Finish()
            '
            ' Endif

    End Select

End

Private Sub StretchTo(dX As Float, dY As Float)

End

Public Sub Draw()               ' called by gcd.CurrDrawing.drwArea_Draw

    Dim E As Entity

    For Each E In gcd.Drawing.Sheet.EntitiesSelected

        gcd.CCC[e.gender].Draw(E)

    Next
    Super.Draw()

End
