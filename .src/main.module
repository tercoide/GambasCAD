' Gambas module file

' GambasCAD
' Software para diseño CAD
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 2 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA

''TINCHO 2023.05.22 > Config.class implementation
'' Eviado a la clase Config.class
' Public dirResources As String = "/usr/share/gambascad"
' Public dirDwgIn As String = User.Home &/ ".config/GambasCAD/DwgIn"
' Public dirDxfIn As String = User.Home &/ ".config/GambasCAD/DxfIn"
' Public dirDwgOut As String = User.Home &/ ".config/GambasCAD/DwgOut"
' Public dirDxfOut As String = User.Home &/ ".config/GambasCAD/DxfOut"
' Public dirTemplates As String = User.Home &/ ".config/GambasCAD/templates"
' Public dirBlocks As String      ' path to Blocks
''TINCHO 2023.05.22 > Config.class implementation

' file conversion
Public convLibreDWG As Boolean
Public convODA As Boolean
Public convOdaAppImage As Boolean
Public DebugMode As Boolean = True
Public MyLog As File

Public Sub main()

    Dim sFile As String

    ''TINCHO 2023.05.22 > Config.class implementation
    '' Estableciendo los parametros de configuración
    If Exist(User.Home &/ ".config/gambascad/config.json") Then
        Config.Load(User.Home &/ ".config/gambascad/config.json")
    Endif

    Config.Root = User.Home &/ ".config/gambascad"
    Config.Depot = Config.Root &/ "config.json"
    Config.Log = Config.Root &/ "log.txt"
    Config.dirDwgIn = Config.Root &/ "dwgin"
    Config.dirDxfIn = Config.Root &/ "dxfin"
    Config.dirDwgOut = Config.Root &/ "dwgout"
    Config.dirDxfOut = Config.Root &/ "dxfout"
    Config.dirTemplates = Config.Root &/ "templates"
    'Config.dirBlocks = Config.Root &/ "blocks"
    Config.dirPrintStyles = Config.Root &/ "printstyles"
    Config.dirPatterns = Config.Root &/ "patterns"
    Config.dirResources = Config.Root &/ "resources"

    If Config.SplitterH.Count = 0 Then
        Config.SplitterH = [144, 500, 144]
    Endif

    If Config.SplitterV.Count = 0 Then
        Config.SplitterV = [400, 80]
    Endif

    'LoadPatterns2

    Config.Save(Config.Depot)

    ' Public dirResources As String = "/usr/share/gambascad"
    ' Public dirDwgIn As String = User.Home &/ ".config/GambasCAD/DwgIn"
    ' Public dirDxfIn As String = User.Home &/ ".config/GambasCAD/DxfIn"
    ' Public dirDwgOut As String = User.Home &/ ".config/GambasCAD/DwgOut"
    ' Public dirDxfOut As String = User.Home &/ ".config/GambasCAD/DxfOut"
    ' Public dirTemplates As String = User.Home &/ ".config/GambasCAD/templates"
    ' Public dirBlocks As String      ' path to Blocks

    Application.MainWindow = fMain

    Wait

    fSplash.Visible = True

    fSplash.Show

    Wait

    ''TINCHO 2023.05.22 > Config.class implementation
    '' Anualdo: Los recursos se copiaran una unica vez, en la primera ejecucion, en el directorio del usuario.
    ' necesitamo saber desde donde estamos corriendo
    'If Application.Path Like "/usr/bin*" Then
    '    DebugMode = False
    '    gcd.dirResources = "/usr/share/gambascad"
    'Else
    '    DebugMode = True
    '    gcd.dirResources = Application.Path
    'Endif
    ''TINCHO 2023.05.22 > Config.class implementation

    ' Inicializo el programa
    Initialize          ' general init

    'MyLog = Open User.Home &/ ".config/gambascad/log.txt" For Write Create
    ''TINCHO 2023.05.22 > Config.class implementation
    MyLog = Open Config.Log For Write Create

    gcd.debugInfo("Init program - Version " & Application.Version,,, True)
    gcd.debugInfo("Debug mode = " & Str(DebugMode),,, True)

    'fMain.tabFile.Index = 0

    ' leo la configuracion inicial
    'Utils.LoadClass(Config, Config.ConfigFile) ' Deshabilitado, con la nueva configuracion no es necesario.
    InitColors          ' CAD color init
    InitClasses
    InitMenus           ' fMain menus
    loadPrintStyles
    LoadPatterns
    LoadCursors

    ' TODO: DATO INTERESANTE SI LLAMO A LA SIGUIENTE LINEA DESPUES DE Fmain.Run , los graficos se ven opacos
    gcd.Main            ' drawing specific init

    ' armo el combo de colores
    fLayersOnScreen.Run
    gcd.debuginfo("LayersOnScreen initialized OK",,, True)

    fMain.Run
    'Wait
    fmain.Refresh
    'gcd.debuginfo("FMain initialized OK",,, True)

    fSplash.HIde

    'Wait

    If Application.Args.Count > 1 Then
        sFile = Args[1]
        actions.FileOpen(sfile)
    Else
        actions.FileNew
    Endif
    gcd.clsJob.start()
    ' bloques common
    gcd.LoadCommon

    ' glx.Resize(fmain.glarea1)
    ' fmain.glarea1.Refresh
    gcd.redraw

End

Public Sub Initialize()

    Dim aFile As String
    Dim aDirs As String[] = [Config.dirResources &/ "minimal", Config.dirDwgIn, Config.dirDxfIn, Config.dirDwgOut, Config.dirDxfOut, Config.dirPrintStyles, Config.dirTemplates] ' , Config.dirPatterns]
    Dim aTemp As String[] = [Config.dirDwgIn, Config.dirDxfIn, Config.dirDwgOut, Config.dirDxfOut, Config.dirPrintStyles, Config.dirTemplates] ', Config.dirPatterns]
    Dim sDir As String

    '' TERCO lo siguiente me borra los patrones de Hatch, elimino esa parte
    ''TINCHO 2023.05.22 > Config.class implementation
    '' Checking that the necessary directories exist
    For Each sDir In aDirs
        If Not Exist(sDir) Then
            Shell "mkdir -p " & sDir Wait
        Else
            Shell "rm -R " & sDir & "/*" Wait
        Endif
    Next
    ' Copio lo patterns
    If Not Exist(Config.dirPatterns) Then
        Shell "mkdir -p " & Config.dirPatterns Wait
    Endif
    For Each aFile In Dir("./patterns")
        ''TINCHO 2023.05.22 > Config.class implementation
        If Not Exist(Config.dirPatterns &/ aFile) Then
            Copy "./patterns" &/ afile To Config.dirPatterns &/ aFile
        Endif

    Next
    ' Copio lo templates
    For Each aFile In Dir("./minimal")
        ''TINCHO 2023.05.22 > Config.class implementation
        Copy "./minimal" &/ afile To Config.dirTemplates &/ aFile
    Next

    ' External programs availability
    ' libredwg
    If Exist("/usr/local/lib/libredwg.so") Then convLibreDWG = True

    ' ODA
    If Exist("/usr/bin/ODAFileConverter") Then convODA = True

    If Config.FileConversion = "ODA" Then
        If convODA Then
            'nothing
        Else If convLibreDWG Then
            Config.FileConversion = "LibreDWG"
        Else
            ' none available
            Config.FileConversion = ""
        Endif
    Else If Config.FileConversion = "LibreDWG" Then
        If convLibreDWG Then
            'nothing
        Else If convODA Then
            Config.FileConversion = "ODA"
        Else
            ' none available
            Config.FileConversion = ""
        Endif
    Else    ' none selected
        If convODA Then
            Config.FileConversion = "ODA"
        Else If convLibreDWG Then
            Config.FileConversion = "LibreDWG"
        Endif
    Endif

    ''TINCHO 2023.05.22 > Config.class implementation
    'dirBlocks = Config.BlocksLibraryPath

End

Public Sub LoadPatterns()

    Dim s As String[]
    Dim sp, spd As String
    Dim p As HatchPattern

    spd = Config.dirPatterns
    s = Dir(spd, "*.pat")
    If S.Count = 0 Then

        For Each sp In Dir(Application.path &/ "patterns", "*.pat")
            ' p = New HatchPattern
            ' Utils.LoadClass2(p, spd &/ sp)
            ' gcd.HatchPatterns.Add(p, p.Name)
            Try Copy Application.path &/ "patterns" &/ sp To spd &/ sp
        Next

    Endif
    s = Dir(spd, "*.pat")
    For Each sp In s
        ' p = New HatchPattern
        ' Utils.LoadClass2(p, spd &/ sp)
        ' gcd.HatchPatterns.Add(p, p.Name)
        gcd.ImportPAT(spd &/ sp)
    Next

End

Public Sub LoadPatterns2()

    Dim s As String[]
    Dim sp, spd As String
    Dim p As HatchPattern

    spd = Config.dirPatterns
    s = Dir(spd)
    For Each sp In s
        p = New HatchPattern
        Utils.LoadClass2(p, spd &/ sp)
        gcd.HatchPatterns.Add(p, p.Name)
    Next

End

Public Sub SavePatterns()

    Dim s As String[]
    Dim sp As String
    Dim p As HatchPattern

    sp = Config.dirPatterns
    For Each p In gcd.HatchPatterns
        Utils.SaveClass2(p, sp &/ p.Name)
    Next

End

Public Sub LoadPrintStyles()

    Dim s As String[]
    Dim sp, spd As String
    Dim p As PrintStyle

    spd = Config.dirPrintStyles
    s = Dir(spd)
    For Each sp In s
        p = New PrintStyle
        Utils.LoadClass(p, spd &/ sp)
        gcd.PrintStyles.Add(p, p.Name)
    Next

End

Public Sub SavePrintStyles()

    Dim s As String[]
    Dim sp As String
    Dim p As PrintStyle

    sp = Config.dirPrintStyles
    For Each p In gcd.PrintStyles
        Utils.SaveClass(p, sp &/ p.Name)
    Next

End

Public Sub InitClasses()

    Dim cClass As Class
    Dim s, sFinishedClasses As String
    Dim sSplit As New String[]

    sFinishedClasses = "LEADER HATCH POLYLINE ENDBLK SEQEND VERTEX POINT RECTANGLE POLYGON ATTDEF ATTRIB LINE LWPOLYLINE CIRCLE ELLIPSE ARC TEXT MTEXT SPLINE SOLID INSERT DIMENSION DIMENSION_LINEAR DIMENSION_DIAMETER DIMENSION_RADIUS DIMENSION_ANG3PT DIMENSION_ALIGNED DIMENSION_ORDINATE LARGE_RADIAL_DIMENSION ARC_DIMENSION VIEWPORT ARC3POINT"

    sFinishedClasses &= " AREA ARRAY BLOCKS BREAK CHAMFER COPY DIVIDE EDIT ERASE EXPLODE FILLET HATCHBUILDER ENTITYBUILDER LAYERS MIRROR MOVE MTEXTBUILDER OFFSET PAN PROTRACTOR ROTATE RULER SCALE SELECTION STRETCH TRIM ZOOME ZOOMW"

    ' smart
    sFinishedClasses &= " SLAB BIMENTITYBUILDER"

    sSplit = Split(sFinishedClasses, " ")

    For Each s In sSplit
        ' intento crearla
        cClass = Null
        cClass = Class.Load("cad" & s)
        If cClass Then
            gcd.CCC.add(cClass.AutoCreate(), s)

            Debug s
        Else
            Print "WARNING: the Class " & s & " it's not implemented."
        End If

    Next

End

Private Sub InitColors()
    ' Load CAD color into Gambas colors
    ' array index is CAD color, returning Gambas int color

    gcd.gcolor.add(color.rgb(0, 0, 0))
    gcd.gcolor.add(color.rgb(255, 0, 0))
    gcd.gcolor.add(color.rgb(255, 255, 0))
    gcd.gcolor.add(color.rgb(0, 255, 0))
    gcd.gcolor.add(color.rgb(0, 255, 255))
    gcd.gcolor.add(color.rgb(0, 0, 255))
    gcd.gcolor.add(color.rgb(255, 0, 255))
    gcd.gcolor.add(color.rgb(255, 255, 255))
    gcd.gcolor.add(color.rgb(128, 128, 128))
    gcd.gcolor.add(color.rgb(192, 192, 192))
    gcd.gcolor.add(color.rgb(255, 0, 0))
    gcd.gcolor.add(color.rgb(255, 127, 127))
    gcd.gcolor.add(color.rgb(165, 0, 0))
    gcd.gcolor.add(color.rgb(165, 82, 82))
    gcd.gcolor.add(color.rgb(127, 0, 0))
    gcd.gcolor.add(color.rgb(127, 63, 63))
    gcd.gcolor.add(color.rgb(76, 0, 0))
    gcd.gcolor.add(color.rgb(76, 38, 38))
    gcd.gcolor.add(color.rgb(38, 0, 0))
    gcd.gcolor.add(color.rgb(38, 19, 19))
    gcd.gcolor.add(color.rgb(255, 63, 0))
    gcd.gcolor.add(color.rgb(255, 159, 127))
    gcd.gcolor.add(color.rgb(165, 41, 0))
    gcd.gcolor.add(color.rgb(165, 103, 82))
    gcd.gcolor.add(color.rgb(127, 31, 0))
    gcd.gcolor.add(color.rgb(127, 79, 63))
    gcd.gcolor.add(color.rgb(76, 19, 0))
    gcd.gcolor.add(color.rgb(76, 47, 38))
    gcd.gcolor.add(color.rgb(38, 9, 0))
    gcd.gcolor.add(color.rgb(38, 23, 19))
    gcd.gcolor.add(color.rgb(255, 127, 0))
    gcd.gcolor.add(color.rgb(255, 191, 127))
    gcd.gcolor.add(color.rgb(165, 82, 0))
    gcd.gcolor.add(color.rgb(165, 124, 82))
    gcd.gcolor.add(color.rgb(127, 63, 0))
    gcd.gcolor.add(color.rgb(127, 95, 63))
    gcd.gcolor.add(color.rgb(76, 38, 0))
    gcd.gcolor.add(color.rgb(76, 57, 38))
    gcd.gcolor.add(color.rgb(38, 19, 0))
    gcd.gcolor.add(color.rgb(38, 28, 19))
    gcd.gcolor.add(color.rgb(255, 191, 0))
    gcd.gcolor.add(color.rgb(255, 223, 127))
    gcd.gcolor.add(color.rgb(165, 124, 0))
    gcd.gcolor.add(color.rgb(165, 145, 82))
    gcd.gcolor.add(color.rgb(127, 95, 0))
    gcd.gcolor.add(color.rgb(127, 111, 63))
    gcd.gcolor.add(color.rgb(76, 57, 0))
    gcd.gcolor.add(color.rgb(76, 66, 38))
    gcd.gcolor.add(color.rgb(38, 28, 0))
    gcd.gcolor.add(color.rgb(38, 33, 19))
    gcd.gcolor.add(color.rgb(255, 255, 0))
    gcd.gcolor.add(color.rgb(255, 255, 127))
    gcd.gcolor.add(color.rgb(165, 165, 0))
    gcd.gcolor.add(color.rgb(165, 165, 82))
    gcd.gcolor.add(color.rgb(127, 127, 0))
    gcd.gcolor.add(color.rgb(127, 127, 63))
    gcd.gcolor.add(color.rgb(76, 76, 0))
    gcd.gcolor.add(color.rgb(76, 76, 38))
    gcd.gcolor.add(color.rgb(38, 38, 0))
    gcd.gcolor.add(color.rgb(38, 38, 19))
    gcd.gcolor.add(color.rgb(191, 255, 0))
    gcd.gcolor.add(color.rgb(223, 255, 127))
    gcd.gcolor.add(color.rgb(124, 165, 0))
    gcd.gcolor.add(color.rgb(145, 165, 82))
    gcd.gcolor.add(color.rgb(95, 127, 0))
    gcd.gcolor.add(color.rgb(111, 127, 63))
    gcd.gcolor.add(color.rgb(57, 76, 0))
    gcd.gcolor.add(color.rgb(66, 76, 38))
    gcd.gcolor.add(color.rgb(28, 38, 0))
    gcd.gcolor.add(color.rgb(33, 38, 19))
    gcd.gcolor.add(color.rgb(127, 255, 0))
    gcd.gcolor.add(color.rgb(191, 255, 127))
    gcd.gcolor.add(color.rgb(82, 165, 0))
    gcd.gcolor.add(color.rgb(124, 165, 82))
    gcd.gcolor.add(color.rgb(63, 127, 0))
    gcd.gcolor.add(color.rgb(95, 127, 63))
    gcd.gcolor.add(color.rgb(38, 76, 0))
    gcd.gcolor.add(color.rgb(57, 76, 38))
    gcd.gcolor.add(color.rgb(19, 38, 0))
    gcd.gcolor.add(color.rgb(28, 38, 19))
    gcd.gcolor.add(color.rgb(63, 255, 0))
    gcd.gcolor.add(color.rgb(159, 255, 127))
    gcd.gcolor.add(color.rgb(41, 165, 0))
    gcd.gcolor.add(color.rgb(103, 165, 82))
    gcd.gcolor.add(color.rgb(31, 127, 0))
    gcd.gcolor.add(color.rgb(79, 127, 63))
    gcd.gcolor.add(color.rgb(19, 76, 0))
    gcd.gcolor.add(color.rgb(47, 76, 38))
    gcd.gcolor.add(color.rgb(9, 38, 0))
    gcd.gcolor.add(color.rgb(23, 38, 19))
    gcd.gcolor.add(color.rgb(0, 255, 0))
    gcd.gcolor.add(color.rgb(127, 255, 127))
    gcd.gcolor.add(color.rgb(0, 165, 0))
    gcd.gcolor.add(color.rgb(82, 165, 82))
    gcd.gcolor.add(color.rgb(0, 127, 0))
    gcd.gcolor.add(color.rgb(63, 127, 63))
    gcd.gcolor.add(color.rgb(0, 76, 0))
    gcd.gcolor.add(color.rgb(38, 76, 38))
    gcd.gcolor.add(color.rgb(0, 38, 0))
    gcd.gcolor.add(color.rgb(19, 38, 19))
    gcd.gcolor.add(color.rgb(0, 255, 63))
    gcd.gcolor.add(color.rgb(127, 255, 159))
    gcd.gcolor.add(color.rgb(0, 165, 41))
    gcd.gcolor.add(color.rgb(82, 165, 103))
    gcd.gcolor.add(color.rgb(0, 127, 31))
    gcd.gcolor.add(color.rgb(63, 127, 79))
    gcd.gcolor.add(color.rgb(0, 76, 19))
    gcd.gcolor.add(color.rgb(38, 76, 47))
    gcd.gcolor.add(color.rgb(0, 38, 9))
    gcd.gcolor.add(color.rgb(19, 38, 23))
    gcd.gcolor.add(color.rgb(0, 255, 127))
    gcd.gcolor.add(color.rgb(127, 255, 191))
    gcd.gcolor.add(color.rgb(0, 165, 82))
    gcd.gcolor.add(color.rgb(82, 165, 124))
    gcd.gcolor.add(color.rgb(0, 127, 63))
    gcd.gcolor.add(color.rgb(63, 127, 95))
    gcd.gcolor.add(color.rgb(0, 76, 38))
    gcd.gcolor.add(color.rgb(38, 76, 57))
    gcd.gcolor.add(color.rgb(0, 38, 19))
    gcd.gcolor.add(color.rgb(19, 38, 28))
    gcd.gcolor.add(color.rgb(0, 255, 191))
    gcd.gcolor.add(color.rgb(127, 255, 223))
    gcd.gcolor.add(color.rgb(0, 165, 124))
    gcd.gcolor.add(color.rgb(82, 165, 145))
    gcd.gcolor.add(color.rgb(0, 127, 95))
    gcd.gcolor.add(color.rgb(63, 127, 111))
    gcd.gcolor.add(color.rgb(0, 76, 57))
    gcd.gcolor.add(color.rgb(38, 76, 66))
    gcd.gcolor.add(color.rgb(0, 38, 28))
    gcd.gcolor.add(color.rgb(19, 38, 33))
    gcd.gcolor.add(color.rgb(0, 255, 255))
    gcd.gcolor.add(color.rgb(127, 255, 255))
    gcd.gcolor.add(color.rgb(0, 165, 165))
    gcd.gcolor.add(color.rgb(82, 165, 165))
    gcd.gcolor.add(color.rgb(0, 127, 127))
    gcd.gcolor.add(color.rgb(63, 127, 127))
    gcd.gcolor.add(color.rgb(0, 76, 76))
    gcd.gcolor.add(color.rgb(38, 76, 76))
    gcd.gcolor.add(color.rgb(0, 38, 38))
    gcd.gcolor.add(color.rgb(19, 38, 38))
    gcd.gcolor.add(color.rgb(0, 191, 255))
    gcd.gcolor.add(color.rgb(127, 223, 255))
    gcd.gcolor.add(color.rgb(0, 124, 165))
    gcd.gcolor.add(color.rgb(82, 145, 165))
    gcd.gcolor.add(color.rgb(0, 95, 127))
    gcd.gcolor.add(color.rgb(63, 111, 127))
    gcd.gcolor.add(color.rgb(0, 57, 76))
    gcd.gcolor.add(color.rgb(38, 66, 76))
    gcd.gcolor.add(color.rgb(0, 28, 38))
    gcd.gcolor.add(color.rgb(19, 33, 38))
    gcd.gcolor.add(color.rgb(0, 127, 255))
    gcd.gcolor.add(color.rgb(127, 191, 255))
    gcd.gcolor.add(color.rgb(0, 82, 165))
    gcd.gcolor.add(color.rgb(82, 124, 165))
    gcd.gcolor.add(color.rgb(0, 63, 127))
    gcd.gcolor.add(color.rgb(63, 95, 127))
    gcd.gcolor.add(color.rgb(0, 38, 76))
    gcd.gcolor.add(color.rgb(38, 57, 76))
    gcd.gcolor.add(color.rgb(0, 19, 38))
    gcd.gcolor.add(color.rgb(19, 28, 38))
    gcd.gcolor.add(color.rgb(0, 63, 255))
    gcd.gcolor.add(color.rgb(127, 159, 255))
    gcd.gcolor.add(color.rgb(0, 41, 165))
    gcd.gcolor.add(color.rgb(82, 103, 165))
    gcd.gcolor.add(color.rgb(0, 31, 127))
    gcd.gcolor.add(color.rgb(63, 79, 127))
    gcd.gcolor.add(color.rgb(0, 19, 76))
    gcd.gcolor.add(color.rgb(38, 47, 76))
    gcd.gcolor.add(color.rgb(0, 9, 38))
    gcd.gcolor.add(color.rgb(19, 23, 38))
    gcd.gcolor.add(color.rgb(0, 0, 255))
    gcd.gcolor.add(color.rgb(127, 127, 255))
    gcd.gcolor.add(color.rgb(0, 0, 165))
    gcd.gcolor.add(color.rgb(82, 82, 165))
    gcd.gcolor.add(color.rgb(0, 0, 127))
    gcd.gcolor.add(color.rgb(63, 63, 127))
    gcd.gcolor.add(color.rgb(0, 0, 76))
    gcd.gcolor.add(color.rgb(38, 38, 76))
    gcd.gcolor.add(color.rgb(0, 0, 38))
    gcd.gcolor.add(color.rgb(19, 19, 38))
    gcd.gcolor.add(color.rgb(63, 0, 255))
    gcd.gcolor.add(color.rgb(159, 127, 255))
    gcd.gcolor.add(color.rgb(41, 0, 165))
    gcd.gcolor.add(color.rgb(103, 82, 165))
    gcd.gcolor.add(color.rgb(31, 0, 127))
    gcd.gcolor.add(color.rgb(79, 63, 127))
    gcd.gcolor.add(color.rgb(19, 0, 76))
    gcd.gcolor.add(color.rgb(47, 38, 76))
    gcd.gcolor.add(color.rgb(9, 0, 38))
    gcd.gcolor.add(color.rgb(23, 19, 38))
    gcd.gcolor.add(color.rgb(127, 0, 255))
    gcd.gcolor.add(color.rgb(191, 127, 255))
    gcd.gcolor.add(color.rgb(82, 0, 165))
    gcd.gcolor.add(color.rgb(124, 82, 165))
    gcd.gcolor.add(color.rgb(63, 0, 127))
    gcd.gcolor.add(color.rgb(95, 63, 127))
    gcd.gcolor.add(color.rgb(38, 0, 76))
    gcd.gcolor.add(color.rgb(57, 38, 76))
    gcd.gcolor.add(color.rgb(19, 0, 38))
    gcd.gcolor.add(color.rgb(28, 19, 38))
    gcd.gcolor.add(color.rgb(191, 0, 255))
    gcd.gcolor.add(color.rgb(223, 127, 255))
    gcd.gcolor.add(color.rgb(124, 0, 165))
    gcd.gcolor.add(color.rgb(145, 82, 165))
    gcd.gcolor.add(color.rgb(95, 0, 127))
    gcd.gcolor.add(color.rgb(111, 63, 127))
    gcd.gcolor.add(color.rgb(57, 0, 76))
    gcd.gcolor.add(color.rgb(66, 38, 76))
    gcd.gcolor.add(color.rgb(28, 0, 38))
    gcd.gcolor.add(color.rgb(33, 19, 38))
    gcd.gcolor.add(color.rgb(255, 0, 255))
    gcd.gcolor.add(color.rgb(255, 127, 255))
    gcd.gcolor.add(color.rgb(165, 0, 165))
    gcd.gcolor.add(color.rgb(165, 82, 165))
    gcd.gcolor.add(color.rgb(127, 0, 127))
    gcd.gcolor.add(color.rgb(127, 63, 127))
    gcd.gcolor.add(color.rgb(76, 0, 76))
    gcd.gcolor.add(color.rgb(76, 38, 76))
    gcd.gcolor.add(color.rgb(38, 0, 38))
    gcd.gcolor.add(color.rgb(38, 19, 38))
    gcd.gcolor.add(color.rgb(255, 0, 191))
    gcd.gcolor.add(color.rgb(255, 127, 223))
    gcd.gcolor.add(color.rgb(165, 0, 124))
    gcd.gcolor.add(color.rgb(165, 82, 145))
    gcd.gcolor.add(color.rgb(127, 0, 95))
    gcd.gcolor.add(color.rgb(127, 63, 111))
    gcd.gcolor.add(color.rgb(76, 0, 57))
    gcd.gcolor.add(color.rgb(76, 38, 66))
    gcd.gcolor.add(color.rgb(38, 0, 28))
    gcd.gcolor.add(color.rgb(38, 19, 33))
    gcd.gcolor.add(color.rgb(255, 0, 127))
    gcd.gcolor.add(color.rgb(255, 127, 191))
    gcd.gcolor.add(color.rgb(165, 0, 82))
    gcd.gcolor.add(color.rgb(165, 82, 124))
    gcd.gcolor.add(color.rgb(127, 0, 63))
    gcd.gcolor.add(color.rgb(127, 63, 95))
    gcd.gcolor.add(color.rgb(76, 0, 38))
    gcd.gcolor.add(color.rgb(76, 38, 57))
    gcd.gcolor.add(color.rgb(38, 0, 19))
    gcd.gcolor.add(color.rgb(38, 19, 28))
    gcd.gcolor.add(color.rgb(255, 0, 63))
    gcd.gcolor.add(color.rgb(255, 127, 159))
    gcd.gcolor.add(color.rgb(165, 0, 41))
    gcd.gcolor.add(color.rgb(165, 82, 103))
    gcd.gcolor.add(color.rgb(127, 0, 31))
    gcd.gcolor.add(color.rgb(127, 63, 79))
    gcd.gcolor.add(color.rgb(76, 0, 19))
    gcd.gcolor.add(color.rgb(76, 38, 47))
    gcd.gcolor.add(color.rgb(38, 0, 9))
    gcd.gcolor.add(color.rgb(38, 19, 23))
    gcd.gcolor.add(color.rgb(0, 0, 0))
    gcd.gcolor.add(color.rgb(51, 51, 51))
    gcd.gcolor.add(color.rgb(102, 102, 102))
    gcd.gcolor.add(color.rgb(153, 153, 153))
    gcd.gcolor.add(color.rgb(204, 204, 204))
    gcd.gcolor.add(color.rgb(255, 255, 255))
    gcd.gcolor.add(color.rgb(255, 255, 255))  'By Layer
    gcd.gcolor.add(color.rgb(255, 255, 255))  'By Block
    gcd.gcolor.add(color.rgb(255, 255, 255))  'By Object?

    ' corrijo los colores que no se ven contra el fondo
    gcd.gcolor[0] = config.WhiteAndBlack
    gcd.gcolor[7] = config.WhiteAndBlack
    gcd.gcolor[250] = config.WhiteAndBlack
    gcd.gcolor[255] = config.WhiteAndBlack
    gcd.gcolor[256] = config.WhiteAndBlack
    gcd.gcolor[257] = config.WhiteAndBlack
    gcd.gcolor[258] = config.WhiteAndBlack

End

Public Sub InitMenus()

    ' colores
    Dim mColors As New Menu(fMain)
    Dim mItem As Menu

    Dim i, iColor As Integer

    Dim sMenuPre, sMenuPost, sMenuSnap As String

    mColors.Name = "mColores"

    '============ByLayer======================
    i = 256
    iColor = gcd.gColor[i]
    mItem = New Menu(mColors)
    mItem.Text = "ByLayer"
    mItem.Action = "Color_256" ' & CStr(i)
    mItem.Picture = paintPlus.picCirculito(8, gcd.gColor[256], Color.ButtonForeground)

    '============Byblock======================
    i = 257
    mItem = New Menu(mColors)
    mItem.Text = "ByBlock"
    mItem.Action = "Color_257" ' & CStr(i)
    mItem.Picture = paintPlus.picCirculito(8, gcd.gColor[i], Color.ButtonForeground)

    '============separator======================
    mItem = New Menu(mColors)
    mItem.Text = ""
    mItem.Action = "" ' & CStr(i)

    For i = 0 To 10 'gcd.gColor.Max
        mItem = New Menu(mColors)
        mItem.Text = "Color " & CStr(i)
        mItem.Action = "Color_" & CStr(i)
        mItem.Picture = paintPlus.picCirculito(8, gcd.gColor[i], Color.ButtonForeground)

    Next
    '============separator======================
    mItem = New Menu(mColors)
    mItem.Text = ""
    mItem.Action = "" ' & CStr(i)

    '============more colors======================
    mItem = New Menu(mColors)
    mItem.Text = ("more colors...")
    mItem.Action = "more_colors" ' & CStr(i)

    fMain.mbtcolors.text = mColors.Children[0].Text
    fMain.mbtColors.Picture = mColors.Children[0].Picture
    fMain.mbtColors.Menu = mColors.Name
    fMain.mbtColors.Tag = mColors.Children[0].Tag
    fMain.mbtColors.Action = "Color_256"

    ' Menu contextual de entidades
    ' colores
    Dim mEntities As New Menu(fMain)

    mEntities.Name = "mEntities"
    'fMain.PopupMenu = "mEntities"
    ' Cortar/Copiar/Pegar/Propiedades/Apagar sus layers/Hacer actual ese layer
    '============Cut======================
    mItem = New Menu(mEntities)
    mItem.Text = ("Cut")
    mItem.Action = "mEntities-Cut"
    mItem.Picture = Picture["icon:/32/cut"]
    '============Copy======================
    mItem = New Menu(mEntities)
    mItem.Text = ("Copy")
    mItem.Action = "mEntities-Copy"
    mItem.Picture = Picture["icon:/32/copy"]
    '============Paste======================
    mItem = New Menu(mEntities)
    mItem.Text = ("Paste")
    mItem.Action = "mEntities-Paste"
    mItem.Picture = Picture["icon:/32/paste"]
    '============separator======================
    mItem = New Menu(mColors)
    mItem.Text = ""
    mItem.Action = ""
    '============Agrupar======================
    mItem = New Menu(mEntities)
    mItem.Text = ("Make group")
    mItem.Action = "mEntities-Group"
    mItem.Picture = Picture["icon:/32/paste"]
    '============Desagrupar======================
    mItem = New Menu(mEntities)
    mItem.Text = ("Break group")
    mItem.Action = "mEntities-DeGroup"
    mItem.Picture = Picture["icon:/32/paste"]
    '============separator======================
    mItem = New Menu(mColors)
    mItem.Text = ""
    mItem.Action = "" ' & CStr(i)
    '============Ocultar layers de todo=====
    mItem = New Menu(mEntities)
    mItem.Text = ("HIde these Layers")
    mItem.Action = "mEntities-HIdeLayers"
    mItem.Picture = Picture["icon:/32/paste"]
    '============Desagrupar======================
    mItem = New Menu(mEntities)
    mItem.Text = ("Paste")
    mItem.Action = "mEntities-Paste"
    mItem.Picture = Picture["icon:/32/paste"]
    'fMain.PopupMenu = "mEntities"

    '===================================================================================================================================
    ' Armo el menu contextual de cada ENTIDAD
    gcd.SnapMode = Config.SnapModeSaved
    sMenuSnap = ";Snap to...;;;;<nothing>;_nothing;;4;;;;4;End point;_end;end_point;4;MId point;_mId;mId_point;4;Perpendicular;_per;perpendicular;4"
    sMenuSnap &= ";Quadrant;_qua;quadrant;4"
    sMenuSnap &= ";Center;_cen;center_point;4"
    sMenuSnap &= ";Intersection;_int;intersection;4"
    sMenuSnap &= ";Tangent;_tan;tangent;4"
    sMenuSnap &= ";Nearest;_nea;nearest;4"
    sMenuSnap &= ";Base point;_bas;base_point;4"

    sMenuPost = (";;;;;Cancel;_CANCEL;;")
    Dim vClass As Variant, stxMenus As New String[]

    For Each vClass In gcd.CCC
        Utils.MenuMakerPlus(fmain, vClass.gender, vClass.contextmenu & sMenuSnap & sMenuPost, gcd.dirResources &/ "svg" &/ Config.IconFamily)
    Next

End

'' carga los cursores desde SVG y los coloca en GCD
Public Sub LoadCursors()

    Dim c As Integer
    Dim sCursor As String

    sCursor = dsk.Contrary(Application.Path &/ "svg/Cursors/cursor1.svg", "#0066b3", Config.ModelBackgroundColor)
    gcd.CursorCross = New Cursor(Image.FromString(sCursor).Stretch(48, 48).Picture, 24, 24)

    sCursor = dsk.Contrary(Application.Path &/ "svg/Cursors/cursor2.svg", "#0066b3", Config.ModelBackgroundColor)
    gcd.CursorSelect = New Cursor(Image.FromString(sCursor).Stretch(48, 48).Picture, 24, 24)

    sCursor = dsk.Contrary(Application.Path &/ "svg/Cursors/cursor3.svg", "#0066b3", Config.ModelBackgroundColor)
    gcd.CursorSelectAdd = New Cursor(Image.FromString(sCursor).Stretch(48, 48).Picture, 24, 24)

    sCursor = dsk.Contrary(Application.Path &/ "svg/Cursors/cursor4.svg", "#0066b3", Config.ModelBackgroundColor)
    gcd.CursorSelectRem = New Cursor(Image.FromString(sCursor).Stretch(48, 48).Picture, 24, 24)

    sCursor = dsk.Contrary(Application.Path &/ "svg/Cursors/cursor5.svg", "#0066b3", Config.ModelBackgroundColor)
    gcd.CursorSelectXchange = New Cursor(Image.FromString(sCursor).Stretch(48, 48).Picture, 24, 24)

End
