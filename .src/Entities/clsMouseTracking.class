' Gambas class file

' Estrategias:
' Si tengo pre seteados los puntos, lineas y poligonos puedo buscar con ese orden
' de prelacion. Luego una linea sera detectada antes que un poligono. Ello puede ser
' muy util en caso de poligonos grandes con lineas dentro que deban ser detectadas
' antes.

' La otra estrategia es la actual (jun/21) de generar una lista de entidades visibles
' de acuerdo a los layers encendidos y las entidades que se ven realemnte en la pantalla.

Create Static
Create Private
'Fast Unsafe

Public LastFound As Entity              ' ultima entidad encontrada
Public LastPointToCursorDistance As Float

' poi

' '' Creo el array de POIpoints
' '' son los puntos que van a enganchar el mouse
' Public Sub ReBuildPOIPoints()
'
'     Dim i, ii, n As Integer, EPoi As New Integer[], nPois As Integer
'     Dim rData As New Float[]
'     Dim e, breathe, iPoligon, iLine, iTotalPoints As Integer
'     Dim t As Float = Timer
'
'     gcd.Drawing.poiPoints.Clear           ' limpio
'     gcd.Drawing.poiType.Clear
'
'     iTotalPoints = PoiTotalPoints()         ' calculo el tamaÃ±o total para redimensionar, esto es mas rapido que ir insertando
'
'     gcd.Drawing.poiType.Resize(iTotalPoints)
'     gcd.Drawing.poiEntities.Resize(iTotalPoints)
'     gcd.Drawing.poiPoints.Resize(iTotalPoints * 2)
'
'     For e = 0 To gcd.Drawing.oEntities
'
'         For i = 0 To gcd.Drawing.oEntities[e].PoiType.Max
'             gcd.Drawing.poiType[ii] = gcd.Drawing.oEntities[e].PoiType[i]
'             gcd.Drawing.poiEntities[ii] = e
'             gcd.Drawing.poiPoints[ii * 2] = gcd.Drawing.oEntities[e].PoiPoints[i]
'             gcd.Drawing.poiPoints[ii * 2 + 1] = gcd.Drawing.oEntities[e].PoiPoints[i + 1]
'             Inc ii
'         Next
'
'     Next
'     Debug "POI points built in ", Timer - t
'
' End

' '' Creo el array de POI
' '' son los puntos que van a enganchar el mouse
'
' Public Sub ReBuildPOI()
'
'     Dim i, ii, n As Integer, EPoi As New Integer[], nPois As Integer
'     Dim rData As New Float[]
'     Dim e, breathe, iPoligon, iLine, iPoint As Integer
'     Dim t As Float = Timer
'
'     gcd.Drawing.poiLines.Clear               'x1y1x2y2 x1y1x2y2 ...
'     gcd.Drawing.poiLinesEntities.Clear       ' Key: str(position) Value: Handle of entity
'
'     gcd.Drawing.poiPoints.Clear              ' x1y1 x1y1 x1y1...
'     gcd.Drawing.poiPointsEntities.Clear      ' Key: str(position) Value: Handle of entity
'
'     gcd.Drawing.poiPoligonElements.Clear
'     gcd.Drawing.poiPoligonEntities.Clear
'     gcd.Drawing.poiPoligons.Clear
'     gcd.Drawing.poiPoligonStartIndex.Clear
'     gcd.Drawing.poiType.Clear
'
'     For e = 0 To gcd.Drawing.Sheet.Entities
'
'         Select Case gcd.Drawing.Sheet.Entities[e].Gender
'
'             Case "LINE"
'
'                 gcd.Drawing.poiLines.insert([gcd.Drawing.Sheet.Entities[e].p[0], gcd.Drawing.Sheet.Entities[e].p[1], gcd.Drawing.Sheet.Entities[e].p[2], gcd.Drawing.Sheet.Entities[e].p[3]])
'                 gcd.Drawing.poiLinesEntities.Add(e)
'
'             Case "LWPOLYLINE"
'                 For i = 0 To gcd.Drawing.Sheet.Entities[e].P.count - 4 Step 2
'                     gcd.Drawing.poiLines.insert([gcd.Drawing.Sheet.Entities[e].p[i], gcd.Drawing.Sheet.Entities[e].p[i + 1], gcd.Drawing.Sheet.Entities[e].p[i + 2], gcd.Drawing.Sheet.Entities[e].p[i + 3]])
'                 Next
'                 For i = 0 To gcd.Drawing.Sheet.Entities[e].P.Count / 4
'                     gcd.Drawing.poiLinesEntities.Add(e)
'                 Next
'             Case "CIRCLE", "ARC", "ELLIPSE"
'                 gcd.Drawing.poiLines.insert(gcd.Drawing.Sheet.Entities[e].PolyLine)
'                 For i = 0 To gcd.Drawing.Sheet.Entities[e].PolyLine.Count / 4
'                     gcd.Drawing.poiLinesEntities.Add(e)
'                 Next
'             Case "SolId", "Text", "MText"
'
'                 gcd.Drawing.poiPoligons.insert(gcd.Drawing.Sheet.Entities[e].Polygon)
'                 gcd.Drawing.poiLinesEntities.Add(e)
'
'         End Select
'
'     Next
'
'     Debug "POI arrays regenerados en ", Timer - t
'
' End

'' Veo si estoy sobre una entidad y la devuelvo
Public Function CheckAboveEntities(xr As Float, Yr As Float, Optional iTolerance As Integer = 12) As Entity[]

    Dim fEntities As New Entity[]
    Dim e As Entity

    Do
        e = CheckAboveEntity(xr, yr,, e)
        If e Then
            If fEntities.Count > 0 Then
                If e = fEntities.First Then Break
            End If
            fEntities.Add(e)
        Else
            Break
        End If

    Loop
    Return fEntities

End

Public Function CheckBestPOI(xr As Float, Yr As Float, Optional eExclude As Entity) As Float[]

    Dim CurrentPoint, BestPoint As New Float[]
    Dim d, ShortestDistance As Float
    Dim e As Entity

    BestPoint.Add(0)
    BestPoint.Add(0)
    BestPoint.Add(0)
    ShortestDistance = 1e10

    For Each e In gcd.Drawing.HoveredEntities
        If e = eExclude Then Continue
        If e = gcd.Drawing.Sheet.SkipSearch Then Continue
        CurrentPoint = CheckPOI(xr, yr, e)

        ' veo si el punto cae dentro de la pantalla
        If gcd.XPix(CurrentPoint[0]) <= 0 Or gcd.XPix(CurrentPoint[0]) >= gcd.Drawing.Sheet.GlSheet.w Then Continue
        If gcd.YPix(CurrentPoint[1]) <= 0 Or gcd.YPix(CurrentPoint[1]) >= gcd.Drawing.Sheet.GlSheet.h Then Continue

        If CurrentPoint[2] > 0 Then
            d = puntos.distancia(xr, yr, CurrentPoint[0], CurrentPoint[1])

            If d < ShortestDistance Then
                ShortestDistance = d
                BestPoint[0] = CurrentPoint[0]
                BestPoint[1] = CurrentPoint[1]
                BestPoint[2] = CurrentPoint[2]
            Endif

        Endif
    Next

    Return BestPoint

End

'' Veo si estoy sobre una entidad y la devuelvo
Public Function CheckAboveEntity(xr As Float, Yr As Float, Optional iTolerance As Integer = 12, SkipEntiy As Entity) As Entity

    Dim iVisible As Integer
    Dim Found As Boolean = True
    Dim eVisible, ePartFound, eInsertFound, eBounded, ePolyline As Entity
    Dim T As Float = Timer
    Dim Tolerance As Float = gcd.Metros(iTolerance)
    Dim eFound As Entity

    gcd.flgSearchingAllowed = False
    iVisible = 0
    Found = False
    eFound = Null
    eBounded = Null
    ePolyline = Null

    For Each eVisible In gcd.Drawing.Sheet.EntitiesVisibles
        Inc iVisible
        'If iVisible

        'depre If Not eVisible.Trackable Then Continue

        ' vemos si esta entidad no debo tenerla en cuenta
        If eVisible = SkipEntiy Then Continue

        If eVisible = gcd.Drawing.Sheet.SkipSearch Then Continue

        If Gcd.CCC[eVisible.gender].overme(eVisible, xr, yr, tolerance) Then

            'Debug eVisible.id, Rnd()

            Found = True
            If eVisible.pBlock Then '.HandleOwner <> "" Then
                ePartFound = eVisible
                eInsertFound = eVisible
                'eInsertFound = gcd.Drawing.Entities[eVisible.HandleOwner]
            Else If eVisible.Polygon.Count > 0 Then
                eBounded = eVisible
            Else If eVisible.PolyLine.Count > 0 Then
                ePolyline = eVisible

            Else

                eFound = eVisible

                Break
            End If
        End If

        'utils.DoEvents(0.01000)

    Next

    gcd.flgSearchingAllowed = True

    If Found Then                           ' devuelvo con orden de prelacion
        If eFound Then Return eFound        ' primero las lineas
        If ePolyline Then Return ePolyline  ' luego las Poly
        If eBounded Then Return eBounded    ' luego Polygonos
        Return eInsertFound                 ' luego Insertos
    Else
        Return Null
    End If

End

'' This is called by MouseMove events, so make sure its fast
'' and its called form there
Public Sub CheckPOI(xr As Float, Yr As Float, Optional e As Entity) As Float[]

    Dim rData, CurrentPoint As New Float[], e2, ePart As Entity
    Dim indexEntity, i, iInter, i2, iPoligon, iLine, iPoint As Integer
    Dim pend1, base1, pend2, base2 As Float ' vars para las ecuacionesde las rectas
    Dim pNea, puntoB, puntoA, pIntersection, pInter, pInterPoly, pInterPoly2 As New Float[]
    Dim end1X, end1Y, end2X, end2Y As Float
    Dim x0, y0, x1, y1 As Float
    ' distancias  los enganches, para determinar cual es el mas cercano al puntero
    Dim DistPer As Float = 1e6
    Dim DistEnd1 As Float = 1e6
    Dim DistEnd2 As Float = 1e6
    Dim DistMId As Float = 1e6
    Dim DistBase As Float = 1e6
    Dim DistTang As Float = 1e6
    Dim DistQuad As Float = 1e6
    Dim DistCenter As Float = 1e6
    Dim DistInter As Float = 1e6
    Dim DistNearest As Float = 1e6
    Dim Dist As Float = 1e5  ' el menor
    Dim DistEnd1B As Float
    Dim DistEnd2B As Float
    Dim DistMIdB As Float
    Dim tolerance As Float
    Dim d As Float
    Dim ShortestDistance As Float

    ' If Me.flgSearchingPOI Then Return   ' no nesting this
    gcd.flgSearchingPOI = True
    ' Debug "Iniciando busqueda de POI", Rnd(0, 1000)
    Dim t As Float = Timer

    tolerance = gcd.Metros(16)
    'Debug "Checking POI"
    rdata.Insert([0, 0, 0])
    iPoligon = -1
    iLine = -1

    'iPoligon = puntos.FindPOIPoligon(xr, yr, gcd.CurrDrawing.poiPoligons, gcd.CurrDrawing.poiPoligonStartIndex, gcd.CurrDrawing.poiPoligonElements)
    'iLine = puntos.FindPOILines(xr, yr, gcd.CurrDrawing.poiLines, gcd.CurrDrawing.Metros(16))
    ' rdata = puntos.FindPOI(xr, yr, gcd.CurrDrawing.poiPoints, gcd.CurrDrawing.Metros(16))
    ' i = rdata[2]
    ' If i >= 0 Then
    '     rData[2] = gcd.CurrDrawing.poiType[i]
    '     rData.Add(gcd.CurrDrawing.poiEntities[i])
    '
    ' Else
    '     rdata.Clear
    '     rdata.Insert([0, 0, -1, -1])
    ' Endif
    ' Me.flgSearchingPOI = False
    ' Return rdata
    'Debug "total poi check time ", Timer - t, gcd.CurrDrawing.poiPoligons.Count + gcd.CurrDrawing.poiLines.Count + gcd.CurrDrawing.poiPoints.Count, " points parsed"
    'e = gcd.Drawing.HoveredEntity

    If Not e Then
        gcd.flgSearchingPOI = False
        DrawingAIds.txtSnapTo = ""
        rData[0] = xr
        rData[1] = yr
        rData[2] = 0

        gcd.Drawing.eLastEntity = Null

        Return rdata
    End If
    ' If iLine > 0 Then e = gcd.CurrDrawing.arrEntities[gcd.CurrDrawing.poiLinesEntities[iLine]]
    ' If iPoligon > 0 Then e = gcd.CurrDrawing.arrEntities[iPoligon]

    'Debug "Encontrada entidad ", e.Gender, " en ", Timer - t

    Select Case e.Gender

        Case "INSERT"
            ShortestDistance = 1e10
            For Each ePart In e.pBlock.Entities
                CurrentPoint = CheckPOI(Xr, Yr, ePart)

                If CurrentPoint[2] > 0 Then
                    d = puntos.distancia(xr, yr, CurrentPoint[0], CurrentPoint[1])

                    If d < ShortestDistance Then
                        ShortestDistance = d
                        rData[0] = CurrentPoint[0]
                        rData[1] = CurrentPoint[1]
                        rData[2] = CurrentPoint[2]
                    Endif

                Endif
            Next

        Case "LINE"

            ' perpendicular
            If gcd.Drawing.LastPoint.max > 0 Then                     ' tengo un punto anterior

                If e.P[2] - e.P[0] <> 0 Then
                    pend1 = (e.P[3] - e.P[1]) / (e.P[2] - e.P[0])
                    base1 = e.P[1] - pend1 * e.P[0]                 ' Y = pend1 X + base1

                    ' ecuacion de la recta perpendicular que pasa por el punto anterior
                    If pend1 <> 0 Then
                        pend2 = -1 / pend1
                        base2 = gcd.Drawing.LastPoint[1] - pend2 * gcd.Drawing.LastPoint[0]

                        ' necesito otro punto
                        If gcd.Drawing.LastPoint[0] <> 0 Then
                            puntoA.Add(0)
                            puntoA.Add(base2)
                        Else
                            puntoA.Add(1)
                            puntoA.Add(pend2 + base2)

                        End If

                        ' determino la interseccion de ambas
                        puntoB = puntos.lineLineIntersection(gcd.Drawing.LastPoint, puntoA, [e.P[0], e.P[1]], [e.P[2], e.P[3]])
                    Else ' la recta es horizontal

                        puntoB.Add(gcd.Drawing.LastPoint[0])
                        puntoB.Add(e.P[1])

                    End If
                Else        ' la recta es vertical

                    puntoB.Add(e.P[0])
                    puntoB.Add(gcd.Drawing.LastPoint[1])

                End If

                ' veo si el punto b esta entre los extremos de la linea , aunque deberia estarlo!!!
                If puntos.onSegment(e.P[0], e.P[1], puntoB[0], puntoB[1], e.P[2], e.P[3]) Then

                    ' determino la distancia al puntero para ofrecerlo como opcion de enganche
                    DistPer = puntos.distancia(puntoB[0], puntoB[1], xr, yr)

                Endif
            End If

            ' busco tambien intersecciones
            For Each e2 In gcd.Drawing.Sheet.EntitiesVisibles
                If e = e2 Then Continue

                Select Case e2.Gender

                    Case "LINE"
                        If puntos.doIntersect(e.P[0], e.P[1], e.P[2], e.P[3], e2.P[0], e2.P[1], e2.P[2], e2.P[3]) Then
                            pInter = puntos.lineLineIntersection([e.P[0], e.P[1]], [e.P[2], e.P[3]], [e2.P[0], e2.P[1]], [e2.P[2], e2.P[3]])

                            pIntersection.Insert(pInter)

                        Endif

                    Case "LWPOLYLINE", "SOLID"

                        pInterPoly = puntos.LinePolyIntersection3(e.p, e2.p)
                        pIntersection.Insert(pInterPoly)
                    Case "CIRCLE", "ARC", "SPLINE"
                        pInterPoly2 = puntos.LinePolyIntersection3(e.p, e2.PolyLine)
                        pIntersection.Insert(pInterPoly2)
                End Select
            Next

            If pIntersection.Count > 0 Then ' puede no haber intersaeccion
                iInter = puntos.FindNearest(xr, yr, pIntersection)
                DistInter = puntos.distancia(xr, yr, pIntersection[iInter], pIntersection[iInter + 1])
            Else
                DistInter = 10e10
            End If

        Case "CIRCLE"
            If gcd.Drawing.LastPoint.max > 0 Then                     ' tengo un punto anterior

                ' buscamos una tangente..

                ' Extraido de StackExchange
                ' #Data Section, change As You need #
                ' Cx, Cy = coordenadas del centro
                Dim Cx As Float = e.p[0]
                Dim Cy As Float = e.p[1]
                Dim tx, ty, t1x, t1y, t2x, t2y As Float
                Dim r As Float = e.fParam[0]

                Dim Px As Float = gcd.Drawing.LastPoint[0]
                Dim Py As Float = gcd.Drawing.LastPoint[1]

                Dim dx As Float = Px - Cx
                Dim dy As Float = Py - Cy
                Dim dxr As Float = -dy
                Dim dyr As Float = dx
                DistCenter = Sqr(dx ^ 2 + dy ^ 2)               ' y ya que estoy veo el Center

                If DistCenter >= r Then
                    Dim rho As Float = r / DistCenter
                    Dim ad As Float = rho ^ 2
                    Dim bd As Float = rho * Sqr(1 - rho ^ 2)

                    ' los puntos tangente
                    T1x = Cx + ad * dx + bd * dxr
                    T1y = Cy + ad * dy + bd * dyr
                    T2x = Cx + ad * dx - bd * dxr
                    T2y = Cy + ad * dy - bd * dyr

                    If (DistCenter / r - 1) < 1E-8 Then
                        'P is on the circumference
                    Else    ' determino cual de las dos tangentes es la mas cercana

                        If puntos.distancia(xr, yr, t1x, t1y) > puntos.distancia(xr, yr, t2x, t2y) Then
                            Tx = T2x
                            Ty = T2y
                        Else
                            Tx = T1x
                            Ty = T1y

                        Endif
                        DistTang = puntos.distancia(xr, yr, tx, ty)
                    End If
                Else ' esta dentro del circulo

                    DistTang = 1e6
                    ' No tangent Is Possible
                End If
            End If

            ' busco los quadrants
            Dim qx, qy, q1, q2, q3, q4 As Float
            q1 = puntos.distancia(e.P[0] - e.fParam[0], e.P[1], xr, yr)
            q2 = puntos.distancia(e.P[0] + e.fParam[0], e.P[1], xr, yr)
            q3 = puntos.distancia(e.P[0], e.P[1] - e.fParam[0], xr, yr)
            q4 = puntos.distancia(e.P[0], e.P[1] + e.fParam[0], xr, yr)

            DistQuad = 1e10
            If DistQuad > q1 Then
                DistQuad = q1
                qx = e.P[0] - e.fParam[0]
                qy = e.P[1]
            End If
            If DistQuad > q2 Then
                DistQuad = q2
                qx = e.P[0] + e.fParam[0]
                qy = e.P[1]
            End If
            If DistQuad > q3 Then
                DistQuad = q3
                qx = e.P[0]
                qy = e.P[1] - e.fParam[0]
            End If
            If DistQuad > q4 Then
                DistQuad = q4
                qx = e.P[0]
                qy = e.P[1] + e.fParam[0]
            End If

    End Select

    ' otros puntos
    Select Case e.Gender
        Case "LINE"

            DistEnd1 = puntos.distancia(e.P[0], e.P[1], xr, yr)
            end1X = e.P[0]
            end1Y = e.P[1]

            end2X = e.P[2]
            end2Y = e.P[3]
            DistEnd2 = puntos.distancia(e.P[2], e.P[3], xr, yr)

            DistMId = puntos.distancia((e.P[2] + e.P[0]) / 2, (e.P[3] + e.P[1]) / 2, xr, yr)
            i = 0

            pNea = puntos.NearestToLine(xr, yr, e.P[0], e.P[1], e.P[2], e.P[3])

            DistNearest = puntos.distancia(xr, yr, pNea[0], pNea[1])

        Case "Text", "MText"

            DistBase = puntos.distancia(e.P[0], e.P[1], xr, yr)

        Case "CIRCLE"
            DistCenter = puntos.distancia(e.P[0], e.P[1], xr, yr)

        Case "ELLIPSE", "ARC", "SPLINE"

            DistCenter = puntos.distancia(e.P[0], e.P[1], xr, yr)

            DistEnd1 = puntos.distancia(e.PolyLine[0], e.PolyLine[1], xr, yr)
            end1X = e.PolyLine[0]
            end1Y = e.PolyLine[1]
            DistEnd2 = puntos.distancia(e.PolyLine[e.PolyLine.Max - 1], e.PolyLine[e.PolyLine.max], xr, yr)
            end2X = e.PolyLine[e.PolyLine.Max - 1]
            end2Y = e.PolyLine[e.PolyLine.Max]

        Case "LWPOLYLINE"
            ' tengo que ver cual es el mas cercano

            For i = 0 To e.P.count - 4 Step 2

                x0 = e.P[i + 0]
                y0 = e.P[i + 1]
                x1 = e.P[i + 2]
                y1 = e.P[i + 3]
                ' busco en que tramo estoy
                If puntos.doIntersect(xr - tolerance, Yr, Xr + tolerance, Yr, x0, y0, x1, y1) Or puntos.doIntersect(xr, Yr - tolerance, Xr, Yr + tolerance, x0, y0, x1, y1) Then

                    DistEnd1 = puntos.distancia(x0, y0, xr, yr)
                    'If DistEnd1 > DistEnd1B Then DistEnd1 = DistEnd1B
                    end1X = e.P[i]
                    end1Y = y0

                    DistEnd2 = puntos.distancia(x1, y1, xr, yr)
                    'If DistEnd2 > DistEnd2B Then DistEnd2 = DistEnd2B
                    end2X = x1
                    end2Y = y1

                    DistMId = puntos.distancia((x1 + x0) / 2, (y1 + y0) / 2, xr, yr)
                    'If DistMid > DistMidB Then DistMid = DistMidB

                    ' perpendicular
                    If gcd.Drawing.LastPoint.max > 0 Then                     ' tengo un punto anterior

                        If x1 - x0 <> 0 Then
                            pend1 = (y1 - y0) / (x1 - x0)
                            base1 = y1 - pend1 * x0                 ' Y = pend1 X + base1

                            ' ecuacion de la recta perpendicular que pasa por el punto anterior
                            If pend1 <> 0 Then
                                pend2 = -1 / pend1
                                base2 = gcd.Drawing.LastPoint[1] - pend2 * gcd.Drawing.LastPoint[0]

                                ' necesito otro punto
                                If gcd.Drawing.LastPoint[0] <> 0 Then
                                    puntoA.Add(0)
                                    puntoA.Add(base2)
                                Else
                                    puntoA.Add(1)
                                    puntoA.Add(pend2 + base2)

                                End If

                                ' determino la interseccion de ambas
                                puntoB = puntos.lineLineIntersection(gcd.Drawing.LastPoint, puntoA, [x0, y0], [x1, y1])
                            Else ' la recta es horizontal

                                puntoB.Add(gcd.Drawing.LastPoint[0])
                                puntoB.Add(y0)

                            End If
                        Else        ' la recta es vertical

                            puntoB.Add(x0)
                            puntoB.Add(gcd.Drawing.LastPoint[1])

                        End If

                        ' veo si el punto b esta entre los extremos de la linea , aunque deberia estarlo!!!
                        If puntos.onSegment(x0, y0, puntoB[0], puntoB[1], x1, y1) Then

                            ' determino la distancia al puntero para ofrecerlo como opcion de enganche
                            DistPer = puntos.distancia(puntoB[0], puntoB[1], xr, yr)

                        Endif
                    End If

                    Break
                End If
            Next

    End Select

    ' veo cual es la opcion mas cercana al puntero

    ' dist = Min(DistBase, DistCenter, DistEnd1, DistEnd2, DistMid, DistPer, DistQuad) ' NO FUNCIONA

    If gcd.SnapMode And gcd.poiBasePoint Then
        If Dist > DistBase Then dist = DistBase
    End If
    If gcd.SnapMode And gcd.poiCenter Then
        If Dist > DistCenter Then dist = DistCenter
    End If
    If gcd.SnapMode And gcd.poiEndPoint Then
        If Dist > DistEnd1 Then dist = DistEnd1
        If Dist > DistEnd2 Then dist = DistEnd2
    End If
    If gcd.SnapMode And gcd.poiMIdPoint Then
        If Dist > DistMId Then dist = DistMId
    End If
    If gcd.SnapMode And gcd.poiPerpendicular Then
        If Dist > DistPer Then dist = DistPer
    End If
    If gcd.SnapMode And gcd.poiQuadrant Then
        If Dist > DistQuad Then dist = DistQuad
    End If
    If gcd.SnapMode And gcd.poiTangent Then
        If Dist > DistTang Then dist = DistTang
    End If
    If gcd.SnapMode And gcd.poiIntersection Then
        If Dist > DistInter Then dist = DistInter
    End If

    If gcd.SnapMode And gcd.poiNearest Then
        If Dist > DistNearest Then dist = DistNearest
    End If

    ' ofrezco ese punto
    If dist = DistEnd1 Then
        rData[0] = end1X
        rData[1] = end1Y
        rData[2] = gcd.poiEndPoint
        DrawingAIds.txtSnapTo = "EndPoint"
    End If

    ' ofrezco ese punto
    If dist = DistEnd2 Then
        rData[0] = end2X
        rData[1] = end2Y
        rData[2] = gcd.poiEndPoint
        DrawingAIds.txtSnapTo = "EndPoint"
    End If

    ' ofrezco ese punto
    If dist = DistMId Then
        rData[0] = (e.P[i + 2] + e.P[i + 0]) / 2
        rData[1] = (e.P[i + 3] + e.P[i + 1]) / 2
        rData[2] = gcd.poiMIdPoint
        DrawingAIds.txtSnapTo = "MIdPoint"
    End If

    ' ofrezco ese punto
    If dist = DistInter Then
        rData[0] = pIntersection[iInter]
        rData[1] = pIntersection[iInter + 1]
        rData[2] = gcd.poiIntersection
        DrawingAIds.txtSnapTo = "Intersection"
    End If

    ' ofrezco ese punto
    If dist = DistPer Then

        rData[0] = puntoB[0]
        rData[1] = puntoB[1]
        rData[2] = gcd.poiPerpendicular
        DrawingAIds.txtSnapTo = "Perpendicular"
    End If

    If dist = DistTang Then

        rData[0] = tx
        rData[1] = ty
        rData[2] = gcd.poiTangent
        DrawingAIds.txtSnapTo = "Tangent"
    End If

    If dist = DistCenter Then

        rData[0] = e.p[0]
        rData[1] = e.p[1]
        rData[2] = gcd.poiCenter
        DrawingAIds.txtSnapTo = "Center"
    End If

    If dist = DistQuad Then
        rData[0] = qx
        rData[1] = qy
        rData[2] = gcd.poiQuadrant
        DrawingAIds.txtSnapTo = "Quadrant"
    End If

    If dist = DistBase Then
        rData[0] = e.P[0]
        rData[1] = e.P[1]
        rData[2] = gcd.poiBasePoint
        DrawingAIds.txtSnapTo = "BasePoint"
    End If

    If dist = DistNearest Then
        rData[0] = pNea[0]
        rData[1] = pNea[1]
        rData[2] = gcd.poiNearest
        DrawingAIds.txtSnapTo = "Nearest"
    End If

    ' Debug "pois checked"
    gcd.flgSearchingPOI = False
    Me.LastPointToCursorDistance = dist
    gcd.Drawing.eLastEntity = e
    Return rData

End

'' Devuelve el punto en la entidad que esta mas cercano al provisto
Public Sub GetNearestPoint(e As Entity, xr As Float, Yr As Float) As Float[]

    Dim x2, y2, c, d, dx, dy, m1, m2, angle As Float
    Dim flxIntersec As Float[]

    Select Case e.Gender
        Case "LINE"
            If (e.P[2] - e.P[0]) <> 0 Then
                ' la pendiente de la recta donde esta la linea es
                m1 = (e.P[3] - e.P[1]) / (e.P[2] - e.P[0])
                If m1 <> 0 Then
                    m2 = -1 / m1

                    ' la ecuacion de la recta que pasa por Xr,Yr con pendiente m2 es:
                    ' Y = m X + c
                    c = yr - m2 * xr
                    ' si
                    x2 = 1e10
                    y2 = m2 * x2 + c

                    ' obtenemos el punto interseccion
                    flxIntersec = puntos.lineLineIntersection([xr, yr], [x2, y2], [e.P[0], e.P[1]], [e.P[2], e.P[3]])

                    ' y salimos

                    Return flxIntersec

                Else                                                            ' la perpendicular es verical
                    Return [xr, e.P[1]]
                End If
            Else                                                                ' la perpendicular es horizontal
                Return [e.P[0], yr]

            Endif

    End Select

End
