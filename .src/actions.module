' Gambas module file

' Este modulo contiene las acciones que , desde ahora, saco de FMain

Public r As Float
Public NewDrawing As Drawing
Public f As String
Public fDxf As String
Public fBak As String
'public fMinimal As String = "./minimal/minimal-2010.dxf"
Public fMinimal As String = "./minimal/minimal.dxf"
Public fx As String[]
Public fbas As String
Public t As String
Public iColor As Integer
Public i As Integer
Public imgCirculito As Image
Public clsJob As String
' Public d As Drawing
Public sActionParams As String[]

Public Sub FileNew()

    ' Vamos a tratar de armar todo para que se pueda dibujar, sin necesidad de cargar un DXF base.

    NewDrawing = gcd.NewDrawing("<new>")                    'Creo una nueva petaña, que me devuelve un Drawing con una Sheet
    gcd.Drawing = NewDrawing                                'Apunto Gcd.Drawing a este nuevo Drawing
    gcd.Drawing.Headers.FINGERPRINTGUID = gcd.UniqueId()
    gcd.Drawings.Add(NewDrawing, gcd.Drawing.Headers.FINGERPRINTGUID)                            'Lo agrego al listado de dibujos abiertos
    fmain.NewTabForDrawing(NewDrawing)
    DrawingAids.RebuildGrid
    gcd.setdashes

    gcd.Regen()

    fmain.UpdateLayersCombo
    fmain.UpdateLineWtCombo
    fmain.UpdateLineTypeCombo
    fmain.UpdatDimTypeTypeCombo
    fmain.Text = f
    gcd.DrawingReady = True

    ' this is what we are doing now
    gcd.clsJob = cadSelection
    gcd.clsJob.start()
    gcd.clsJobPrevious = cadSelection
    gcd.clsJobPreZoom = cadSelection
    gcd.clsJobPreviousParam = 0

    'fmain.FillWindowMenu

End

Public Sub FileSave(Optional sFile As String = "")

    If sFile = "" Then ' pregunto

        Dialog.Title = ("File Name")

        If main.convODA Or main.convLibreDWG Then
            Dialog.Filter = ["*.dxf;*.dwg", "Drawings", "*.dxf", "DXF Drawing exchange 2010", "*.dwg", "DWG AutoCAD Drawing file 2010"]
        Else

            Dialog.Filter = ["*.dxf", "Drawings", "*.dxf", "DXF Drawing exchange 2010"]

        End If
        If Not Dialog.SaveFile() Then Return

        sFile = Dialog.Path

    End If

End

Public Sub FileOpen(Optional sFile As String = "")

    If sFile = "" Then

        Dialog.Title = ("Select File")

        If main.convODA Or main.convLibreDWG Then
            Dialog.Filter = ["*.dxf;*.dwg;*.dgn", "Drawings", "*.dxf", "DXF Drawing exchange", "*.dwg", "DWG AutoCAD Drawing file", "*.dgn", "DGN Microstation Drawing file"]
        Else

            Dialog.Filter = ["*.dxf", "Drawings", "*.dxf", "DXF Drawing exchange"]

        End If
        Dialog.Path = Config.FilesLastPath
        Dialog.OpenFile(False)
        f = Dialog.Path
    Else

        f = sfile ' "/home/martin/GAUCHO-TESTING-V2000-online converter.dxf"
    End If

    gcd.DrawingReady = False
    'If fmain.GLArea1 Then fmain.GLArea1.Enabled = False
    gcd.debugInfo("Opening " & f,,, True)
    gcd.DrawingReady = False
    If Exist(f) Then
        If Stat(f).Type = gb.File Then
            Select Lower(File.Ext(f))
                Case "dgn"

                    Inc Application.Busy
                    NewDrawing = New Drawing
                    NewDrawing = gcd.NewDrawing("")

                    ' esto es necesario porque muchas funciones usan gcd.Drawing
                    gcd.Drawing = NewDrawing

                    If Not dgn.LoadDGN(f, NewDrawing) Then
                        Message.Error(("There was an error opening the file"))
                        NewDrawing = Null
                        gcd.Drawing = gcd.Drawings[gcd.Drawings.Last]
                        Return
                    Endif

                    gcd.Drawings.Add(NewDrawing)

                    gcd.Drawing.FileName = f
                    gcd.Drawing.RequiresFileRename = False

                    Try gcd.Drawing.HandSeed = Val("&H" & gcd.Drawing.Headers.HandSeed)

                    fmain.UpdateLayersCombo
                    fmain.UpdateLineWtCombo
                    fmain.UpdateLineTypeCombo
                    fmain.UpdatDimTypeTypeCombo
                    fmain.NewTabForDrawing(NewDrawing)
                    gcd.Regen()
                    cadZoomE.Start()                                ' por ahora mostramos el dibujo centrado, hasta q leamos el estado anterior

                    fmain.Text = f

                Case "dwg"

                    Inc Application.Busy
                    If main.convODA Then
                        fDxf = gcd.ODA_DWGtoDXF(f)
                    Else If main.convLibreDWG Then
                        fDxf = gcd.LibreDWGtoDXF(f)
                    End If
                    Dec Application.Busy

                    If fDxf = "" Then
                        Message(("Can't open file: Error On conversion"))
                        Try fmain.GLArea1.Enabled = True
                        Return
                    Endif

                    GoSub LoadDXF
                Case "dxf"
                    fDxf = f
                    GoSub LoadDXF

            End Select
        Endif

        'main.FillWindowMenu
        ' fmain.tabDrawings.Count += 1
        ' fmain.tabDrawings.Text = Left(f, 12)

        gcd.debugInfo("Showing drawing",,, True)
        gcd.DrawingReady = True
        fmain.GLArea1.Enabled = True
        ' this is what we are doing now
        gcd.clsJob = cadSelection
        gcd.clsJob.start()
        gcd.clsJobPrevious = cadSelection
        gcd.clsJobPreZoom = cadSelection
        gcd.clsJobPreviousParam = 0

        AddFilesOpen(f)

        gcd.redraw

    Else
        gcd.debugInfo("File not found",,, True)
        Me.FileNew

    Endif

    Config.FilesLastPath = Utils.PathFromFile(f)

    Dec Application.Busy
    Return

LoadDXF:
    Inc Application.Busy
    'NewDrawing = gcd.NewDrawing(f)

    NewDrawing = New Drawing

    ' esto es necesario porque muchas funciones usan gcd.Drawing
    gcd.Drawing = NewDrawing
    'gcd.LoadCommon  ' esto va antes de abrir el DXF o dara error cargando inserts
    ' el problema es que los common no tienen layer
    gcd.debugInfo("Leidos los bloques comunes")
    If dxf.LoadFile(fDxf, NewDrawing, False, False, False,, True) Then
        Message.Error(("There was an error opening the file"))
        NewDrawing = Null
        gcd.Drawing = gcd.Drawings.Last
        Return
    Endif

    ' If NewDrawing.Headers.FINGERPRINTGUID = "" Then
    '     NewDrawing.Headers.FINGERPRINTGUID = gcd.UniqueId()
    ' Endif
    gcd.Drawings.Add(NewDrawing, gcd.UniqueId())

    gcd.Drawing.FileName = f
    gcd.Drawing.RequiresFileRename = False

    Try gcd.Drawing.HandSeed = Val("&H" & gcd.Drawing.Headers.HandSeed)

    fmain.UpdateLayersCombo
    fmain.UpdateLineWtCombo
    fmain.UpdateLineTypeCombo
    fmain.UpdatDimTypeTypeCombo

    ' veo si tengo que cerrar la pestaña de nuevo
    Dim dTest As Drawing
    dTest = fmain.tabDrawings[fmain.tabDrawings.Index].Tag
    If dTest Then
        If dTest.RequiresFileRename And Not dTest.RequiresSaving Then 'estoy sobre una pestaña <new> donde no hice nada, la cierro
            gcd.Drawings.Remove(dTest.Headers.FINGERPRINTGUID)
            Wait 0.1
            fmain.tabDrawings_Close(fmain.tabDrawings.Index)

        End If
    End If
    gcd.Drawing = NewDrawing
    gcd.Drawing.Sheet = gcd.Drawing.Model
    fmain.NewTabForDrawing(NewDrawing)

    gcd.DrawingReady = True
    cadZoomE.Start()                                ' por ahora mostramos el dibujo centrado, hasta q leamos el estado anterior
    gcd.PanToOrigin()           '' FIXME: reponer cuando este el resto arreglado
    gcd.Regen()
    ' For Each s As Sheet In NewDrawing.Sheets
    '     gcd.Drawing.Sheet = s
    '     cadZoomE.Start()
    ' Next

    fmain.Text = f

    Return

End

Public Sub ExitProgram()

    Dim d As Drawing
    Dim e As Entity
    Dim L As Layer
    Dim s As Sheet

    For Each d In gcd.Drawings
        For Each s In d.sheets
            For Each e In s.Entities
                e.Polygon.Clear
                e.P.Clear
                e.Psel.Clear
                e.PolyLine.Clear
                'e.PoiPoints.Clear
                e.sParam.Clear
                e.fParam.Clear
                e.iParam.Clear
                gcd.CCC[e.gender] = Null
                e.PoiType.Clear
                gl.DeleteLists(e.glDrwList, 1)
                gl.DeleteLists(e.glDrwListSel, 1)
                gl.DeleteLists(e.glDrwListPOI, 1)
            Next

        Next
        d.sheets.Clear
        d.Blocks.Clear
        'd.handles.Clear
        d.Layers.Clear
        d.LineTypes.Clear

        d.TextStyles.Clear
        d.DimStyles.Clear

    Next

    main.SavePrintStyles
    main.SavePatterns
    Config.Save(Config.Depot)
    'Utils.SaveClass(Config, Config.ConfigFile)

    main.MyLog.Close()

    For Each w As Window In Windows
        Try w.Close()
    Next

    Quit

End

Public Sub AddFilesOpen(sFilename As String)

    ' verifico que ya lo tenga en la lista de recientes
    If sFilename = Config.FilesLastOpen1 Then Return ' nada que hacer

    ' ubico en primer lugar al archivo reciente
    If sFilename = Config.FilesLastOpen2 Then
        Swap Config.FilesLastOpen2, Config.FilesLastOpen1
        Return
    End If

    If sFilename = Config.FilesLastOpen3 Then
        Swap Config.FilesLastOpen3, Config.FilesLastOpen1
        Return
    End If
    If sFilename = Config.FilesLastOpen4 Then
        Swap Config.FilesLastOpen4, Config.FilesLastOpen1
        Return
    End If
    If sFilename = Config.FilesLastOpen5 Then
        Swap Config.FilesLastOpen5, Config.FilesLastOpen1
        Return
    End If

    If sFilename = Config.FilesLastOpen6 Then
        Swap Config.FilesLastOpen6, Config.FilesLastOpen1
        Return
    End If

    If sFilename = Config.FilesLastOpen7 Then
        Swap Config.FilesLastOpen7, Config.FilesLastOpen1
        Return
    End If
    If sFilename = Config.FilesLastOpen8 Then
        Swap Config.FilesLastOpen8, Config.FilesLastOpen1
        Return
    End If
    If sFilename = Config.FilesLastOpen9 Then
        Swap Config.FilesLastOpen9, Config.FilesLastOpen1
        Return
    End If

    If sFilename = Config.FilesLastOpen10 Then
        Swap Config.FilesLastOpen10, Config.FilesLastOpen1
        Return
    End If

    ' no lo tengo, descarto el ultimo y lo agrego al principio, desplazando el resto
    Config.FilesLastOpen10 = Config.FilesLastOpen9
    Config.FilesLastOpen9 = Config.FilesLastOpen8
    Config.FilesLastOpen8 = Config.FilesLastOpen7
    Config.FilesLastOpen7 = Config.FilesLastOpen6
    Config.FilesLastOpen6 = Config.FilesLastOpen5
    Config.FilesLastOpen5 = Config.FilesLastOpen4
    Config.FilesLastOpen4 = Config.FilesLastOpen3
    Config.FilesLastOpen3 = Config.FilesLastOpen2
    Config.FilesLastOpen2 = Config.FilesLastOpen1
    Config.FilesLastOpen1 = sFilename

End

Public Sub ActionActivate(sAction As String)

    ' Acciones de los botones y los menús (para no repetir código)
    ' El string de la acción es una propiedad de cada botón o menú
    ' El código que se ejecuta lo hace dentro de la rutina llamada, nunca dentro de este mismo evento.

    Dim r As Float
    Dim NewDrawing As Drawing
    Dim f, fDxf, fBak As String
    'Dim fMinimal As String = "./minimal/minimal-2010.dxf"
    Dim fMinimal As String = "./minimal/minimal.dxf"
    Dim fx As String[]
    Dim fbas As String
    Dim sWName As String
    Dim t As String
    Dim iColor, i As Integer
    Dim imgCirculito As Image
    Dim clsJob As String
    Dim d As Drawing
    Dim sActionParams As String[]

    Try gcd.debuginfo(Last.name)

    Select Case LCase(sAction)

        Case "applyprops"   ' FIXME: pasa al nuevo formulario flotante
            For i = 0 To fmain.fp.tblProperties.Rows.Max
                If fmain.fp.tblProperties[i, 1].Tag Then ' esta propiedad cambio
                    clsEntities.EditEntities(LCase(fmain.fp.tblProperties[i, 0].text), fmain.fp.tblProperties[i, 1].Text)
                End If
            Next
        Case "maximize"
            fmain.Border = Not fmain.Border
            If Not fmain.Border Then
                Layout.Fix(fmain)
            Endif

        Case "savesvg"
            Dim hsvg As New SvgImage
            Dim sFile As String
            sFile = gcd.Drawing.FileName & ".svg"
            If Left(sFile, 1) = "<" Then sFile = User.Home &/ "0-sin nombre.svg"
            hsvg.Resize(420, 297)

            gcd.FitEntitiesToImage(gcd.Drawing.Model.Entities, hsvg, -1, 0, Config.ModelBackgroundColor)
            If Exist(sFile) Then Kill sFile
            hsvg.Save(sFile)

        Case "new_sheet"

            fSheet.ShowModal()
            fmain.GLArea1.Refresh

        Case Like "_*"
            ' todo lo que empiece con _ lo envio al job
            gcd.clsJob.KeyText(sAction)
        Case "mentities-copy"
            Dim sToCopy As String
            For Each e As Entity In gcd.Drawing.Sheet.EntitiesSelected
                sToCopy &= clsEntities.EntityToJsonString(e)

            Next

            Clipboard.Clear
            Clipboard.Copy(sToCopy)

        Case "undo"

            gcd.Drawing.uUndo.DoUndo()
            gcd.Regen

        Case "redo"

            gcd.Drawing.uUndo.DoRedo()
            gcd.Regen

        Case "config"
            'fOptions.ShowModal
            FConfig.ShowModal()
            fmain.tabDrawings[0].Visible = True 'Config.ShowConsoleTab
            glx.ClearColor(Config.ModelBackgroundColor)

        Case "center"

            gcd.PanTo(0, 0)
            gcd.Redraw

        Case "exit"

            fmain.form_Close

        Case "regen"

            gcd.Regen

            ' Case "pdf_export"
            '
            '     If Printer1.Configure() Then Return
            '     Printer1.Print
        Case "print"

            If Not gcd.Drawing.CurrPrintStyle Then gcd.Drawing.CurrPrintStyle = New PrintStyle
            ' fPrint.Show '.run()
            gcd.clsJobPrevious = gcd.clsJob
            gcd.clsJob = cadPrint
            gcd.clsJob.run

        Case "undo"
            gcd.Drawing.uUndo.DoUndo()
            gcd.Regen

        Case "about"
            i = fAbout.ShowModal()

            ' Case "redo"
            '     gcd.Drawing.uUndo.DoRedo()
            '     gcd.Regen
        Case "window_close"

            gcd.Drawings.Remove(gcd.Drawing.Headers.FINGERPRINTGUID)
            If gcd.Drawings.Count > 0 Then
                gcd.Drawing = gcd.Drawings[gcd.Drawings.First]
                fmain.Redraw
            Else

                ActionActivate("file_new")
            Endif

        Case "window_closeall"
            gcd.Drawings.Clear
            ActionActivate("file_new")

        Case Like "windowchange_*"

            sWName = Mid(sAction, 14)

            For Each d In gcd.Drawings
                If sWName = d.FileName Then
                    gcd.Drawing = d
                    gcd.UpdateLayersCombo
                    gcd.UpdateLineWtCombo
                    gcd.UpdateLineTypeCombo
                    gcd.UpdatDimTypeTypeCombo
                    fmain.redraw
                    fmain.Text = f

                    'FillWindowMenu
                    Break
                Endif
            Next

        Case "file_quit"

            fmain.Close
            Quit

        Case "file_new"

            actions.FileNew

        Case "file_open"

            actions.FileOpen

        Case Like "file_open_*"

            sWName = Mid(sAction, 11)

            actions.FileOpen(sWName)

        Case "file_save"

            f = gcd.Drawing.FileName
            fbas = File.Dir(f) &/ File.BaseName(f)
            fBak = "'" & fbas & ".bak'"
            If gcd.Drawing.RequiresFileRename Then
                ActionActivate("file_saveas")
                Return
            Else
                If Exist(f) Then
                    If Exist(fBak) Then Shell "rm " & fBak Wait
                    Shell "mv '" & f & "' '" & fbas & ".bak'" Wait
                End If

                If File.Ext(f) = "dxf" Then
                    Dxf.SaveFile(f, gcd.Drawing)
                Else If File.Ext(f) = "dwg" Then
                    ' guardamos la version DXF en el dir adecuado, con el nombre elegido
                    't = main.dirDxfOut &/ Utils.FileWithoutExtension(Utils.FileFromPath(f)) & ".dxf"
                    t = Temp & ".dxf"
                    Dxf.SaveFile(t, gcd.Drawing)
                    t = gcd.oda_dxftodwg(t)
                    ' como el proceso de grabado pudo resultar en error, chequeo la existencia primero

                    If Exist(t) Then Move t To f

                End If

            Endif

        Case "file_saveas"

            f = gcd.Drawing.FileName
            fbas = File.Dir(f) &/ File.BaseName(f)
            fBak = "'" & fbas & ".bak'"

            Dialog.AutoExt = True
            Dialog.Filter = ["*.dxf", "DXF Drawing exchange 2010", "*.dwg", "DWG AutoCAD Drawing file 2010"]
            If Dialog.SaveFile() Then Return ' cancel saving

            f = Dialog.Path

            If File.Ext(f) = "" Then f = File.SetExt(f, "dxf")

            If Exist(f) Then
                If Message.Question(("The file exist"), ("Replace"), ("Cancel")) = 2 Then
                    f = ""
                Endif
            Endif

            If f = "" Then
                Print "Cancel"
            Else

                If Exist(f) Then
                    If Exist(fBak) Then Shell "rm " & fBak Wait
                    Shell "mv '" & f & "' '" & fbas & ".bak'" Wait
                End If

                gcd.Drawing.FileName = f
                gcd.Drawing.RequiresFileRename = False
                ActionActivate("file_save")

                fmain.Text = f

            Endif

        Case Like "cad*"

            ' actions, with & for additional parameters
            ' cadDimension_Linear&horizontal

            Dim o As Object, sRunWith As String, iParam As Integer, c As Class

            sActionParams = Split(sAction, "&")
            sRunWith = UCase(Mid(sActionParams[0], 4))
            Try iParam = CInt(sActionParams[1])

            o = gcd.CCC[sRunWith]
            If Not o Then Return
            gcd.clsJobPrevious = gcd.clsJob
            ' check if the class needs to be run trough other class
            If o.usewith = "" Then                        ' its a tool
                gcd.clsJob = o
                gcd.clsJob.start(iParam)

            Else                                           ' its propably an eentity

                gcd.clsJob = gcd.CCC[o.usewith]
                gcd.clsJob.start(o, iParam)

            End If

        Case Like "layer_change_*"

            Dim sLayerName As String

            sLayerName = Mid(sAction, 14)

            ' mbtLayers.Text = sLayerName
            ' iColor = gcd.Drawing.cLayers[sLayerName][dxf.codColor]
            ' mbtLayers.Picture = paintPlus.picCirculito(8, gcd.gColor[iColor], Color.ButtonForeground)

            ' informamos
            gcd.Drawing.CurrLayer = gcd.GetLayer(sLayerName)

            ' si tengo algo seleccionado, debo cambiar su color a este
            clsEntities.EditEntities("layer", gcd.Drawing.CurrLayer.name)

            clsEntities.DeSelection()

        Case Like "color_*"

            iColor = CInt(Mid(sAction, 7))
            fmain.mbtColors.Text = "Color " & CStr(iColor) 'Me.mbtColors.Children[iColor].Text
            If iColor = 256 Then fmain.mbtColors.Text = "ByLayer"
            If iColor = 257 Then fmain.mbtColors.Text = "ByBlock"

            fmain.mbtColors.Picture = paintPlus.picCirculito(8, gcd.gColor[iColor], Color.ButtonForeground)

            gcd.Drawing.CurrColor = iColor

            ' si tengo algo seleccionado, debo cambiar su color a este
            clsEntities.EditEntities("color", iColor)
            clsEntities.DeSelection()

        Case "more_colors"

            iColor = fColors.ShowModal()
            If iColor < 0 Then Return

            ActionActivate("color_" & CStr(iColor))

        Case Like "linewt_change_*"

            gcd.Drawing.CurrLineWt = CInt(Mid(sAction, 15)) / 100

            clsEntities.EditEntities("linewt", gcd.Drawing.CurrLineWt)
            clsEntities.DeSelection()

        Case Like "ltype_change_*"

            gcd.Drawing.CurrLineType = gcd.FindLType(Mid(sAction, 14))

            clsEntities.EditEntities("linetype", gcd.Drawing.CurrLineType)
            clsEntities.DeSelection()
        Case "dimstyle_change"
            gcd.Drawing.CurrDimStyle = gcd.Drawing.DimStyles[fMain.cmbDimStyle.Text]

        Case "grid"
            gcd.Drawing.GrIdActive = Not gcd.Drawing.GrIdActive
            If gcd.Drawing.GrIdActive Then DrawingAIds.RebuildGrId

        Case "ortho"
            gcd.Orthogonal = Not gcd.Orthogonal
        Case "snap"
            If gcd.SnapMode <> 0 Then gcd.SnapMode = 0 Else gcd.SnapMode = Config.SnapModeSaved
        Case "debugwindow"
            fDebug.Show()'If gcd.SnapMode <> 0 Then gcd.SnapMode = 0 Else gcd.SnapMode = Config.SnapModeSaved

        Case "selectadd"
            cadSelection.SelectMode = cadSelection.SelectModeAdd

        Case "selectrem"
            cadSelection.SelectMode = cadSelection.SelectModeRem

        Case "selectnew"
            cadSelection.SelectMode = cadSelection.SelectModeNew

        Case "selectsingle"

            gcd.clsJob.Cancel
            gcd.clsJob = cadSelection
            gcd.clsJob.start()
            cadSelection.SelectType = cadSelection.SelectTypeSingle

            ' pnlToolBarRigth.tbnSelectionRect.Value = False
            ' pnlToolBarRigth.tbnSelectionPoly.Value = False

        Case "selectrect"
            gcd.clsJob.Cancel
            gcd.clsJob = cadSelection
            gcd.clsJob.start()
            cadSelection.SelectType = cadSelection.SelectTypeRect
            ' pnlToolBarRigth.tbnSelectionSingle.Value = False
            '
            ' pnlToolBarRigth.tbnSelectionPoly.Value = False

        Case "selectpoly"
            gcd.clsJob.Cancel
            gcd.clsJob = cadSelection
            gcd.clsJob.start()
            cadSelection.SelectType = cadSelection.SelectTypePoly
            ' pnlToolBarRigth.tbnSelectionSingle.Value = False
            ' pnlToolBarRigth.tbnSelectionRect.Value = False

        Case "selectcross"
            cadSelection.SelectCrossing = Not cadSelection.SelectCrossing

        Case "options"
            fOptions.ShowModal
        Case "dimstyles"
            fDimStyles.ShowModal
            fmain.UpdatDimTypeTypeCombo()
            ' Case "dimstyle_change"
            ' dDimStyles.ShowModal

            '=================SNAP BUTTONS===========================================
            ' Utils.tbnCreator(pnlToolBarRigth, "tbnQuadrant", "snapquadrant")
            ' Utils.tbnCreator(pnlToolBarRigth, "tbnTangent", "snaptangent")
            ' Utils.tbnCreator(pnlToolBarRigth, "tbnbase_point", "snapbase")
            ' Utils.tbnCreator(pnlToolBarRigth, "tbnIntersection", "snapintersection")
            ' Utils.tbnCreator(pnlToolBarRigth, "tbnPerpendicular", "snapperpendicular")
            ' Utils.tbnCreator(pnlToolBarRigth, "tbnAparentCenter", "snapaparentcenter")
            ' Utils.tbnCreator(pnlToolBarRigth, "tbnNearest", "snapnearest")
        Case "snapend"
            gcd.SnapMode = gcd.poiEndPoint
        Case "snapcenter"
            gcd.SnapMode = gcd.poiCenter
        Case "snapmid"
            gcd.SnapMode = gcd.poiMIdPoint
        Case "snapquadrant"
            gcd.SnapMode = gcd.poiQuadrant
        Case "snaptangent"
            gcd.SnapMode = gcd.poiTangent
        Case "snapbase"
            gcd.SnapMode = gcd.poiBasePoint
        Case "snapintersection"
            gcd.SnapMode = gcd.poiIntersection
        Case "snapperpendicular"
            gcd.SnapMode = gcd.poiPerpendicular
        Case "snapaparentcenter"
            gcd.SnapMode = gcd.poiCenter
        Case "snapnearest"

            gcd.SnapMode = gcd.poiNearest

    End Select

End
