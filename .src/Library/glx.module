' Gambas module file

' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA

' El mundo segun OpenGL
'       +-------------------------------------------------------------------------------------------+
'       | 0,0                                     |top         x  P2 x,y                            |
'       |                                         |           /                                     |
'       |                                         |          /                                      |
'       |                                         |         /                                       |
'       |                                         |        /                                        |
'       |                                         |       x P1 x,y                                  |
'       |left                                     |                                           rigth | = glOrtho(left, rigth, bottom, top)
'       |-----------------------------------------+-------------------------------------------------|   el papel donde voy a dibujar
'       |                xxxxxxxxxxx              |0,0                                              |   = metros o lo que sea
'       |                xxxxxxxxxxx              |                                                 |   Establece la ProjectionMatrix
'       |                xxxx0,0xxxx              |                                                 |   y no se la toca mas
'       |                xxxxxxxxxxx              |                                                 |
'       |                xxxxxxxxxxx              |                                                 |
'       |                                         |                                                 |
'       |                     |<------------------|                                                 |
'       |             ModelMatrix>Translate       |                                                 |
'       |                                         |bottom                                           |gldrwArea.w,.h = Gl.Viewport = el area donde dibujo
'       +-------------------------------------------------------------------------------------------+           = pixeles
'Fast Unsafe
' una lbreria de funciones para pasar de Paint a OpenGL
Public Initialized As Boolean = False
Public ActualFont As LFFFonts                      ' the class
Public UnicodeFont As LFFFonts
Public ActualFontName As String = "romanc"          ' the name
Public ActualFontHeigth As Float = 1                ' the letter heigth
Public FontScale As Float = 0.1125                     ' the general scale factor

Public zLevel As Float = 0

Public FontsNameList As String[]            ' lista de fuentes LFF disponibles ya cargadas

Public FontsCAllLists As Integer[]          ' listas de listas de caracteres

Public glFont As New Collection

Public Struct textureSt
    FileName As String
    TextureName As String
    Id As Integer
    hImage As Image
End Struct

Public glTextures As New TextureSt[]

Public Struct GLColorSt

    r As Float
    g As Float
    b As Float
    Alpha As Float

End Struct
' A shader is a small C program that the GPU understands
' minimal shaders we need to compile at the GPU

Public shaVertexShaderSource As String
Public shaFragmentShaderSource As String

Public shaVert1 As Integer              '  main vertex shader
Public shaFrag1 As Integer              '  main fragment shader
Public shaderProgram As Integer       '  el programa que corre en la GPU

Public escalaGL As Float

Public ViewportWIdth As Integer
Public ViewportHeight As Integer

Public hText As New Integer[]

' new OpenGL stuff
Public GLDrwList As New Integer[]                       ' all entities, each one
Public GLDrwListEditing As New Integer[]                ' all entities on edit by some tool, including new ones

' lineas de puntos
Public LineStipples As New Integer[]
Public LineStippleScales As New Integer[]

' modo inmediato o programado
Public InmediateMode As Boolean = True
Public InmediateModeRequired As Boolean
Public VBO_present As Boolean = False   ' si tenemos VBO que dibujar

' VBO
Public VBO_Id As Integer                'Current VBO buffer
Public VBO_vertex As New Single[][]
Public VBO_colors As New Single[][]
Public VBO_normals As New Single[][]
Public VBO_pixels As New Single[][]
Public VBO_Primitive As New Integer[]
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA

Library "libGL:1"

'' WARNING: FLOAT en Gambas = DOUBLE en GL
''          SINGLE en Gambas = FLOAT en GL

Public Const DEPTH_BUFFER_BIT As Integer = &H000000000100
Public Const STENCIL_BUFFER_BIT As Integer = &H000000000400
Public Const COLOR_BUFFER_BIT As Integer = &H000000004000
Public Const FALSE As Integer = 0
Public Const TRUE As Integer = 1
Public Const POINTS As Integer = &H00000000
Public Const LINES As Integer = &H00000001
Public Const LINE_LOOP As Integer = &H00000002
Public Const LINE_STRIP As Integer = &H00000003
Public Const TRIANGLES As Integer = &H00000004
Public Const TRIANGLE_STRIP As Integer = &H00000005
Public Const TRIANGLE_FAN As Integer = &H00000006
Public Const QUADS As Integer = &H00000007
Public Const NEVER As Integer = &H00000200
Public Const LESS As Integer = &H00000201
Public Const EQUAL As Integer = &H00000202
Public Const LEQUAL As Integer = &H00000203
Public Const GREATER As Integer = &H00000204
Public Const NOTEQUAL As Integer = &H00000205
Public Const GEQUAL As Integer = &H00000206
Public Const ALWAYS As Integer = &H00000207
Public Const ZERO As Integer = 0
Public Const ONE As Integer = 1
Public Const SRC_COLOR As Integer = &H00000300
Public Const ONE_MINUS_SRC_COLOR As Integer = &H00000301
Public Const SRC_ALPHA As Integer = &H00000302
Public Const ONE_MINUS_SRC_ALPHA As Integer = &H00000303
Public Const DST_ALPHA As Integer = &H00000304
Public Const ONE_MINUS_DST_ALPHA As Integer = &H00000305
Public Const DST_COLOR As Integer = &H00000306
Public Const ONE_MINUS_DST_COLOR As Integer = &H00000307
Public Const SRC_ALPHA_SATURATE As Integer = &H00000308
Public Const NONE As Integer = 0
Public Const FRONT_LEFT As Integer = &H00000400
Public Const FRONT_RIGHT As Integer = &H00000401
Public Const BACK_LEFT As Integer = &H00000402
Public Const BACK_RIGHT As Integer = &H00000403
Public Const FRONT As Integer = &H00000404
Public Const BACK As Integer = &H00000405
Public Const LEFT As Integer = &H00000406
Public Const RIGHT As Integer = &H00000407
Public Const FRONT_AND_BACK As Integer = &H00000408
Public Const NO_ERROR As Integer = 0
Public Const INVALID_ENUM As Integer = &H00000500
Public Const INVALID_VALUE As Integer = &H00000501
Public Const INVALID_OPERATION As Integer = &H00000502
Public Const OUT_OF_MEMORY As Integer = &H00000505
Public Const CW As Integer = &H00000900
Public Const CCW As Integer = &H00000901
Public Const POINT_SIZE As Integer = &H00000B11
Public Const POINT_SIZE_RANGE As Integer = &H00000B12
Public Const POINT_SIZE_GRANULARITY As Integer = &H00000B13
Public Const LINE_SMOOTH As Integer = &H00000B20
Public Const LINE_WIDTH As Integer = &H00000B21
Public Const LINE_WIDTH_RANGE As Integer = &H00000B22
Public Const LINE_WIDTH_GRANULARITY As Integer = &H00000B23
Public Const POLYGON_MODE As Integer = &H00000B40
Public Const POLYGON_SMOOTH As Integer = &H00000B41
Public Const CULL_FACE As Integer = &H00000B44
Public Const CULL_FACE_MODE As Integer = &H00000B45
Public Const FRONT_FACE As Integer = &H00000B46
Public Const DEPTH_RANGE As Integer = &H00000B70
Public Const DEPTH_TEST As Integer = &H00000B71
Public Const DEPTH_WRITEMASK As Integer = &H00000B72
Public Const DEPTH_CLEAR_VALUE As Integer = &H00000B73
Public Const DEPTH_FUNC As Integer = &H00000B74
Public Const STENCIL_TEST As Integer = &H00000B90
Public Const STENCIL_CLEAR_VALUE As Integer = &H00000B91
Public Const STENCIL_FUNC As Integer = &H00000B92
Public Const STENCIL_VALUE_MASK As Integer = &H00000B93
Public Const STENCIL_FAIL As Integer = &H00000B94
Public Const STENCIL_PASS_DEPTH_FAIL As Integer = &H00000B95
Public Const STENCIL_PASS_DEPTH_PASS As Integer = &H00000B96
Public Const STENCIL_REF As Integer = &H00000B97
Public Const STENCIL_WRITEMASK As Integer = &H00000B98
Public Const VIEWPORT As Integer = &H00000BA2
Public Const DITHER As Integer = &H00000BD0
Public Const BLEND_DST As Integer = &H00000BE0
Public Const BLEND_SRC As Integer = &H00000BE1
Public Const BLEND As Integer = &H00000BE2
Public Const LOGIC_OP_MODE As Integer = &H00000BF0
Public Const DRAW_BUFFER As Integer = &H00000C01
Public Const READ_BUFFER As Integer = &H00000C02
Public Const SCISSOR_BOX As Integer = &H00000C10
Public Const SCISSOR_TEST As Integer = &H00000C11
Public Const COLOR_CLEAR_VALUE As Integer = &H00000C22
Public Const COLOR_WRITEMASK As Integer = &H00000C23
Public Const DOUBLEBUFFER As Integer = &H00000C32
Public Const STEREO As Integer = &H00000C33
Public Const LINE_SMOOTH_HINT As Integer = &H00000C52
Public Const POLYGON_SMOOTH_HINT As Integer = &H00000C53
Public Const UNPACK_SWAP_BYTES As Integer = &H00000CF0
Public Const UNPACK_LSB_FIRST As Integer = &H00000CF1
Public Const UNPACK_ROW_LENGTH As Integer = &H00000CF2
Public Const UNPACK_SKIP_ROWS As Integer = &H00000CF3
Public Const UNPACK_SKIP_PIXELS As Integer = &H00000CF4
Public Const UNPACK_ALIGNMENT As Integer = &H00000CF5
Public Const PACK_SWAP_BYTES As Integer = &H00000D00
Public Const PACK_LSB_FIRST As Integer = &H00000D01
Public Const PACK_ROW_LENGTH As Integer = &H00000D02
Public Const PACK_SKIP_ROWS As Integer = &H00000D03
Public Const PACK_SKIP_PIXELS As Integer = &H00000D04
Public Const PACK_ALIGNMENT As Integer = &H00000D05
Public Const MAX_TEXTURE_SIZE As Integer = &H00000D33
Public Const MAX_VIEWPORT_DIMS As Integer = &H00000D3A
Public Const SUBPIXEL_BITS As Integer = &H00000D50
Public Const TEXTURE_1D As Integer = &H00000DE0
Public Const TEXTURE_2D As Integer = &H00000DE1
Public Const TEXTURE_WIDTH As Integer = &H00001000
Public Const TEXTURE_HEIGHT As Integer = &H00001001
Public Const TEXTURE_BORDER_COLOR As Integer = &H00001004
Public Const DONT_CARE As Integer = &H00001100
Public Const FASTEST As Integer = &H00001101
Public Const NICEST As Integer = &H00001102
Public Const BYTE As Integer = &H00001400
Public Const UNSIGNED_BYTE As Integer = &H00001401
Public Const SHORT As Integer = &H00001402
Public Const UNSIGNED_SHORT As Integer = &H00001403
Public Const INT As Integer = &H00001404
Public Const UNSIGNED_INT As Integer = &H00001405
Public Const FLOAT As Integer = &H00001406
Public Const STACK_OVERFLOW As Integer = &H00000503
Public Const STACK_UNDERFLOW As Integer = &H00000504
Public Const CLEAR As Integer = &H00001500
Public Const AND As Integer = &H00001501
Public Const AND_REVERSE As Integer = &H00001502
Public Const COPY As Integer = &H00001503
Public Const AND_INVERTED As Integer = &H00001504
Public Const NOOP As Integer = &H00001505
Public Const XOR As Integer = &H00001506
Public Const OR As Integer = &H00001507
Public Const NOR As Integer = &H00001508
Public Const EQUIV As Integer = &H00001509
Public Const INVERT As Integer = &H0000150A
Public Const OR_REVERSE As Integer = &H0000150B
Public Const COPY_INVERTED As Integer = &H0000150C
Public Const OR_INVERTED As Integer = &H0000150D
Public Const NAND As Integer = &H0000150E
Public Const SET As Integer = &H0000150F
Public Const TEXTURE As Integer = &H00001702
Public Const COLOR As Integer = &H00001800
Public Const DEPTH As Integer = &H00001801
Public Const STENCIL As Integer = &H00001802
Public Const STENCIL_INDEX As Integer = &H00001901
Public Const DEPTH_COMPONENT As Integer = &H00001902
Public Const RED As Integer = &H00001903
Public Const GREEN As Integer = &H00001904
Public Const BLUE As Integer = &H00001905
Public Const ALPHA As Integer = &H00001906
Public Const RGB As Integer = &H00001907
Public Const RGBA As Integer = &H00001908
Public Const POINT As Integer = &H00001B00
Public Const LINE As Integer = &H00001B01
Public Const FILL As Integer = &H00001B02
Public Const KEEP As Integer = &H00001E00
Public Const REPLACE As Integer = &H00001E01
Public Const INCR As Integer = &H00001E02
Public Const DECR As Integer = &H00001E03
Public Const VENDOR As Integer = &H00001F00
Public Const RENDERER As Integer = &H00001F01
Public Const VERSION As Integer = &H00001F02
Public Const EXTENSIONS As Integer = &H00001F03
Public Const NEAREST As Integer = &H00002600
Public Const LINEAR As Integer = &H00002601
Public Const NEAREST_MIPMAP_NEAREST As Integer = &H00002700
Public Const LINEAR_MIPMAP_NEAREST As Integer = &H00002701
Public Const NEAREST_MIPMAP_LINEAR As Integer = &H00002702
Public Const LINEAR_MIPMAP_LINEAR As Integer = &H00002703
Public Const TEXTURE_MAG_FILTER As Integer = &H00002800
Public Const TEXTURE_MIN_FILTER As Integer = &H00002801
Public Const TEXTURE_WRAP_S As Integer = &H00002802
Public Const TEXTURE_WRAP_T As Integer = &H00002803
Public Const REPEAT As Integer = &H00002901

Public Const COLOR_LOGIC_OP As Integer = &H00000BF2
Public Const POLYGON_OFFSET_UNITS As Integer = &H00002A00
Public Const POLYGON_OFFSET_POINT As Integer = &H00002A01
Public Const POLYGON_OFFSET_LINE As Integer = &H00002A02
Public Const POLYGON_OFFSET_FILL As Integer = &H00008037
Public Const POLYGON_OFFSET_FACTOR As Integer = &H00008038
Public Const TEXTURE_BINDING_1D As Integer = &H00008068
Public Const TEXTURE_BINDING_2D As Integer = &H00008069
Public Const TEXTURE_INTERNAL_FORMAT As Integer = &H00001003
Public Const TEXTURE_RED_SIZE As Integer = &H0000805C
Public Const TEXTURE_GREEN_SIZE As Integer = &H0000805D
Public Const TEXTURE_BLUE_SIZE As Integer = &H0000805E
Public Const TEXTURE_ALPHA_SIZE As Integer = &H0000805F
Public Const DOUBLE As Integer = &H0000140A
Public Const PROXY_TEXTURE_1D As Integer = &H00008063
Public Const PROXY_TEXTURE_2D As Integer = &H00008064
Public Const R3_G3_B2 As Integer = &H00002A10
Public Const RGB4 As Integer = &H0000804F
Public Const RGB5 As Integer = &H00008050
Public Const RGB8 As Integer = &H00008051
Public Const RGB10 As Integer = &H00008052
Public Const RGB12 As Integer = &H00008053
Public Const RGB16 As Integer = &H00008054
Public Const RGBA2 As Integer = &H00008055
Public Const RGBA4 As Integer = &H00008056
Public Const RGB5_A1 As Integer = &H00008057
Public Const RGBA8 As Integer = &H00008058
Public Const RGB10_A2 As Integer = &H00008059
Public Const RGBA12 As Integer = &H0000805A
Public Const RGBA16 As Integer = &H0000805B
Public Const VERTEX_ARRAY As Integer = &H00008074
Public Const NORMAL_ARRAY As Integer = &H00008075
Public Const COLOR_ARRAY As Integer = &H00008076
Public Const INDEX_ARRAY As Integer = &H00008077
Public Const TEXTURE_COORD_ARRAY As Integer = &H00008078
Public Const EDGE_FLAG_ARRAY As Integer = &H00008079

Public Const UNSIGNED_BYTE_3_3_2 As Integer = &H00008032
Public Const UNSIGNED_SHORT_4_4_4_4 As Integer = &H00008033
Public Const UNSIGNED_SHORT_5_5_5_1 As Integer = &H00008034
Public Const UNSIGNED_INT_8_8_8_8 As Integer = &H00008035
Public Const UNSIGNED_INT_10_10_10_2 As Integer = &H00008036
Public Const TEXTURE_BINDING_3D As Integer = &H0000806A
Public Const PACK_SKIP_IMAGES As Integer = &H0000806B
Public Const PACK_IMAGE_HEIGHT As Integer = &H0000806C
Public Const UNPACK_SKIP_IMAGES As Integer = &H0000806D
Public Const UNPACK_IMAGE_HEIGHT As Integer = &H0000806E
Public Const TEXTURE_3D As Integer = &H0000806F
Public Const PROXY_TEXTURE_3D As Integer = &H00008070
Public Const TEXTURE_DEPTH As Integer = &H00008071
Public Const TEXTURE_WRAP_R As Integer = &H00008072
Public Const MAX_3D_TEXTURE_SIZE As Integer = &H00008073
Public Const UNSIGNED_BYTE_2_3_3_REV As Integer = &H00008362
Public Const UNSIGNED_SHORT_5_6_5 As Integer = &H00008363
Public Const UNSIGNED_SHORT_5_6_5_REV As Integer = &H00008364
Public Const UNSIGNED_SHORT_4_4_4_4_REV As Integer = &H00008365
Public Const UNSIGNED_SHORT_1_5_5_5_REV As Integer = &H00008366
Public Const UNSIGNED_INT_8_8_8_8_REV As Integer = &H00008367
Public Const UNSIGNED_INT_2_10_10_10_REV As Integer = &H00008368
Public Const BGR As Integer = &H000080E0
Public Const BGRA As Integer = &H000080E1
Public Const MAX_ELEMENTS_VERTICES As Integer = &H000080E8
Public Const MAX_ELEMENTS_INDICES As Integer = &H000080E9
Public Const CLAMP_TO_EDGE As Integer = &H0000812F
Public Const TEXTURE_MIN_LOD As Integer = &H0000813A
Public Const TEXTURE_MAX_LOD As Integer = &H0000813B
Public Const TEXTURE_BASE_LEVEL As Integer = &H0000813C
Public Const TEXTURE_MAX_LEVEL As Integer = &H0000813D
Public Const SMOOTH_POINT_SIZE_RANGE As Integer = &H00000B12
Public Const SMOOTH_POINT_SIZE_GRANULARITY As Integer = &H00000B13
Public Const SMOOTH_LINE_WIDTH_RANGE As Integer = &H00000B22
Public Const SMOOTH_LINE_WIDTH_GRANULARITY As Integer = &H00000B23
Public Const ALIASED_LINE_WIDTH_RANGE As Integer = &H0000846E
Public Const TEXTURE0 As Integer = &H000084C0
Public Const TEXTURE1 As Integer = &H000084C1
Public Const TEXTURE2 As Integer = &H000084C2
Public Const TEXTURE3 As Integer = &H000084C3
Public Const TEXTURE4 As Integer = &H000084C4
Public Const TEXTURE5 As Integer = &H000084C5
Public Const TEXTURE6 As Integer = &H000084C6
Public Const TEXTURE7 As Integer = &H000084C7
Public Const TEXTURE8 As Integer = &H000084C8
Public Const TEXTURE9 As Integer = &H000084C9
Public Const TEXTURE10 As Integer = &H000084CA
Public Const TEXTURE11 As Integer = &H000084CB
Public Const TEXTURE12 As Integer = &H000084CC
Public Const TEXTURE13 As Integer = &H000084CD
Public Const TEXTURE14 As Integer = &H000084CE
Public Const TEXTURE15 As Integer = &H000084CF
Public Const TEXTURE16 As Integer = &H000084D0
Public Const TEXTURE17 As Integer = &H000084D1
Public Const TEXTURE18 As Integer = &H000084D2
Public Const TEXTURE19 As Integer = &H000084D3
Public Const TEXTURE20 As Integer = &H000084D4
Public Const TEXTURE21 As Integer = &H000084D5
Public Const TEXTURE22 As Integer = &H000084D6
Public Const TEXTURE23 As Integer = &H000084D7
Public Const TEXTURE24 As Integer = &H000084D8
Public Const TEXTURE25 As Integer = &H000084D9
Public Const TEXTURE26 As Integer = &H000084DA
Public Const TEXTURE27 As Integer = &H000084DB
Public Const TEXTURE28 As Integer = &H000084DC
Public Const TEXTURE29 As Integer = &H000084DD
Public Const TEXTURE30 As Integer = &H000084DE
Public Const TEXTURE31 As Integer = &H000084DF
Public Const ACTIVE_TEXTURE As Integer = &H000084E0
Public Const MULTISAMPLE As Integer = &H0000809D
Public Const SAMPLE_ALPHA_TO_COVERAGE As Integer = &H0000809E
Public Const SAMPLE_ALPHA_TO_ONE As Integer = &H0000809F
Public Const SAMPLE_COVERAGE As Integer = &H000080A0
Public Const SAMPLE_BUFFERS As Integer = &H000080A8
Public Const SAMPLES As Integer = &H000080A9
Public Const SAMPLE_COVERAGE_VALUE As Integer = &H000080AA
Public Const SAMPLE_COVERAGE_INVERT As Integer = &H000080AB
Public Const TEXTURE_CUBE_MAP As Integer = &H00008513
Public Const TEXTURE_BINDING_CUBE_MAP As Integer = &H00008514
Public Const TEXTURE_CUBE_MAP_POSITIVE_X As Integer = &H00008515
Public Const TEXTURE_CUBE_MAP_NEGATIVE_X As Integer = &H00008516
Public Const TEXTURE_CUBE_MAP_POSITIVE_Y As Integer = &H00008517
Public Const TEXTURE_CUBE_MAP_NEGATIVE_Y As Integer = &H00008518
Public Const TEXTURE_CUBE_MAP_POSITIVE_Z As Integer = &H00008519
Public Const TEXTURE_CUBE_MAP_NEGATIVE_Z As Integer = &H0000851A
Public Const PROXY_TEXTURE_CUBE_MAP As Integer = &H0000851B
Public Const MAX_CUBE_MAP_TEXTURE_SIZE As Integer = &H0000851C
Public Const COMPRESSED_RGB As Integer = &H000084ED
Public Const COMPRESSED_RGBA As Integer = &H000084EE
Public Const TEXTURE_COMPRESSION_HINT As Integer = &H000084EF
Public Const TEXTURE_COMPRESSED_IMAGE_SIZE As Integer = &H000086A0
Public Const TEXTURE_COMPRESSED As Integer = &H000086A1
Public Const NUM_COMPRESSED_TEXTURE_FORMATS As Integer = &H000086A2
Public Const COMPRESSED_TEXTURE_FORMATS As Integer = &H000086A3
Public Const CLAMP_TO_BORDER As Integer = &H0000812D

Public Const BLEND_DST_RGB As Integer = &H000080C8
Public Const BLEND_SRC_RGB As Integer = &H000080C9
Public Const BLEND_DST_ALPHA As Integer = &H000080CA
Public Const BLEND_SRC_ALPHA As Integer = &H000080CB
Public Const POINT_FADE_THRESHOLD_SIZE As Integer = &H00008128
Public Const DEPTH_COMPONENT16 As Integer = &H000081A5
Public Const DEPTH_COMPONENT24 As Integer = &H000081A6
Public Const DEPTH_COMPONENT32 As Integer = &H000081A7
Public Const MIRRORED_REPEAT As Integer = &H00008370
Public Const MAX_TEXTURE_LOD_BIAS As Integer = &H000084FD
Public Const TEXTURE_LOD_BIAS As Integer = &H00008501
Public Const INCR_WRAP As Integer = &H00008507
Public Const DECR_WRAP As Integer = &H00008508
Public Const TEXTURE_DEPTH_SIZE As Integer = &H0000884A
Public Const TEXTURE_COMPARE_MODE As Integer = &H0000884C
Public Const TEXTURE_COMPARE_FUNC As Integer = &H0000884D
Public Const BLEND_COLOR As Integer = &H00008005
Public Const BLEND_EQUATION As Integer = &H00008009
Public Const CONSTANT_COLOR As Integer = &H00008001
Public Const ONE_MINUS_CONSTANT_COLOR As Integer = &H00008002
Public Const CONSTANT_ALPHA As Integer = &H00008003
Public Const ONE_MINUS_CONSTANT_ALPHA As Integer = &H00008004
Public Const FUNC_ADD As Integer = &H00008006
Public Const FUNC_REVERSE_SUBTRACT As Integer = &H0000800B
Public Const FUNC_SUBTRACT As Integer = &H0000800A
Public Const MIN As Integer = &H00008007
Public Const MAX As Integer = &H00008008
Public Const BUFFER_SIZE As Integer = &H00008764
Public Const BUFFER_USAGE As Integer = &H00008765
Public Const QUERY_COUNTER_BITS As Integer = &H00008864
Public Const CURRENT_QUERY As Integer = &H00008865
Public Const QUERY_RESULT As Integer = &H00008866
Public Const QUERY_RESULT_AVAILABLE As Integer = &H00008867
Public Const ARRAY_BUFFER As Integer = &H00008892
Public Const ELEMENT_ARRAY_BUFFER As Integer = &H00008893
Public Const ARRAY_BUFFER_BINDING As Integer = &H00008894
Public Const ELEMENT_ARRAY_BUFFER_BINDING As Integer = &H00008895
Public Const VERTEX_ATTRIB_ARRAY_BUFFER_BINDING As Integer = &H0000889F
Public Const READ_ONLY As Integer = &H000088B8
Public Const WRITE_ONLY As Integer = &H000088B9
Public Const READ_WRITE As Integer = &H000088BA
Public Const BUFFER_ACCESS As Integer = &H000088BB
Public Const BUFFER_MAPPED As Integer = &H000088BC
Public Const BUFFER_MAP_POINTER As Integer = &H000088BD
Public Const STREAM_DRAW As Integer = &H000088E0
Public Const STREAM_READ As Integer = &H000088E1
Public Const STREAM_COPY As Integer = &H000088E2
Public Const STATIC_DRAW As Integer = &H000088E4
Public Const STATIC_READ As Integer = &H000088E5
Public Const STATIC_COPY As Integer = &H000088E6
Public Const DYNAMIC_DRAW As Integer = &H000088E8
Public Const DYNAMIC_READ As Integer = &H000088E9
Public Const DYNAMIC_COPY As Integer = &H000088EA
Public Const SAMPLES_PASSED As Integer = &H00008914
Public Const SRC1_ALPHA As Integer = &H00008589
Public Const BLEND_EQUATION_RGB As Integer = &H00008009
Public Const VERTEX_ATTRIB_ARRAY_ENABLED As Integer = &H00008622
Public Const VERTEX_ATTRIB_ARRAY_SIZE As Integer = &H00008623
Public Const VERTEX_ATTRIB_ARRAY_STRIDE As Integer = &H00008624
Public Const VERTEX_ATTRIB_ARRAY_TYPE As Integer = &H00008625
Public Const CURRENT_VERTEX_ATTRIB As Integer = &H00008626
Public Const VERTEX_PROGRAM_POINT_SIZE As Integer = &H00008642
Public Const VERTEX_ATTRIB_ARRAY_POINTER As Integer = &H00008645
Public Const STENCIL_BACK_FUNC As Integer = &H00008800
Public Const STENCIL_BACK_FAIL As Integer = &H00008801
Public Const STENCIL_BACK_PASS_DEPTH_FAIL As Integer = &H00008802
Public Const STENCIL_BACK_PASS_DEPTH_PASS As Integer = &H00008803
Public Const MAX_DRAW_BUFFERS As Integer = &H00008824
Public Const DRAW_BUFFER0 As Integer = &H00008825
Public Const DRAW_BUFFER1 As Integer = &H00008826
Public Const DRAW_BUFFER2 As Integer = &H00008827
Public Const DRAW_BUFFER3 As Integer = &H00008828
Public Const DRAW_BUFFER4 As Integer = &H00008829
Public Const DRAW_BUFFER5 As Integer = &H0000882A
Public Const DRAW_BUFFER6 As Integer = &H0000882B
Public Const DRAW_BUFFER7 As Integer = &H0000882C
Public Const DRAW_BUFFER8 As Integer = &H0000882D
Public Const DRAW_BUFFER9 As Integer = &H0000882E
Public Const DRAW_BUFFER10 As Integer = &H0000882F
Public Const DRAW_BUFFER11 As Integer = &H00008830
Public Const DRAW_BUFFER12 As Integer = &H00008831
Public Const DRAW_BUFFER13 As Integer = &H00008832
Public Const DRAW_BUFFER14 As Integer = &H00008833
Public Const DRAW_BUFFER15 As Integer = &H00008834
Public Const BLEND_EQUATION_ALPHA As Integer = &H0000883D
Public Const MAX_VERTEX_ATTRIBS As Integer = &H00008869
Public Const VERTEX_ATTRIB_ARRAY_NORMALIZED As Integer = &H0000886A
Public Const MAX_TEXTURE_IMAGE_UNITS As Integer = &H00008872
Public Const FRAGMENT_SHADER As Integer = &H00008B30
Public Const VERTEX_SHADER As Integer = &H00008B31
Public Const MAX_FRAGMENT_UNIFORM_COMPONENTS As Integer = &H00008B49
Public Const MAX_VERTEX_UNIFORM_COMPONENTS As Integer = &H00008B4A
Public Const MAX_VARYING_singleS As Integer = &H00008B4B
Public Const MAX_VERTEX_TEXTURE_IMAGE_UNITS As Integer = &H00008B4C
Public Const MAX_COMBINED_TEXTURE_IMAGE_UNITS As Integer = &H00008B4D
Public Const SHADER_TYPE As Integer = &H00008B4F
Public Const single_VEC2 As Integer = &H00008B50
Public Const single_VEC3 As Integer = &H00008B51
Public Const single_VEC4 As Integer = &H00008B52
Public Const INT_VEC2 As Integer = &H00008B53
Public Const INT_VEC3 As Integer = &H00008B54
Public Const INT_VEC4 As Integer = &H00008B55
Public Const BOOL As Integer = &H00008B56
Public Const BOOL_VEC2 As Integer = &H00008B57
Public Const BOOL_VEC3 As Integer = &H00008B58
Public Const BOOL_VEC4 As Integer = &H00008B59
Public Const single_MAT2 As Integer = &H00008B5A
Public Const single_MAT3 As Integer = &H00008B5B
Public Const single_MAT4 As Integer = &H00008B5C
Public Const SAMPLER_1D As Integer = &H00008B5D
Public Const SAMPLER_2D As Integer = &H00008B5E
Public Const SAMPLER_3D As Integer = &H00008B5F
Public Const SAMPLER_CUBE As Integer = &H00008B60
Public Const SAMPLER_1D_SHADOW As Integer = &H00008B61
Public Const SAMPLER_2D_SHADOW As Integer = &H00008B62
Public Const DELETE_STATUS As Integer = &H00008B80
Public Const COMPILE_STATUS As Integer = &H00008B81
Public Const LINK_STATUS As Integer = &H00008B82
Public Const VALIDATE_STATUS As Integer = &H00008B83
Public Const INFO_LOG_LENGTH As Integer = &H00008B84
Public Const ATTACHED_SHADERS As Integer = &H00008B85
Public Const ACTIVE_UNIFORMS As Integer = &H00008B86
Public Const ACTIVE_UNIFORM_MAX_LENGTH As Integer = &H00008B87
Public Const SHADER_SOURCE_LENGTH As Integer = &H00008B88
Public Const ACTIVE_ATTRIBUTES As Integer = &H00008B89
Public Const ACTIVE_ATTRIBUTE_MAX_LENGTH As Integer = &H00008B8A
Public Const FRAGMENT_SHADER_DERIVATIVE_HINT As Integer = &H00008B8B
Public Const SHADING_LANGUAGE_VERSION As Integer = &H00008B8C
Public Const CURRENT_PROGRAM As Integer = &H00008B8D
Public Const POINT_SPRITE_COORD_ORIGIN As Integer = &H00008CA0
Public Const LOWER_LEFT As Integer = &H00008CA1
Public Const UPPER_LEFT As Integer = &H00008CA2
Public Const STENCIL_BACK_REF As Integer = &H00008CA3
Public Const STENCIL_BACK_VALUE_MASK As Integer = &H00008CA4
Public Const STENCIL_BACK_WRITEMASK As Integer = &H00008CA5
Public Const PIXEL_PACK_BUFFER As Integer = &H000088EB
Public Const PIXEL_UNPACK_BUFFER As Integer = &H000088EC
Public Const PIXEL_PACK_BUFFER_BINDING As Integer = &H000088ED
Public Const PIXEL_UNPACK_BUFFER_BINDING As Integer = &H000088EF
Public Const single_MAT2x3 As Integer = &H00008B65
Public Const single_MAT2x4 As Integer = &H00008B66
Public Const single_MAT3x2 As Integer = &H00008B67
Public Const single_MAT3x4 As Integer = &H00008B68
Public Const single_MAT4x2 As Integer = &H00008B69
Public Const single_MAT4x3 As Integer = &H00008B6A
Public Const SRGB As Integer = &H00008C40
Public Const SRGB8 As Integer = &H00008C41
Public Const SRGB_ALPHA As Integer = &H00008C42
Public Const SRGB8_ALPHA8 As Integer = &H00008C43
Public Const COMPRESSED_SRGB As Integer = &H00008C48
Public Const COMPRESSED_SRGB_ALPHA As Integer = &H00008C49
Public Const COMPARE_REF_TO_TEXTURE As Integer = &H0000884E
Public Const CLIP_DISTANCE0 As Integer = &H00003000
Public Const CLIP_DISTANCE1 As Integer = &H00003001
Public Const CLIP_DISTANCE2 As Integer = &H00003002
Public Const CLIP_DISTANCE3 As Integer = &H00003003
Public Const CLIP_DISTANCE4 As Integer = &H00003004
Public Const CLIP_DISTANCE5 As Integer = &H00003005
Public Const CLIP_DISTANCE6 As Integer = &H00003006
Public Const CLIP_DISTANCE7 As Integer = &H00003007
Public Const MAX_CLIP_DISTANCES As Integer = &H00000D32
Public Const MAJOR_VERSION As Integer = &H0000821B
Public Const MINOR_VERSION As Integer = &H0000821C
Public Const NUM_EXTENSIONS As Integer = &H0000821D
Public Const CONTEXT_FLAGS As Integer = &H0000821E
Public Const COMPRESSED_RED As Integer = &H00008225
Public Const COMPRESSED_RG As Integer = &H00008226
Public Const CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT As Integer = &H000000000001
Public Const RGBA32F As Integer = &H00008814
Public Const RGB32F As Integer = &H00008815
Public Const RGBA16F As Integer = &H0000881A
Public Const RGB16F As Integer = &H0000881B
Public Const VERTEX_ATTRIB_ARRAY_INTEGER As Integer = &H000088FD
Public Const MAX_ARRAY_TEXTURE_LAYERS As Integer = &H000088FF
Public Const MIN_PROGRAM_TEXEL_OFFSET As Integer = &H00008904
Public Const MAX_PROGRAM_TEXEL_OFFSET As Integer = &H00008905
Public Const CLAMP_READ_COLOR As Integer = &H0000891C
Public Const FIXED_ONLY As Integer = &H0000891D
Public Const MAX_VARYING_COMPONENTS As Integer = &H00008B4B
Public Const TEXTURE_1D_ARRAY As Integer = &H00008C18
Public Const PROXY_TEXTURE_1D_ARRAY As Integer = &H00008C19
Public Const TEXTURE_2D_ARRAY As Integer = &H00008C1A
Public Const PROXY_TEXTURE_2D_ARRAY As Integer = &H00008C1B
Public Const TEXTURE_BINDING_1D_ARRAY As Integer = &H00008C1C
Public Const TEXTURE_BINDING_2D_ARRAY As Integer = &H00008C1D
Public Const R11F_G11F_B10F As Integer = &H00008C3A
Public Const UNSIGNED_INT_10F_11F_11F_REV As Integer = &H00008C3B
Public Const RGB9_E5 As Integer = &H00008C3D
Public Const UNSIGNED_INT_5_9_9_9_REV As Integer = &H00008C3E
Public Const TEXTURE_SHARED_SIZE As Integer = &H00008C3F
Public Const TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH As Integer = &H00008C76
Public Const TRANSFORM_FEEDBACK_BUFFER_MODE As Integer = &H00008C7F
Public Const MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS As Integer = &H00008C80
Public Const TRANSFORM_FEEDBACK_VARYINGS As Integer = &H00008C83
Public Const TRANSFORM_FEEDBACK_BUFFER_START As Integer = &H00008C84
Public Const TRANSFORM_FEEDBACK_BUFFER_SIZE As Integer = &H00008C85
Public Const PRIMITIVES_GENERATED As Integer = &H00008C87
Public Const TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN As Integer = &H00008C88
Public Const RASTERIZER_DISCARD As Integer = &H00008C89
Public Const MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS As Integer = &H00008C8A
Public Const MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS As Integer = &H00008C8B
Public Const INTERLEAVED_ATTRIBS As Integer = &H00008C8C
Public Const SEPARATE_ATTRIBS As Integer = &H00008C8D
Public Const TRANSFORM_FEEDBACK_BUFFER As Integer = &H00008C8E
Public Const TRANSFORM_FEEDBACK_BUFFER_BINDING As Integer = &H00008C8F
Public Const RGBA32UI As Integer = &H00008D70
Public Const RGB32UI As Integer = &H00008D71
Public Const RGBA16UI As Integer = &H00008D76
Public Const RGB16UI As Integer = &H00008D77
Public Const RGBA8UI As Integer = &H00008D7C
Public Const RGB8UI As Integer = &H00008D7D
Public Const RGBA32I As Integer = &H00008D82
Public Const RGB32I As Integer = &H00008D83
Public Const RGBA16I As Integer = &H00008D88
Public Const RGB16I As Integer = &H00008D89
Public Const RGBA8I As Integer = &H00008D8E
Public Const RGB8I As Integer = &H00008D8F
Public Const RED_INTEGER As Integer = &H00008D94
Public Const GREEN_INTEGER As Integer = &H00008D95
Public Const BLUE_INTEGER As Integer = &H00008D96
Public Const RGB_INTEGER As Integer = &H00008D98
Public Const RGBA_INTEGER As Integer = &H00008D99
Public Const BGR_INTEGER As Integer = &H00008D9A
Public Const BGRA_INTEGER As Integer = &H00008D9B
Public Const SAMPLER_1D_ARRAY As Integer = &H00008DC0
Public Const SAMPLER_2D_ARRAY As Integer = &H00008DC1
Public Const SAMPLER_1D_ARRAY_SHADOW As Integer = &H00008DC3
Public Const SAMPLER_2D_ARRAY_SHADOW As Integer = &H00008DC4
Public Const SAMPLER_CUBE_SHADOW As Integer = &H00008DC5
Public Const UNSIGNED_INT_VEC2 As Integer = &H00008DC6
Public Const UNSIGNED_INT_VEC3 As Integer = &H00008DC7
Public Const UNSIGNED_INT_VEC4 As Integer = &H00008DC8
Public Const INT_SAMPLER_1D As Integer = &H00008DC9
Public Const INT_SAMPLER_2D As Integer = &H00008DCA
Public Const INT_SAMPLER_3D As Integer = &H00008DCB
Public Const INT_SAMPLER_CUBE As Integer = &H00008DCC
Public Const INT_SAMPLER_1D_ARRAY As Integer = &H00008DCE
Public Const INT_SAMPLER_2D_ARRAY As Integer = &H00008DCF
Public Const UNSIGNED_INT_SAMPLER_1D As Integer = &H00008DD1
Public Const UNSIGNED_INT_SAMPLER_2D As Integer = &H00008DD2
Public Const UNSIGNED_INT_SAMPLER_3D As Integer = &H00008DD3
Public Const UNSIGNED_INT_SAMPLER_CUBE As Integer = &H00008DD4
Public Const UNSIGNED_INT_SAMPLER_1D_ARRAY As Integer = &H00008DD6
Public Const UNSIGNED_INT_SAMPLER_2D_ARRAY As Integer = &H00008DD7
Public Const QUERY_WAIT As Integer = &H00008E13
Public Const QUERY_NO_WAIT As Integer = &H00008E14
Public Const QUERY_BY_REGION_WAIT As Integer = &H00008E15
Public Const QUERY_BY_REGION_NO_WAIT As Integer = &H00008E16
Public Const BUFFER_ACCESS_FLAGS As Integer = &H0000911F
Public Const BUFFER_MAP_LENGTH As Integer = &H00009120
Public Const BUFFER_MAP_OFFSET As Integer = &H00009121
Public Const DEPTH_COMPONENT32F As Integer = &H00008CAC
Public Const DEPTH32F_STENCIL8 As Integer = &H00008CAD
Public Const single_32_UNSIGNED_INT_24_8_REV As Integer = &H00008DAD
Public Const INVALID_FRAMEBUFFER_OPERATION As Integer = &H00000506
Public Const FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING As Integer = &H00008210
Public Const FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE As Integer = &H00008211
Public Const FRAMEBUFFER_ATTACHMENT_RED_SIZE As Integer = &H00008212
Public Const FRAMEBUFFER_ATTACHMENT_GREEN_SIZE As Integer = &H00008213
Public Const FRAMEBUFFER_ATTACHMENT_BLUE_SIZE As Integer = &H00008214
Public Const FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE As Integer = &H00008215
Public Const FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE As Integer = &H00008216
Public Const FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE As Integer = &H00008217
Public Const FRAMEBUFFER_DEFAULT As Integer = &H00008218
Public Const FRAMEBUFFER_UNDEFINED As Integer = &H00008219
Public Const DEPTH_STENCIL_ATTACHMENT As Integer = &H0000821A
Public Const MAX_RENDERBUFFER_SIZE As Integer = &H000084E8
Public Const DEPTH_STENCIL As Integer = &H000084F9
Public Const UNSIGNED_INT_24_8 As Integer = &H000084FA
Public Const DEPTH24_STENCIL8 As Integer = &H000088F0
Public Const TEXTURE_STENCIL_SIZE As Integer = &H000088F1
Public Const TEXTURE_RED_TYPE As Integer = &H00008C10
Public Const TEXTURE_GREEN_TYPE As Integer = &H00008C11
Public Const TEXTURE_BLUE_TYPE As Integer = &H00008C12
Public Const TEXTURE_ALPHA_TYPE As Integer = &H00008C13
Public Const TEXTURE_DEPTH_TYPE As Integer = &H00008C16
Public Const UNSIGNED_NORMALIZED As Integer = &H00008C17
Public Const FRAMEBUFFER_BINDING As Integer = &H00008CA6
Public Const DRAW_FRAMEBUFFER_BINDING As Integer = &H00008CA6
Public Const RENDERBUFFER_BINDING As Integer = &H00008CA7
Public Const READ_FRAMEBUFFER As Integer = &H00008CA8
Public Const DRAW_FRAMEBUFFER As Integer = &H00008CA9
Public Const READ_FRAMEBUFFER_BINDING As Integer = &H00008CAA
Public Const RENDERBUFFER_SAMPLES As Integer = &H00008CAB
Public Const FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE As Integer = &H00008CD0
Public Const FRAMEBUFFER_ATTACHMENT_OBJECT_NAME As Integer = &H00008CD1
Public Const FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL As Integer = &H00008CD2
Public Const FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE As Integer = &H00008CD3
Public Const FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER As Integer = &H00008CD4
Public Const FRAMEBUFFER_COMPLETE As Integer = &H00008CD5
Public Const FRAMEBUFFER_INCOMPLETE_ATTACHMENT As Integer = &H00008CD6
Public Const FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT As Integer = &H00008CD7
Public Const FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER As Integer = &H00008CDB
Public Const FRAMEBUFFER_INCOMPLETE_READ_BUFFER As Integer = &H00008CDC
Public Const FRAMEBUFFER_UNSUPPORTED As Integer = &H00008CDD
Public Const MAX_COLOR_ATTACHMENTS As Integer = &H00008CDF
Public Const COLOR_ATTACHMENT0 As Integer = &H00008CE0
Public Const COLOR_ATTACHMENT1 As Integer = &H00008CE1
Public Const COLOR_ATTACHMENT2 As Integer = &H00008CE2
Public Const COLOR_ATTACHMENT3 As Integer = &H00008CE3
Public Const COLOR_ATTACHMENT4 As Integer = &H00008CE4
Public Const COLOR_ATTACHMENT5 As Integer = &H00008CE5
Public Const COLOR_ATTACHMENT6 As Integer = &H00008CE6
Public Const COLOR_ATTACHMENT7 As Integer = &H00008CE7
Public Const COLOR_ATTACHMENT8 As Integer = &H00008CE8
Public Const COLOR_ATTACHMENT9 As Integer = &H00008CE9
Public Const COLOR_ATTACHMENT10 As Integer = &H00008CEA
Public Const COLOR_ATTACHMENT11 As Integer = &H00008CEB
Public Const COLOR_ATTACHMENT12 As Integer = &H00008CEC
Public Const COLOR_ATTACHMENT13 As Integer = &H00008CED
Public Const COLOR_ATTACHMENT14 As Integer = &H00008CEE
Public Const COLOR_ATTACHMENT15 As Integer = &H00008CEF
Public Const COLOR_ATTACHMENT16 As Integer = &H00008CF0
Public Const COLOR_ATTACHMENT17 As Integer = &H00008CF1
Public Const COLOR_ATTACHMENT18 As Integer = &H00008CF2
Public Const COLOR_ATTACHMENT19 As Integer = &H00008CF3
Public Const COLOR_ATTACHMENT20 As Integer = &H00008CF4
Public Const COLOR_ATTACHMENT21 As Integer = &H00008CF5
Public Const COLOR_ATTACHMENT22 As Integer = &H00008CF6
Public Const COLOR_ATTACHMENT23 As Integer = &H00008CF7
Public Const COLOR_ATTACHMENT24 As Integer = &H00008CF8
Public Const COLOR_ATTACHMENT25 As Integer = &H00008CF9
Public Const COLOR_ATTACHMENT26 As Integer = &H00008CFA
Public Const COLOR_ATTACHMENT27 As Integer = &H00008CFB
Public Const COLOR_ATTACHMENT28 As Integer = &H00008CFC
Public Const COLOR_ATTACHMENT29 As Integer = &H00008CFD
Public Const COLOR_ATTACHMENT30 As Integer = &H00008CFE
Public Const COLOR_ATTACHMENT31 As Integer = &H00008CFF
Public Const DEPTH_ATTACHMENT As Integer = &H00008D00
Public Const STENCIL_ATTACHMENT As Integer = &H00008D20
Public Const FRAMEBUFFER As Integer = &H00008D40
Public Const RENDERBUFFER As Integer = &H00008D41
Public Const RENDERBUFFER_WIDTH As Integer = &H00008D42
Public Const RENDERBUFFER_HEIGHT As Integer = &H00008D43
Public Const RENDERBUFFER_INTERNAL_FORMAT As Integer = &H00008D44
Public Const STENCIL_INDEX1 As Integer = &H00008D46
Public Const STENCIL_INDEX4 As Integer = &H00008D47
Public Const STENCIL_INDEX8 As Integer = &H00008D48
Public Const STENCIL_INDEX16 As Integer = &H00008D49
Public Const RENDERBUFFER_RED_SIZE As Integer = &H00008D50
Public Const RENDERBUFFER_GREEN_SIZE As Integer = &H00008D51
Public Const RENDERBUFFER_BLUE_SIZE As Integer = &H00008D52
Public Const RENDERBUFFER_ALPHA_SIZE As Integer = &H00008D53
Public Const RENDERBUFFER_DEPTH_SIZE As Integer = &H00008D54
Public Const RENDERBUFFER_STENCIL_SIZE As Integer = &H00008D55
Public Const FRAMEBUFFER_INCOMPLETE_MULTISAMPLE As Integer = &H00008D56
Public Const MAX_SAMPLES As Integer = &H00008D57
Public Const FRAMEBUFFER_SRGB As Integer = &H00008DB9
Public Const HALF_single As Integer = &H0000140B
Public Const MAP_READ_BIT As Integer = &H00000001
Public Const MAP_WRITE_BIT As Integer = &H00000002
Public Const MAP_INVALIDATE_RANGE_BIT As Integer = &H00000004
Public Const MAP_INVALIDATE_BUFFER_BIT As Integer = &H00000008
Public Const MAP_FLUSH_EXPLICIT_BIT As Integer = &H00000010
Public Const MAP_UNSYNCHRONIZED_BIT As Integer = &H00000020
Public Const COMPRESSED_RED_RGTC1 As Integer = &H00008DBB
Public Const COMPRESSED_SIGNED_RED_RGTC1 As Integer = &H00008DBC
Public Const COMPRESSED_RG_RGTC2 As Integer = &H00008DBD
Public Const COMPRESSED_SIGNED_RG_RGTC2 As Integer = &H00008DBE
Public Const RG As Integer = &H00008227
Public Const RG_INTEGER As Integer = &H00008228
Public Const R8 As Integer = &H00008229
Public Const R16 As Integer = &H0000822A
Public Const RG8 As Integer = &H0000822B
Public Const RG16 As Integer = &H0000822C
Public Const R16F As Integer = &H0000822D
Public Const R32F As Integer = &H0000822E
Public Const RG16F As Integer = &H0000822F
Public Const RG32F As Integer = &H00008230
Public Const R8I As Integer = &H00008231
Public Const R8UI As Integer = &H00008232
Public Const R16I As Integer = &H00008233
Public Const R16UI As Integer = &H00008234
Public Const R32I As Integer = &H00008235
Public Const R32UI As Integer = &H00008236
Public Const RG8I As Integer = &H00008237
Public Const RG8UI As Integer = &H00008238
Public Const RG16I As Integer = &H00008239
Public Const RG16UI As Integer = &H0000823A
Public Const RG32I As Integer = &H0000823B
Public Const RG32UI As Integer = &H0000823C
Public Const VERTEX_ARRAY_BINDING As Integer = &H000085B5
' Public Const VERSION_3_2 1
'
' Public Const CONTEXT_CORE_PROFILE_BIT As Integer  = &H000000000001
' Public Const CONTEXT_COMPATIBILITY_PROFILE_BIT As Integer  = &H000000000002
' Public Const LINES_ADJACENCY As Integer  = &H0000000A
' Public Const LINE_STRIP_ADJACENCY As Integer  = &H0000000B
' Public Const TRIANGLES_ADJACENCY As Integer  = &H0000000C
' Public Const TRIANGLE_STRIP_ADJACENCY As Integer  = &H0000000D
' Public Const PROGRAM_POINT_SIZE As Integer  = &H00008642
' Public Const MAX_GEOMETRY_TEXTURE_IMAGE_UNITS As Integer  = &H00008C29
' Public Const FRAMEBUFFER_ATTACHMENT_LAYERED As Integer  = &H00008DA7
' Public Const FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS As Integer  = &H00008DA8
' Public Const GEOMETRY_SHADER As Integer  = &H00008DD9
' Public Const GEOMETRY_VERTICES_OUT As Integer  = &H00008916
' Public Const GEOMETRY_INPUT_TYPE As Integer  = &H00008917
' Public Const GEOMETRY_OUTPUT_TYPE As Integer  = &H00008918
' Public Const MAX_GEOMETRY_UNIFORM_COMPONENTS As Integer  = &H00008DDF
' Public Const MAX_GEOMETRY_OUTPUT_VERTICES As Integer  = &H00008DE0
' Public Const MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS As Integer  = &H00008DE1
' Public Const MAX_VERTEX_OUTPUT_COMPONENTS As Integer  = &H00009122
' Public Const MAX_GEOMETRY_INPUT_COMPONENTS As Integer  = &H00009123
' Public Const MAX_GEOMETRY_OUTPUT_COMPONENTS As Integer  = &H00009124
' Public Const MAX_FRAGMENT_INPUT_COMPONENTS As Integer  = &H00009125
' Public Const CONTEXT_PROFILE_MASK As Integer  = &H00009126
' Public Const DEPTH_CLAMP As Integer  = &H0000864F
' Public Const QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION As Integer  = &H00008E4C
' Public Const FIRST_VERTEX_CONVENTION As Integer  = &H00008E4D
' Public Const LAST_VERTEX_CONVENTION As Integer  = &H00008E4E
' Public Const PROVOKING_VERTEX As Integer  = &H00008E4F
' Public Const TEXTURE_CUBE_MAP_SEAMLESS As Integer  = &H0000884F
' Public Const MAX_SERVER_WAIT_TIMEOUT As Integer  = &H00009111
' Public Const OBJECT_TYPE As Integer  = &H00009112
' Public Const SYNC_CONDITION As Integer  = &H00009113
' Public Const SYNC_STATUS As Integer  = &H00009114
' Public Const SYNC_FLAGS As Integer  = &H00009115
' Public Const SYNC_FENCE As Integer  = &H00009116
' Public Const SYNC_GPU_COMMANDS_COMPLETE As Integer  = &H00009117
' Public Const UNSIGNALED As Integer  = &H00009118
' Public Const SIGNALED As Integer  = &H00009119
' Public Const ALREADY_SIGNALED As Integer  = &H0000911A
' Public Const TIMEOUT_EXPIRED As Integer  = &H0000911B
' Public Const CONDITION_SATISFIED As Integer  = &H0000911C
' Public Const WAIT_FAILED As Integer  = &H0000911D
' Public Const TIMEOUT_IGNORED As Integer = & HFFFFFFFFFFFFFFFFull
' Public Const SYNC_FLUSH_COMMANDS_BIT As Integer  = &H000000000001
' Public Const SAMPLE_POSITION As Integer  = &H00008E50
' Public Const SAMPLE_MASK As Integer  = &H00008E51
' Public Const SAMPLE_MASK_VALUE As Integer  = &H00008E52
' Public Const MAX_SAMPLE_MASK_WORDS As Integer  = &H00008E59
' Public Const TEXTURE_2D_MULTISAMPLE As Integer  = &H00009100
' Public Const PROXY_TEXTURE_2D_MULTISAMPLE As Integer  = &H00009101
' Public Const TEXTURE_2D_MULTISAMPLE_ARRAY As Integer  = &H00009102
' Public Const PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY As Integer  = &H00009103
' Public Const TEXTURE_BINDING_2D_MULTISAMPLE As Integer  = &H00009104
' Public Const TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY As Integer  = &H00009105
' Public Const TEXTURE_SAMPLES As Integer  = &H00009106
' Public Const TEXTURE_FIXED_SAMPLE_LOCATIONS As Integer  = &H00009107
' Public Const SAMPLER_2D_MULTISAMPLE As Integer  = &H00009108
' Public Const INT_SAMPLER_2D_MULTISAMPLE As Integer  = &H00009109
' Public Const UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE As Integer  = &H0000910A
' Public Const SAMPLER_2D_MULTISAMPLE_ARRAY As Integer  = &H0000910B
' Public Const INT_SAMPLER_2D_MULTISAMPLE_ARRAY As Integer  = &H0000910C
' Public Const UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY As Integer  = &H0000910D
' Public Const MAX_COLOR_TEXTURE_SAMPLES As Integer  = &H0000910E
' Public Const MAX_DEPTH_TEXTURE_SAMPLES As Integer  = &H0000910F
' Public Const MAX_INTEGER_SAMPLES As Integer  = &H00009110
' Public Const VERSION_3_1 1
' Public Const SAMPLER_2D_RECT As Integer  = &H00008B63
' Public Const SAMPLER_2D_RECT_SHADOW As Integer  = &H00008B64
' Public Const SAMPLER_BUFFER As Integer  = &H00008DC2
' Public Const INT_SAMPLER_2D_RECT As Integer  = &H00008DCD
' Public Const INT_SAMPLER_BUFFER As Integer  = &H00008DD0
' Public Const UNSIGNED_INT_SAMPLER_2D_RECT As Integer  = &H00008DD5
' Public Const UNSIGNED_INT_SAMPLER_BUFFER As Integer  = &H00008DD8
' Public Const TEXTURE_BUFFER As Integer  = &H00008C2A
' Public Const MAX_TEXTURE_BUFFER_SIZE As Integer  = &H00008C2B
' Public Const TEXTURE_BINDING_BUFFER As Integer  = &H00008C2C
' Public Const TEXTURE_BUFFER_DATA_STORE_BINDING As Integer  = &H00008C2D
' Public Const TEXTURE_RECTANGLE As Integer  = &H000084F5
' Public Const TEXTURE_BINDING_RECTANGLE As Integer  = &H000084F6
' Public Const PROXY_TEXTURE_RECTANGLE As Integer  = &H000084F7
' Public Const MAX_RECTANGLE_TEXTURE_SIZE As Integer  = &H000084F8
' Public Const R8_SNORM As Integer  = &H00008F94
' Public Const RG8_SNORM As Integer  = &H00008F95
' Public Const RGB8_SNORM As Integer  = &H00008F96
' Public Const RGBA8_SNORM As Integer  = &H00008F97
' Public Const R16_SNORM As Integer  = &H00008F98
' Public Const RG16_SNORM As Integer  = &H00008F99
' Public Const RGB16_SNORM As Integer  = &H00008F9A
' Public Const RGBA16_SNORM As Integer  = &H00008F9B
' Public Const SIGNED_NORMALIZED As Integer  = &H00008F9C
' Public Const PRIMITIVE_RESTART As Integer  = &H00008F9D
' Public Const PRIMITIVE_RESTART_INDEX As Integer  = &H00008F9E
' Public Const COPY_READ_BUFFER As Integer  = &H00008F36
' Public Const COPY_WRITE_BUFFER As Integer  = &H00008F37
' Public Const UNIFORM_BUFFER As Integer  = &H00008A11
' Public Const UNIFORM_BUFFER_BINDING As Integer  = &H00008A28
' Public Const UNIFORM_BUFFER_START As Integer  = &H00008A29
' Public Const UNIFORM_BUFFER_SIZE As Integer  = &H00008A2A
' Public Const MAX_VERTEX_UNIFORM_BLOCKS As Integer  = &H00008A2B
' Public Const MAX_GEOMETRY_UNIFORM_BLOCKS As Integer  = &H00008A2C
' Public Const MAX_FRAGMENT_UNIFORM_BLOCKS As Integer  = &H00008A2D
' Public Const MAX_COMBINED_UNIFORM_BLOCKS As Integer  = &H00008A2E
' Public Const MAX_UNIFORM_BUFFER_BINDINGS As Integer  = &H00008A2F
' Public Const MAX_UNIFORM_BLOCK_SIZE As Integer  = &H00008A30
' Public Const MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS As Integer  = &H00008A31
' Public Const MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS As Integer  = &H00008A32
' Public Const MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS As Integer  = &H00008A33
' Public Const UNIFORM_BUFFER_OFFSET_ALIGNMENT As Integer  = &H00008A34
' Public Const ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH As Integer  = &H00008A35
' Public Const ACTIVE_UNIFORM_BLOCKS As Integer  = &H00008A36
' Public Const UNIFORM_TYPE As Integer  = &H00008A37
' Public Const UNIFORM_SIZE As Integer  = &H00008A38
' Public Const UNIFORM_NAME_LENGTH As Integer  = &H00008A39
' Public Const UNIFORM_BLOCK_INDEX As Integer  = &H00008A3A
' Public Const UNIFORM_OFFSET As Integer  = &H00008A3B
' Public Const UNIFORM_ARRAY_STRIDE As Integer  = &H00008A3C
' Public Const UNIFORM_MATRIX_STRIDE As Integer  = &H00008A3D
' Public Const UNIFORM_IS_ROW_MAJOR As Integer  = &H00008A3E
' Public Const UNIFORM_BLOCK_BINDING As Integer  = &H00008A3F
' Public Const UNIFORM_BLOCK_DATA_SIZE As Integer  = &H00008A40
' Public Const UNIFORM_BLOCK_NAME_LENGTH As Integer  = &H00008A41
' Public Const UNIFORM_BLOCK_ACTIVE_UNIFORMS As Integer  = &H00008A42
' Public Const UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES As Integer  = &H00008A43
' Public Const UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER As Integer  = &H00008A44
' Public Const UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER As Integer  = &H00008A45
' Public Const UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER As Integer  = &H00008A46
' Public Const INVALID_INDEX As Integer = & HFFFFFFFFu
' Public Const VERSION_4_3 1
' Public Const NUM_SHADING_LANGUAGE_VERSIONS As Integer  = &H000082E9
' Public Const VERTEX_ATTRIB_ARRAY_LONG As Integer  = &H0000874E
' Public Const COMPRESSED_RGB8_ETC2 As Integer  = &H00009274
' Public Const COMPRESSED_SRGB8_ETC2 As Integer  = &H00009275
' Public Const COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 As Integer  = &H00009276
' Public Const COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 As Integer  = &H00009277
' Public Const COMPRESSED_RGBA8_ETC2_EAC As Integer  = &H00009278
' Public Const COMPRESSED_SRGB8_ALPHA8_ETC2_EAC As Integer  = &H00009279
' Public Const COMPRESSED_R11_EAC As Integer  = &H00009270
' Public Const COMPRESSED_SIGNED_R11_EAC As Integer  = &H00009271
' Public Const COMPRESSED_RG11_EAC As Integer  = &H00009272
' Public Const COMPRESSED_SIGNED_RG11_EAC As Integer  = &H00009273
' Public Const PRIMITIVE_RESTART_FIXED_INDEX As Integer  = &H00008D69
' Public Const ANY_SAMPLES_PASSED_CONSERVATIVE As Integer  = &H00008D6A
' Public Const MAX_ELEMENT_INDEX As Integer  = &H00008D6B
' Public Const COMPUTE_SHADER As Integer  = &H000091B9
' Public Const MAX_COMPUTE_UNIFORM_BLOCKS As Integer  = &H000091BB
' Public Const MAX_COMPUTE_TEXTURE_IMAGE_UNITS As Integer  = &H000091BC
' Public Const MAX_COMPUTE_IMAGE_UNIFORMS As Integer  = &H000091BD
' Public Const MAX_COMPUTE_SHARED_MEMORY_SIZE As Integer  = &H00008262
' Public Const MAX_COMPUTE_UNIFORM_COMPONENTS As Integer  = &H00008263
' Public Const MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS As Integer  = &H00008264
' Public Const MAX_COMPUTE_ATOMIC_COUNTERS As Integer  = &H00008265
' Public Const MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS As Integer  = &H00008266
' Public Const MAX_COMPUTE_WORK_GROUP_INVOCATIONS As Integer  = &H000090EB
' Public Const MAX_COMPUTE_WORK_GROUP_COUNT As Integer  = &H000091BE
' Public Const MAX_COMPUTE_WORK_GROUP_SIZE As Integer  = &H000091BF
' Public Const COMPUTE_WORK_GROUP_SIZE As Integer  = &H00008267
' Public Const UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER As Integer  = &H000090EC
' Public Const ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER As Integer  = &H000090ED
' Public Const DISPATCH_INDIRECT_BUFFER As Integer  = &H000090EE
' Public Const DISPATCH_INDIRECT_BUFFER_BINDING As Integer  = &H000090EF
' Public Const COMPUTE_SHADER_BIT As Integer  = &H000000000020
' Public Const DEBUG_OUTPUT_SYNCHRONOUS As Integer  = &H00008242
' Public Const DEBUG_NEXT_LOGGED_MESSAGE_LENGTH As Integer  = &H00008243
' Public Const DEBUG_CALLBACK_FUNCTION As Integer  = &H00008244
' Public Const DEBUG_CALLBACK_USER_PARAM As Integer  = &H00008245
' Public Const DEBUG_SOURCE_API As Integer  = &H00008246
' Public Const DEBUG_SOURCE_WINDOW_SYSTEM As Integer  = &H00008247
' Public Const DEBUG_SOURCE_SHADER_COMPILER As Integer  = &H00008248
' Public Const DEBUG_SOURCE_THIRD_PARTY As Integer  = &H00008249
' Public Const DEBUG_SOURCE_APPLICATION As Integer  = &H0000824A
' Public Const DEBUG_SOURCE_OTHER As Integer  = &H0000824B
' Public Const DEBUG_TYPE_ERROR As Integer  = &H0000824C
' Public Const DEBUG_TYPE_DEPRECATED_BEHAVIOR As Integer  = &H0000824D
' Public Const DEBUG_TYPE_UNDEFINED_BEHAVIOR As Integer  = &H0000824E
' Public Const DEBUG_TYPE_PORTABILITY As Integer  = &H0000824F
' Public Const DEBUG_TYPE_PERFORMANCE As Integer  = &H00008250
' Public Const DEBUG_TYPE_OTHER As Integer  = &H00008251
' Public Const MAX_DEBUG_MESSAGE_LENGTH As Integer  = &H00009143
' Public Const MAX_DEBUG_LOGGED_MESSAGES As Integer  = &H00009144
' Public Const DEBUG_LOGGED_MESSAGES As Integer  = &H00009145
' Public Const DEBUG_SEVERITY_HIGH As Integer  = &H00009146
' Public Const DEBUG_SEVERITY_MEDIUM As Integer  = &H00009147
' Public Const DEBUG_SEVERITY_LOW As Integer  = &H00009148
' Public Const DEBUG_TYPE_MARKER As Integer  = &H00008268
' Public Const DEBUG_TYPE_PUSH_GROUP As Integer  = &H00008269
' Public Const DEBUG_TYPE_POP_GROUP As Integer  = &H0000826A
' Public Const DEBUG_SEVERITY_NOTIFICATION As Integer  = &H0000826B
' Public Const MAX_DEBUG_GROUP_STACK_DEPTH As Integer  = &H0000826C
' Public Const DEBUG_GROUP_STACK_DEPTH As Integer  = &H0000826D
' Public Const BUFFER As Integer  = &H000082E0
' Public Const SHADER As Integer  = &H000082E1
' Public Const PROGRAM As Integer  = &H000082E2
' Public Const QUERY As Integer  = &H000082E3
' Public Const PROGRAM_PIPELINE As Integer  = &H000082E4
' Public Const SAMPLER As Integer  = &H000082E6
' Public Const MAX_LABEL_LENGTH As Integer  = &H000082E8
' Public Const DEBUG_OUTPUT As Integer  = &H000092E0
' Public Const CONTEXT_FLAG_DEBUG_BIT As Integer  = &H000000000002
' Public Const MAX_UNIFORM_LOCATIONS As Integer  = &H0000826E
' Public Const FRAMEBUFFER_DEFAULT_WIDTH As Integer  = &H00009310
' Public Const FRAMEBUFFER_DEFAULT_HEIGHT As Integer  = &H00009311
' Public Const FRAMEBUFFER_DEFAULT_LAYERS As Integer  = &H00009312
' Public Const FRAMEBUFFER_DEFAULT_SAMPLES As Integer  = &H00009313
' Public Const FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS As Integer  = &H00009314
' Public Const MAX_FRAMEBUFFER_WIDTH As Integer  = &H00009315
' Public Const MAX_FRAMEBUFFER_HEIGHT As Integer  = &H00009316
' Public Const MAX_FRAMEBUFFER_LAYERS As Integer  = &H00009317
' Public Const MAX_FRAMEBUFFER_SAMPLES As Integer  = &H00009318
' Public Const INTERNALFORMAT_SUPPORTED As Integer  = &H0000826F
' Public Const INTERNALFORMAT_PREFERRED As Integer  = &H00008270
' Public Const INTERNALFORMAT_RED_SIZE As Integer  = &H00008271
' Public Const INTERNALFORMAT_GREEN_SIZE As Integer  = &H00008272
' Public Const INTERNALFORMAT_BLUE_SIZE As Integer  = &H00008273
' Public Const INTERNALFORMAT_ALPHA_SIZE As Integer  = &H00008274
' Public Const INTERNALFORMAT_DEPTH_SIZE As Integer  = &H00008275
' Public Const INTERNALFORMAT_STENCIL_SIZE As Integer  = &H00008276
' Public Const INTERNALFORMAT_SHARED_SIZE As Integer  = &H00008277
' Public Const INTERNALFORMAT_RED_TYPE As Integer  = &H00008278
' Public Const INTERNALFORMAT_GREEN_TYPE As Integer  = &H00008279
' Public Const INTERNALFORMAT_BLUE_TYPE As Integer  = &H0000827A
' Public Const INTERNALFORMAT_ALPHA_TYPE As Integer  = &H0000827B
' Public Const INTERNALFORMAT_DEPTH_TYPE As Integer  = &H0000827C
' Public Const INTERNALFORMAT_STENCIL_TYPE As Integer  = &H0000827D
' Public Const MAX_WIDTH As Integer  = &H0000827E
' Public Const MAX_HEIGHT As Integer  = &H0000827F
' Public Const MAX_DEPTH As Integer  = &H00008280
' Public Const MAX_LAYERS As Integer  = &H00008281
' Public Const MAX_COMBINED_DIMENSIONS As Integer  = &H00008282
' Public Const COLOR_COMPONENTS As Integer  = &H00008283
' Public Const DEPTH_COMPONENTS As Integer  = &H00008284
' Public Const STENCIL_COMPONENTS As Integer  = &H00008285
' Public Const COLOR_RENDERABLE As Integer  = &H00008286
' Public Const DEPTH_RENDERABLE As Integer  = &H00008287
' Public Const STENCIL_RENDERABLE As Integer  = &H00008288
' Public Const FRAMEBUFFER_RENDERABLE As Integer  = &H00008289
' Public Const FRAMEBUFFER_RENDERABLE_LAYERED As Integer  = &H0000828A
' Public Const FRAMEBUFFER_BLEND As Integer  = &H0000828B
' Public Const READ_PIXELS As Integer  = &H0000828C
' Public Const READ_PIXELS_FORMAT As Integer  = &H0000828D
' Public Const READ_PIXELS_TYPE As Integer  = &H0000828E
' Public Const TEXTURE_IMAGE_FORMAT As Integer  = &H0000828F
' Public Const TEXTURE_IMAGE_TYPE As Integer  = &H00008290
' Public Const GET_TEXTURE_IMAGE_FORMAT As Integer  = &H00008291
' Public Const GET_TEXTURE_IMAGE_TYPE As Integer  = &H00008292
' Public Const MIPMAP As Integer  = &H00008293
' Public Const MANUAL_GENERATE_MIPMAP As Integer  = &H00008294
' Public Const AUTO_GENERATE_MIPMAP As Integer  = &H00008295
' Public Const COLOR_ENCODING As Integer  = &H00008296
' Public Const SRGB_READ As Integer  = &H00008297
' Public Const SRGB_WRITE As Integer  = &H00008298
' Public Const FILTER As Integer  = &H0000829A
' Public Const VERTEX_TEXTURE As Integer  = &H0000829B
' Public Const TESS_CONTROL_TEXTURE As Integer  = &H0000829C
' Public Const TESS_EVALUATION_TEXTURE As Integer  = &H0000829D
' Public Const GEOMETRY_TEXTURE As Integer  = &H0000829E
' Public Const FRAGMENT_TEXTURE As Integer  = &H0000829F
' Public Const COMPUTE_TEXTURE As Integer  = &H000082A0
' Public Const TEXTURE_SHADOW As Integer  = &H000082A1
' Public Const TEXTURE_GATHER As Integer  = &H000082A2
' Public Const TEXTURE_GATHER_SHADOW As Integer  = &H000082A3
' Public Const SHADER_IMAGE_LOAD As Integer  = &H000082A4
' Public Const SHADER_IMAGE_STORE As Integer  = &H000082A5
' Public Const SHADER_IMAGE_ATOMIC As Integer  = &H000082A6
' Public Const IMAGE_TEXEL_SIZE As Integer  = &H000082A7
' Public Const IMAGE_COMPATIBILITY_CLASS As Integer  = &H000082A8
' Public Const IMAGE_PIXEL_FORMAT As Integer  = &H000082A9
' Public Const IMAGE_PIXEL_TYPE As Integer  = &H000082AA
' Public Const SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST As Integer  = &H000082AC
' Public Const SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST As Integer  = &H000082AD
' Public Const SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE As Integer  = &H000082AE
' Public Const SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE As Integer  = &H000082AF
' Public Const TEXTURE_COMPRESSED_BLOCK_WIDTH As Integer  = &H000082B1
' Public Const TEXTURE_COMPRESSED_BLOCK_HEIGHT As Integer  = &H000082B2
' Public Const TEXTURE_COMPRESSED_BLOCK_SIZE As Integer  = &H000082B3
' Public Const CLEAR_BUFFER As Integer  = &H000082B4
' Public Const TEXTURE_VIEW As Integer  = &H000082B5
' Public Const VIEW_COMPATIBILITY_CLASS As Integer  = &H000082B6
' Public Const FULL_SUPPORT As Integer  = &H000082B7
' Public Const CAVEAT_SUPPORT As Integer  = &H000082B8
' Public Const IMAGE_CLASS_4_X_32 As Integer  = &H000082B9
' Public Const IMAGE_CLASS_2_X_32 As Integer  = &H000082BA
' Public Const IMAGE_CLASS_1_X_32 As Integer  = &H000082BB
' Public Const IMAGE_CLASS_4_X_16 As Integer  = &H000082BC
' Public Const IMAGE_CLASS_2_X_16 As Integer  = &H000082BD
' Public Const IMAGE_CLASS_1_X_16 As Integer  = &H000082BE
' Public Const IMAGE_CLASS_4_X_8 As Integer  = &H000082BF
' Public Const IMAGE_CLASS_2_X_8 As Integer  = &H000082C0
' Public Const IMAGE_CLASS_1_X_8 As Integer  = &H000082C1
' Public Const IMAGE_CLASS_11_11_10 As Integer  = &H000082C2
' Public Const IMAGE_CLASS_10_10_10_2 As Integer  = &H000082C3
' Public Const VIEW_CLASS_128_BITS As Integer  = &H000082C4
' Public Const VIEW_CLASS_96_BITS As Integer  = &H000082C5
' Public Const VIEW_CLASS_64_BITS As Integer  = &H000082C6
' Public Const VIEW_CLASS_48_BITS As Integer  = &H000082C7
' Public Const VIEW_CLASS_32_BITS As Integer  = &H000082C8
' Public Const VIEW_CLASS_24_BITS As Integer  = &H000082C9
' Public Const VIEW_CLASS_16_BITS As Integer  = &H000082CA
' Public Const VIEW_CLASS_8_BITS As Integer  = &H000082CB
' Public Const VIEW_CLASS_S3TC_DXT1_RGB As Integer  = &H000082CC
' Public Const VIEW_CLASS_S3TC_DXT1_RGBA As Integer  = &H000082CD
' Public Const VIEW_CLASS_S3TC_DXT3_RGBA As Integer  = &H000082CE
' Public Const VIEW_CLASS_S3TC_DXT5_RGBA As Integer  = &H000082CF
' Public Const VIEW_CLASS_RGTC1_RED As Integer  = &H000082D0
' Public Const VIEW_CLASS_RGTC2_RG As Integer  = &H000082D1
' Public Const VIEW_CLASS_BPTC_UNORM As Integer  = &H000082D2
' Public Const VIEW_CLASS_BPTC_single As Integer  = &H000082D3
' Public Const UNIFORM As Integer  = &H000092E1
' Public Const UNIFORM_BLOCK As Integer  = &H000092E2
' Public Const PROGRAM_INPUT As Integer  = &H000092E3
' Public Const PROGRAM_OUTPUT As Integer  = &H000092E4
' Public Const BUFFER_VARIABLE As Integer  = &H000092E5
' Public Const SHADER_STORAGE_BLOCK As Integer  = &H000092E6
' Public Const VERTEX_SUBROUTINE As Integer  = &H000092E8
' Public Const TESS_CONTROL_SUBROUTINE As Integer  = &H000092E9
' Public Const TESS_EVALUATION_SUBROUTINE As Integer  = &H000092EA
' Public Const GEOMETRY_SUBROUTINE As Integer  = &H000092EB
' Public Const FRAGMENT_SUBROUTINE As Integer  = &H000092EC
' Public Const COMPUTE_SUBROUTINE As Integer  = &H000092ED
' Public Const VERTEX_SUBROUTINE_UNIFORM As Integer  = &H000092EE
' Public Const TESS_CONTROL_SUBROUTINE_UNIFORM As Integer  = &H000092EF
' Public Const TESS_EVALUATION_SUBROUTINE_UNIFORM As Integer  = &H000092F0
' Public Const GEOMETRY_SUBROUTINE_UNIFORM As Integer  = &H000092F1
' Public Const FRAGMENT_SUBROUTINE_UNIFORM As Integer  = &H000092F2
' Public Const COMPUTE_SUBROUTINE_UNIFORM As Integer  = &H000092F3
' Public Const TRANSFORM_FEEDBACK_VARYING As Integer  = &H000092F4
' Public Const ACTIVE_RESOURCES As Integer  = &H000092F5
' Public Const MAX_NAME_LENGTH As Integer  = &H000092F6
' Public Const MAX_NUM_ACTIVE_VARIABLES As Integer  = &H000092F7
' Public Const MAX_NUM_COMPATIBLE_SUBROUTINES As Integer  = &H000092F8
' Public Const NAME_LENGTH As Integer  = &H000092F9
' Public Const TYPE As Integer  = &H000092FA
' Public Const ARRAY_SIZE As Integer  = &H000092FB
' Public Const OFFSET As Integer  = &H000092FC
' Public Const BLOCK_INDEX As Integer  = &H000092FD
' Public Const ARRAY_STRIDE As Integer  = &H000092FE
' Public Const MATRIX_STRIDE As Integer  = &H000092FF
' Public Const IS_ROW_MAJOR As Integer  = &H00009300
' Public Const ATOMIC_COUNTER_BUFFER_INDEX As Integer  = &H00009301
' Public Const BUFFER_BINDING As Integer  = &H00009302
' Public Const BUFFER_DATA_SIZE As Integer  = &H00009303
' Public Const NUM_ACTIVE_VARIABLES As Integer  = &H00009304
' Public Const ACTIVE_VARIABLES As Integer  = &H00009305
' Public Const REFERENCED_BY_VERTEX_SHADER As Integer  = &H00009306
' Public Const REFERENCED_BY_TESS_CONTROL_SHADER As Integer  = &H00009307
' Public Const REFERENCED_BY_TESS_EVALUATION_SHADER As Integer  = &H00009308
' Public Const REFERENCED_BY_GEOMETRY_SHADER As Integer  = &H00009309
' Public Const REFERENCED_BY_FRAGMENT_SHADER As Integer  = &H0000930A
' Public Const REFERENCED_BY_COMPUTE_SHADER As Integer  = &H0000930B
' Public Const TOP_LEVEL_ARRAY_SIZE As Integer  = &H0000930C
' Public Const TOP_LEVEL_ARRAY_STRIDE As Integer  = &H0000930D
' Public Const LOCATION As Integer  = &H0000930E
' Public Const LOCATION_INDEX As Integer  = &H0000930F
' Public Const IS_PER_PATCH As Integer  = &H000092E7
' Public Const SHADER_STORAGE_BUFFER As Integer  = &H000090D2
' Public Const SHADER_STORAGE_BUFFER_BINDING As Integer  = &H000090D3
' Public Const SHADER_STORAGE_BUFFER_START As Integer  = &H000090D4
' Public Const SHADER_STORAGE_BUFFER_SIZE As Integer  = &H000090D5
' Public Const MAX_VERTEX_SHADER_STORAGE_BLOCKS As Integer  = &H000090D6
' Public Const MAX_GEOMETRY_SHADER_STORAGE_BLOCKS As Integer  = &H000090D7
' Public Const MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS As Integer  = &H000090D8
' Public Const MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS As Integer  = &H000090D9
' Public Const MAX_FRAGMENT_SHADER_STORAGE_BLOCKS As Integer  = &H000090DA
' Public Const MAX_COMPUTE_SHADER_STORAGE_BLOCKS As Integer  = &H000090DB
' Public Const MAX_COMBINED_SHADER_STORAGE_BLOCKS As Integer  = &H000090DC
' Public Const MAX_SHADER_STORAGE_BUFFER_BINDINGS As Integer  = &H000090DD
' Public Const MAX_SHADER_STORAGE_BLOCK_SIZE As Integer  = &H000090DE
' Public Const SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT As Integer  = &H000090DF
' Public Const SHADER_STORAGE_BARRIER_BIT As Integer  = &H000000002000
' Public Const MAX_COMBINED_SHADER_OUTPUT_RESOURCES As Integer  = &H00008F39
' Public Const DEPTH_STENCIL_TEXTURE_MODE As Integer  = &H000090EA
' Public Const TEXTURE_BUFFER_OFFSET As Integer  = &H0000919D
' Public Const TEXTURE_BUFFER_SIZE As Integer  = &H0000919E
' Public Const TEXTURE_BUFFER_OFFSET_ALIGNMENT As Integer  = &H0000919F
' Public Const TEXTURE_VIEW_MIN_LEVEL As Integer  = &H000082DB
' Public Const TEXTURE_VIEW_NUM_LEVELS As Integer  = &H000082DC
' Public Const TEXTURE_VIEW_MIN_LAYER As Integer  = &H000082DD
' Public Const TEXTURE_VIEW_NUM_LAYERS As Integer  = &H000082DE
' Public Const TEXTURE_IMMUTABLE_LEVELS As Integer  = &H000082DF
' Public Const VERTEX_ATTRIB_BINDING As Integer  = &H000082D4
' Public Const VERTEX_ATTRIB_RELATIVE_OFFSET As Integer  = &H000082D5
' Public Const VERTEX_BINDING_DIVISOR As Integer  = &H000082D6
' Public Const VERTEX_BINDING_OFFSET As Integer  = &H000082D7
' Public Const VERTEX_BINDING_STRIDE As Integer  = &H000082D8
' Public Const MAX_VERTEX_ATTRIB_RELATIVE_OFFSET As Integer  = &H000082D9
' Public Const MAX_VERTEX_ATTRIB_BINDINGS As Integer  = &H000082DA
' Public Const VERTEX_BINDING_BUFFER As Integer  = &H00008F4F
' Public Const VERSION_4_2 1
' Public Const COPY_READ_BUFFER_BINDING As Integer  = &H00008F36
' Public Const COPY_WRITE_BUFFER_BINDING As Integer  = &H00008F37
' Public Const TRANSFORM_FEEDBACK_ACTIVE As Integer  = &H00008E24
' Public Const TRANSFORM_FEEDBACK_PAUSED As Integer  = &H00008E23
' Public Const UNPACK_COMPRESSED_BLOCK_WIDTH As Integer  = &H00009127
' Public Const UNPACK_COMPRESSED_BLOCK_HEIGHT As Integer  = &H00009128
' Public Const UNPACK_COMPRESSED_BLOCK_DEPTH As Integer  = &H00009129
' Public Const UNPACK_COMPRESSED_BLOCK_SIZE As Integer  = &H0000912A
' Public Const PACK_COMPRESSED_BLOCK_WIDTH As Integer  = &H0000912B
' Public Const PACK_COMPRESSED_BLOCK_HEIGHT As Integer  = &H0000912C
' Public Const PACK_COMPRESSED_BLOCK_DEPTH As Integer  = &H0000912D
' Public Const PACK_COMPRESSED_BLOCK_SIZE As Integer  = &H0000912E
' Public Const NUM_SAMPLE_COUNTS As Integer  = &H00009380
' Public Const MIN_MAP_BUFFER_ALIGNMENT As Integer  = &H000090BC
' Public Const ATOMIC_COUNTER_BUFFER As Integer  = &H000092C0
' Public Const ATOMIC_COUNTER_BUFFER_BINDING As Integer  = &H000092C1
' Public Const ATOMIC_COUNTER_BUFFER_START As Integer  = &H000092C2
' Public Const ATOMIC_COUNTER_BUFFER_SIZE As Integer  = &H000092C3
' Public Const ATOMIC_COUNTER_BUFFER_DATA_SIZE As Integer  = &H000092C4
' Public Const ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS As Integer  = &H000092C5
' Public Const ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES As Integer  = &H000092C6
' Public Const ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER As Integer  = &H000092C7
' Public Const ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER As Integer  = &H000092C8
' Public Const ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER As Integer  = &H000092C9
' Public Const ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER As Integer  = &H000092CA
' Public Const ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER As Integer  = &H000092CB
' Public Const MAX_VERTEX_ATOMIC_COUNTER_BUFFERS As Integer  = &H000092CC
' Public Const MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS As Integer  = &H000092CD
' Public Const MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS As Integer  = &H000092CE
' Public Const MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS As Integer  = &H000092CF
' Public Const MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS As Integer  = &H000092D0
' Public Const MAX_COMBINED_ATOMIC_COUNTER_BUFFERS As Integer  = &H000092D1
' Public Const MAX_VERTEX_ATOMIC_COUNTERS As Integer  = &H000092D2
' Public Const MAX_TESS_CONTROL_ATOMIC_COUNTERS As Integer  = &H000092D3
' Public Const MAX_TESS_EVALUATION_ATOMIC_COUNTERS As Integer  = &H000092D4
' Public Const MAX_GEOMETRY_ATOMIC_COUNTERS As Integer  = &H000092D5
' Public Const MAX_FRAGMENT_ATOMIC_COUNTERS As Integer  = &H000092D6
' Public Const MAX_COMBINED_ATOMIC_COUNTERS As Integer  = &H000092D7
' Public Const MAX_ATOMIC_COUNTER_BUFFER_SIZE As Integer  = &H000092D8
' Public Const MAX_ATOMIC_COUNTER_BUFFER_BINDINGS As Integer  = &H000092DC
' Public Const ACTIVE_ATOMIC_COUNTER_BUFFERS As Integer  = &H000092D9
' Public Const UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX As Integer  = &H000092DA
' Public Const UNSIGNED_INT_ATOMIC_COUNTER As Integer  = &H000092DB
' Public Const VERTEX_ATTRIB_ARRAY_BARRIER_BIT As Integer  = &H000000000001
' Public Const ELEMENT_ARRAY_BARRIER_BIT As Integer  = &H000000000002
' Public Const UNIFORM_BARRIER_BIT As Integer  = &H000000000004
' Public Const TEXTURE_FETCH_BARRIER_BIT As Integer  = &H000000000008
' Public Const SHADER_IMAGE_ACCESS_BARRIER_BIT As Integer  = &H000000000020
' Public Const COMMAND_BARRIER_BIT As Integer  = &H000000000040
' Public Const PIXEL_BUFFER_BARRIER_BIT As Integer  = &H000000000080
' Public Const TEXTURE_UPDATE_BARRIER_BIT As Integer  = &H000000000100
' Public Const BUFFER_UPDATE_BARRIER_BIT As Integer  = &H000000000200
' Public Const FRAMEBUFFER_BARRIER_BIT As Integer  = &H000000000400
' Public Const TRANSFORM_FEEDBACK_BARRIER_BIT As Integer  = &H000000000800
' Public Const ATOMIC_COUNTER_BARRIER_BIT As Integer  = &H000000001000
' Public Const ALL_BARRIER_BITS As Integer  = &H0000FFFFFFFF
' Public Const MAX_IMAGE_UNITS As Integer  = &H00008F38
' Public Const MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS As Integer  = &H00008F39
' Public Const IMAGE_BINDING_NAME As Integer  = &H00008F3A
' Public Const IMAGE_BINDING_LEVEL As Integer  = &H00008F3B
' Public Const IMAGE_BINDING_LAYERED As Integer  = &H00008F3C
' Public Const IMAGE_BINDING_LAYER As Integer  = &H00008F3D
' Public Const IMAGE_BINDING_ACCESS As Integer  = &H00008F3E
' Public Const IMAGE_1D As Integer  = &H0000904C
' Public Const IMAGE_2D As Integer  = &H0000904D
' Public Const IMAGE_3D As Integer  = &H0000904E
' Public Const IMAGE_2D_RECT As Integer  = &H0000904F
' Public Const IMAGE_CUBE As Integer  = &H00009050
' Public Const IMAGE_BUFFER As Integer  = &H00009051
' Public Const IMAGE_1D_ARRAY As Integer  = &H00009052
' Public Const IMAGE_2D_ARRAY As Integer  = &H00009053
' Public Const IMAGE_CUBE_MAP_ARRAY As Integer  = &H00009054
' Public Const IMAGE_2D_MULTISAMPLE As Integer  = &H00009055
' Public Const IMAGE_2D_MULTISAMPLE_ARRAY As Integer  = &H00009056
' Public Const INT_IMAGE_1D As Integer  = &H00009057
' Public Const INT_IMAGE_2D As Integer  = &H00009058
' Public Const INT_IMAGE_3D As Integer  = &H00009059
' Public Const INT_IMAGE_2D_RECT As Integer  = &H0000905A
' Public Const INT_IMAGE_CUBE As Integer  = &H0000905B
' Public Const INT_IMAGE_BUFFER As Integer  = &H0000905C
' Public Const INT_IMAGE_1D_ARRAY As Integer  = &H0000905D
' Public Const INT_IMAGE_2D_ARRAY As Integer  = &H0000905E
' Public Const INT_IMAGE_CUBE_MAP_ARRAY As Integer  = &H0000905F
' Public Const INT_IMAGE_2D_MULTISAMPLE As Integer  = &H00009060
' Public Const INT_IMAGE_2D_MULTISAMPLE_ARRAY As Integer  = &H00009061
' Public Const UNSIGNED_INT_IMAGE_1D As Integer  = &H00009062
' Public Const UNSIGNED_INT_IMAGE_2D As Integer  = &H00009063
' Public Const UNSIGNED_INT_IMAGE_3D As Integer  = &H00009064
' Public Const UNSIGNED_INT_IMAGE_2D_RECT As Integer  = &H00009065
' Public Const UNSIGNED_INT_IMAGE_CUBE As Integer  = &H00009066
' Public Const UNSIGNED_INT_IMAGE_BUFFER As Integer  = &H00009067
' Public Const UNSIGNED_INT_IMAGE_1D_ARRAY As Integer  = &H00009068
' Public Const UNSIGNED_INT_IMAGE_2D_ARRAY As Integer  = &H00009069
' Public Const UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY As Integer  = &H0000906A
' Public Const UNSIGNED_INT_IMAGE_2D_MULTISAMPLE As Integer  = &H0000906B
' Public Const UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY As Integer  = &H0000906C
' Public Const MAX_IMAGE_SAMPLES As Integer  = &H0000906D
' Public Const IMAGE_BINDING_FORMAT As Integer  = &H0000906E
' Public Const IMAGE_FORMAT_COMPATIBILITY_TYPE As Integer  = &H000090C7
' Public Const IMAGE_FORMAT_COMPATIBILITY_BY_SIZE As Integer  = &H000090C8
' Public Const IMAGE_FORMAT_COMPATIBILITY_BY_CLASS As Integer  = &H000090C9
' Public Const MAX_VERTEX_IMAGE_UNIFORMS As Integer  = &H000090CA
' Public Const MAX_TESS_CONTROL_IMAGE_UNIFORMS As Integer  = &H000090CB
' Public Const MAX_TESS_EVALUATION_IMAGE_UNIFORMS As Integer  = &H000090CC
' Public Const MAX_GEOMETRY_IMAGE_UNIFORMS As Integer  = &H000090CD
' Public Const MAX_FRAGMENT_IMAGE_UNIFORMS As Integer  = &H000090CE
' Public Const MAX_COMBINED_IMAGE_UNIFORMS As Integer  = &H000090CF
' Public Const COMPRESSED_RGBA_BPTC_UNORM As Integer  = &H00008E8C
' Public Const COMPRESSED_SRGB_ALPHA_BPTC_UNORM As Integer  = &H00008E8D
' Public Const COMPRESSED_RGB_BPTC_SIGNED_single As Integer  = &H00008E8E
' Public Const COMPRESSED_RGB_BPTC_UNSIGNED_single As Integer  = &H00008E8F
' Public Const TEXTURE_IMMUTABLE_FORMAT As Integer  = &H0000912F
' Public Const VERSION_4_0 1
' Public Const SAMPLE_SHADING As Integer  = &H00008C36
' Public Const MIN_SAMPLE_SHADING_VALUE As Integer  = &H00008C37
' Public Const MIN_PROGRAM_TEXTURE_GATHER_OFFSET As Integer  = &H00008E5E
' Public Const MAX_PROGRAM_TEXTURE_GATHER_OFFSET As Integer  = &H00008E5F
' Public Const TEXTURE_CUBE_MAP_ARRAY As Integer  = &H00009009
' Public Const TEXTURE_BINDING_CUBE_MAP_ARRAY As Integer  = &H0000900A
' Public Const PROXY_TEXTURE_CUBE_MAP_ARRAY As Integer  = &H0000900B
' Public Const SAMPLER_CUBE_MAP_ARRAY As Integer  = &H0000900C
' Public Const SAMPLER_CUBE_MAP_ARRAY_SHADOW As Integer  = &H0000900D
' Public Const INT_SAMPLER_CUBE_MAP_ARRAY As Integer  = &H0000900E
' Public Const UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY As Integer  = &H0000900F
' Public Const DRAW_INDIRECT_BUFFER As Integer  = &H00008F3F
' Public Const DRAW_INDIRECT_BUFFER_BINDING As Integer  = &H00008F43
' Public Const GEOMETRY_SHADER_INVOCATIONS As Integer  = &H0000887F
' Public Const MAX_GEOMETRY_SHADER_INVOCATIONS As Integer  = &H00008E5A
' Public Const MIN_FRAGMENT_INTERPOLATION_OFFSET As Integer  = &H00008E5B
' Public Const MAX_FRAGMENT_INTERPOLATION_OFFSET As Integer  = &H00008E5C
' Public Const FRAGMENT_INTERPOLATION_OFFSET_BITS As Integer  = &H00008E5D
' Public Const MAX_VERTEX_STREAMS As Integer  = &H00008E71
' Public Const DOUBLE_VEC2 As Integer  = &H00008FFC
' Public Const DOUBLE_VEC3 As Integer  = &H00008FFD
' Public Const DOUBLE_VEC4 As Integer  = &H00008FFE
' Public Const DOUBLE_MAT2 As Integer  = &H00008F46
' Public Const DOUBLE_MAT3 As Integer  = &H00008F47
' Public Const DOUBLE_MAT4 As Integer  = &H00008F48
' Public Const DOUBLE_MAT2x3 As Integer  = &H00008F49
' Public Const DOUBLE_MAT2x4 As Integer  = &H00008F4A
' Public Const DOUBLE_MAT3x2 As Integer  = &H00008F4B
' Public Const DOUBLE_MAT3x4 As Integer  = &H00008F4C
' Public Const DOUBLE_MAT4x2 As Integer  = &H00008F4D
' Public Const DOUBLE_MAT4x3 As Integer  = &H00008F4E
' Public Const ACTIVE_SUBROUTINES As Integer  = &H00008DE5
' Public Const ACTIVE_SUBROUTINE_UNIFORMS As Integer  = &H00008DE6
' Public Const ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS As Integer  = &H00008E47
' Public Const ACTIVE_SUBROUTINE_MAX_LENGTH As Integer  = &H00008E48
' Public Const ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH As Integer  = &H00008E49
' Public Const MAX_SUBROUTINES As Integer  = &H00008DE7
' Public Const MAX_SUBROUTINE_UNIFORM_LOCATIONS As Integer  = &H00008DE8
' Public Const NUM_COMPATIBLE_SUBROUTINES As Integer  = &H00008E4A
' Public Const COMPATIBLE_SUBROUTINES As Integer  = &H00008E4B
' Public Const PATCHES As Integer  = &H0000000E
' Public Const PATCH_VERTICES As Integer  = &H00008E72
' Public Const PATCH_DEFAULT_INNER_LEVEL As Integer  = &H00008E73
' Public Const PATCH_DEFAULT_OUTER_LEVEL As Integer  = &H00008E74
' Public Const TESS_CONTROL_OUTPUT_VERTICES As Integer  = &H00008E75
' Public Const TESS_GEN_MODE As Integer  = &H00008E76
' Public Const TESS_GEN_SPACING As Integer  = &H00008E77
' Public Const TESS_GEN_VERTEX_ORDER As Integer  = &H00008E78
' Public Const TESS_GEN_POINT_MODE As Integer  = &H00008E79
' Public Const ISOLINES As Integer  = &H00008E7A
' Public Const FRACTIONAL_ODD As Integer  = &H00008E7B
' Public Const FRACTIONAL_EVEN As Integer  = &H00008E7C
' Public Const MAX_PATCH_VERTICES As Integer  = &H00008E7D
' Public Const MAX_TESS_GEN_LEVEL As Integer  = &H00008E7E
' Public Const MAX_TESS_CONTROL_UNIFORM_COMPONENTS As Integer  = &H00008E7F
' Public Const MAX_TESS_EVALUATION_UNIFORM_COMPONENTS As Integer  = &H00008E80
' Public Const MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS As Integer  = &H00008E81
' Public Const MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS As Integer  = &H00008E82
' Public Const MAX_TESS_CONTROL_OUTPUT_COMPONENTS As Integer  = &H00008E83
' Public Const MAX_TESS_PATCH_COMPONENTS As Integer  = &H00008E84
' Public Const MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS As Integer  = &H00008E85
' Public Const MAX_TESS_EVALUATION_OUTPUT_COMPONENTS As Integer  = &H00008E86
' Public Const MAX_TESS_CONTROL_UNIFORM_BLOCKS As Integer  = &H00008E89
' Public Const MAX_TESS_EVALUATION_UNIFORM_BLOCKS As Integer  = &H00008E8A
' Public Const MAX_TESS_CONTROL_INPUT_COMPONENTS As Integer  = &H0000886C
' Public Const MAX_TESS_EVALUATION_INPUT_COMPONENTS As Integer  = &H0000886D
' Public Const MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS As Integer  = &H00008E1E
' Public Const MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS As Integer  = &H00008E1F
' Public Const UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER As Integer  = &H000084F0
' Public Const UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER As Integer  = &H000084F1
' Public Const TESS_EVALUATION_SHADER As Integer  = &H00008E87
' Public Const TESS_CONTROL_SHADER As Integer  = &H00008E88
' Public Const TRANSFORM_FEEDBACK As Integer  = &H00008E22
' Public Const TRANSFORM_FEEDBACK_BUFFER_PAUSED As Integer  = &H00008E23
' Public Const TRANSFORM_FEEDBACK_BUFFER_ACTIVE As Integer  = &H00008E24
' Public Const TRANSFORM_FEEDBACK_BINDING As Integer  = &H00008E25
' Public Const MAX_TRANSFORM_FEEDBACK_BUFFERS As Integer  = &H00008E70
'
' Public Const VERSION_3_3 1
' Public Const VERTEX_ATTRIB_ARRAY_DIVISOR As Integer  = &H000088FE
' Public Const SRC1_COLOR As Integer  = &H000088F9
' Public Const ONE_MINUS_SRC1_COLOR As Integer  = &H000088FA
' Public Const ONE_MINUS_SRC1_ALPHA As Integer  = &H000088FB
' Public Const MAX_DUAL_SOURCE_DRAW_BUFFERS As Integer  = &H000088FC
' Public Const ANY_SAMPLES_PASSED As Integer  = &H00008C2F
' Public Const SAMPLER_BINDING As Integer  = &H00008919
' Public Const RGB10_A2UI As Integer  = &H0000906F
' Public Const TEXTURE_SWIZZLE_R As Integer  = &H00008E42
' Public Const TEXTURE_SWIZZLE_G As Integer  = &H00008E43
' Public Const TEXTURE_SWIZZLE_B As Integer  = &H00008E44
' Public Const TEXTURE_SWIZZLE_A As Integer  = &H00008E45
' Public Const TEXTURE_SWIZZLE_RGBA As Integer  = &H00008E46
' Public Const TIME_ELAPSED As Integer  = &H000088BF
' Public Const TIMESTAMP As Integer  = &H00008E28
' Public Const INT_2_10_10_10_REV As Integer  = &H00008D9F
' Public Const FIXED As Integer  = &H0000140C
' Public Const IMPLEMENTATION_COLOR_READ_TYPE As Integer  = &H00008B9A
' Public Const IMPLEMENTATION_COLOR_READ_FORMAT As Integer  = &H00008B9B
' Public Const LOW_single As Integer  = &H00008DF0
' Public Const MEDIUM_single As Integer  = &H00008DF1
' Public Const HIGH_single As Integer  = &H00008DF2
' Public Const LOW_INT As Integer  = &H00008DF3
' Public Const MEDIUM_INT As Integer  = &H00008DF4
' Public Const HIGH_INT As Integer  = &H00008DF5
' Public Const SHADER_COMPILER As Integer  = &H00008DFA
' Public Const SHADER_BINARY_FORMATS As Integer  = &H00008DF8
' Public Const NUM_SHADER_BINARY_FORMATS As Integer  = &H00008DF9
' Public Const MAX_VERTEX_UNIFORM_VECTORS As Integer  = &H00008DFB
' Public Const MAX_VARYING_VECTORS As Integer  = &H00008DFC
' Public Const MAX_FRAGMENT_UNIFORM_VECTORS As Integer  = &H00008DFD
' Public Const RGB565 As Integer  = &H00008D62
' Public Const PROGRAM_BINARY_RETRIEVABLE_HINT As Integer  = &H00008257
' Public Const PROGRAM_BINARY_LENGTH As Integer  = &H00008741
' Public Const NUM_PROGRAM_BINARY_FORMATS As Integer  = &H000087FE
' Public Const PROGRAM_BINARY_FORMATS As Integer  = &H000087FF
' Public Const VERTEX_SHADER_BIT As Integer  = &H000000000001
' Public Const FRAGMENT_SHADER_BIT As Integer  = &H000000000002
' Public Const GEOMETRY_SHADER_BIT As Integer  = &H000000000004
' Public Const TESS_CONTROL_SHADER_BIT As Integer  = &H000000000008
' Public Const TESS_EVALUATION_SHADER_BIT As Integer  = &H000000000010
' Public Const ALL_SHADER_BITS As Integer  = &H0000FFFFFFFF
' Public Const PROGRAM_SEPARABLE As Integer  = &H00008258
' Public Const ACTIVE_PROGRAM As Integer  = &H00008259
' Public Const PROGRAM_PIPELINE_BINDING As Integer  = &H0000825A
' Public Const MAX_VIEWPORTS As Integer  = &H0000825B
' Public Const VIEWPORT_SUBPIXEL_BITS As Integer  = &H0000825C
' Public Const VIEWPORT_BOUNDS_RANGE As Integer  = &H0000825D
' Public Const LAYER_PROVOKING_VERTEX As Integer  = &H0000825E
' Public Const VIEWPORT_INDEX_PROVOKING_VERTEX As Integer  = &H0000825F
' Public Const UNDEFINED_VERTEX As Integer  = &H00008260
' Public Const VERSION_4_5 1
' Public Const CONTEXT_LOST As Integer  = &H00000507
' Public Const NEGATIVE_ONE_TO_ONE As Integer  = &H0000935E
' Public Const ZERO_TO_ONE As Integer  = &H0000935F
' Public Const CLIP_ORIGIN As Integer  = &H0000935C
' Public Const CLIP_DEPTH_MODE As Integer  = &H0000935D
' Public Const QUERY_WAIT_INVERTED As Integer  = &H00008E17
' Public Const QUERY_NO_WAIT_INVERTED As Integer  = &H00008E18
' Public Const QUERY_BY_REGION_WAIT_INVERTED As Integer  = &H00008E19
' Public Const QUERY_BY_REGION_NO_WAIT_INVERTED As Integer  = &H00008E1A
' Public Const MAX_CULL_DISTANCES As Integer  = &H000082F9
' Public Const MAX_COMBINED_CLIP_AND_CULL_DISTANCES As Integer  = &H000082FA
' Public Const TEXTURE_TARGET As Integer  = &H00001006
' Public Const QUERY_TARGET As Integer  = &H000082EA
' Public Const GUILTY_CONTEXT_RESET As Integer  = &H00008253
' Public Const INNOCENT_CONTEXT_RESET As Integer  = &H00008254
' Public Const UNKNOWN_CONTEXT_RESET As Integer  = &H00008255
' Public Const RESET_NOTIFICATION_STRATEGY As Integer  = &H00008256
' Public Const LOSE_CONTEXT_ON_RESET As Integer  = &H00008252
' Public Const NO_RESET_NOTIFICATION As Integer  = &H00008261
' Public Const CONTEXT_FLAG_ROBUST_ACCESS_BIT As Integer  = &H000000000004
' Public Const CONTEXT_RELEASE_BEHAVIOR As Integer  = &H000082FB
' Public Const CONTEXT_RELEASE_BEHAVIOR_FLUSH As Integer  = &H000082FC
' Public Const DEBUG_OUTPUT_SYNCHRONOUS_ARB As Integer  = &H00008242
' Public Const DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB As Integer  = &H00008243
' Public Const DEBUG_CALLBACK_FUNCTION_ARB As Integer  = &H00008244
' Public Const DEBUG_CALLBACK_USER_PARAM_ARB As Integer  = &H00008245
' Public Const DEBUG_SOURCE_API_ARB As Integer  = &H00008246
' Public Const DEBUG_SOURCE_WINDOW_SYSTEM_ARB As Integer  = &H00008247
' Public Const DEBUG_SOURCE_SHADER_COMPILER_ARB As Integer  = &H00008248
' Public Const DEBUG_SOURCE_THIRD_PARTY_ARB As Integer  = &H00008249
' Public Const DEBUG_SOURCE_APPLICATION_ARB As Integer  = &H0000824A
' Public Const DEBUG_SOURCE_OTHER_ARB As Integer  = &H0000824B
' Public Const DEBUG_TYPE_ERROR_ARB As Integer  = &H0000824C
' Public Const DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB As Integer  = &H0000824D
' Public Const DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB As Integer  = &H0000824E
' Public Const DEBUG_TYPE_PORTABILITY_ARB As Integer  = &H0000824F
' Public Const DEBUG_TYPE_PERFORMANCE_ARB As Integer  = &H00008250
' Public Const DEBUG_TYPE_OTHER_ARB As Integer  = &H00008251
' Public Const MAX_DEBUG_MESSAGE_LENGTH_ARB As Integer  = &H00009143
' Public Const MAX_DEBUG_LOGGED_MESSAGES_ARB As Integer  = &H00009144
' Public Const DEBUG_LOGGED_MESSAGES_ARB As Integer  = &H00009145
' Public Const DEBUG_SEVERITY_HIGH_ARB As Integer  = &H00009146
' Public Const DEBUG_SEVERITY_MEDIUM_ARB As Integer  = &H00009147
' Public Const DEBUG_SEVERITY_LOW_ARB As Integer  = &H00009148
' Public Const ARB_geometry_shader4 1
' Public Const LINES_ADJACENCY_ARB As Integer  = &H0000000A
' Public Const LINE_STRIP_ADJACENCY_ARB As Integer  = &H0000000B
' Public Const TRIANGLES_ADJACENCY_ARB As Integer  = &H0000000C
' Public Const TRIANGLE_STRIP_ADJACENCY_ARB As Integer  = &H0000000D
' Public Const PROGRAM_POINT_SIZE_ARB As Integer  = &H00008642
' Public Const MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB As Integer  = &H00008C29
' Public Const FRAMEBUFFER_ATTACHMENT_LAYERED_ARB As Integer  = &H00008DA7
' Public Const FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB As Integer  = &H00008DA8
' Public Const FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB As Integer  = &H00008DA9
' Public Const GEOMETRY_SHADER_ARB As Integer  = &H00008DD9
' Public Const GEOMETRY_VERTICES_OUT_ARB As Integer  = &H00008DDA
' Public Const GEOMETRY_INPUT_TYPE_ARB As Integer  = &H00008DDB
' Public Const GEOMETRY_OUTPUT_TYPE_ARB As Integer  = &H00008DDC
' Public Const MAX_GEOMETRY_VARYING_COMPONENTS_ARB As Integer  = &H00008DDD
' Public Const MAX_VERTEX_VARYING_COMPONENTS_ARB As Integer  = &H00008DDE
' Public Const MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB As Integer  = &H00008DDF
' Public Const MAX_GEOMETRY_OUTPUT_VERTICES_ARB As Integer  = &H00008DE0
' Public Const MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB As Integer  = &H00008DE1
'
' Public Const ARB_gpu_shader_int64 1
' Public Const INT64_ARB As Integer  = &H0000140E
' Public Const INT64_VEC2_ARB As Integer  = &H00008FE9
' Public Const INT64_VEC3_ARB As Integer  = &H00008FEA
' Public Const INT64_VEC4_ARB As Integer  = &H00008FEB
' Public Const UNSIGNED_INT64_VEC2_ARB As Integer  = &H00008FF5
' Public Const UNSIGNED_INT64_VEC3_ARB As Integer  = &H00008FF6
' Public Const UNSIGNED_INT64_VEC4_ARB As Integer  = &H00008FF7
' Public Const VERSION_4_4 1
' Public Const MAX_VERTEX_ATTRIB_STRIDE As Integer  = &H000082E5
' Public Const PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED As Integer  = &H00008221
' Public Const TEXTURE_BUFFER_BINDING As Integer  = &H00008C2A
' Public Const MAP_PERSISTENT_BIT As Integer  = &H00000040
' Public Const MAP_COHERENT_BIT As Integer  = &H00000080
' Public Const DYNAMIC_STORAGE_BIT As Integer  = &H00000100
' Public Const CLIENT_STORAGE_BIT As Integer  = &H00000200
' Public Const CLIENT_MAPPED_BUFFER_BARRIER_BIT As Integer  = &H000000004000
' Public Const BUFFER_IMMUTABLE_STORAGE As Integer  = &H0000821F
' Public Const BUFFER_STORAGE_FLAGS As Integer  = &H00008220
' Public Const CLEAR_TEXTURE As Integer  = &H00009365
' Public Const LOCATION_COMPONENT As Integer  = &H0000934A
' Public Const TRANSFORM_FEEDBACK_BUFFER_INDEX As Integer  = &H0000934B
' Public Const TRANSFORM_FEEDBACK_BUFFER_STRIDE As Integer  = &H0000934C
' Public Const QUERY_BUFFER As Integer  = &H00009192
' Public Const QUERY_BUFFER_BARRIER_BIT As Integer  = &H000000008000
' Public Const QUERY_BUFFER_BINDING As Integer  = &H00009193
' Public Const QUERY_RESULT_NO_WAIT As Integer  = &H00009194
' Public Const MIRROR_CLAMP_TO_EDGE As Integer  = &H00008743
' Public Const VERSION_4_6 1
' Public Const SHADER_BINARY_FORMAT_SPIR_V As Integer  = &H00009551
' Public Const SPIR_V_BINARY As Integer  = &H00009552
' Public Const PARAMETER_BUFFER As Integer  = &H000080EE
' Public Const PARAMETER_BUFFER_BINDING As Integer  = &H000080EF
' Public Const CONTEXT_FLAG_NO_ERROR_BIT As Integer  = &H000000000008
' Public Const VERTICES_SUBMITTED As Integer  = &H000082EE
' Public Const PRIMITIVES_SUBMITTED As Integer  = &H000082EF
' Public Const VERTEX_SHADER_INVOCATIONS As Integer  = &H000082F0
' Public Const TESS_CONTROL_SHADER_PATCHES As Integer  = &H000082F1
' Public Const TESS_EVALUATION_SHADER_INVOCATIONS As Integer  = &H000082F2
' Public Const GEOMETRY_SHADER_PRIMITIVES_EMITTED As Integer  = &H000082F3
' Public Const FRAGMENT_SHADER_INVOCATIONS As Integer  = &H000082F4
' Public Const COMPUTE_SHADER_INVOCATIONS As Integer  = &H000082F5
' Public Const CLIPPING_INPUT_PRIMITIVES As Integer  = &H000082F6
' Public Const CLIPPING_OUTPUT_PRIMITIVES As Integer  = &H000082F7
' Public Const POLYGON_OFFSET_CLAMP As Integer  = &H00008E1B
' Public Const SPIR_V_EXTENSIONS As Integer  = &H00009553
' Public Const NUM_SPIR_V_EXTENSIONS As Integer  = &H00009554
' Public Const TEXTURE_MAX_ANISOTROPY As Integer  = &H000084FE
' Public Const MAX_TEXTURE_MAX_ANISOTROPY As Integer  = &H000084FF
' Public Const TRANSFORM_FEEDBACK_OVERFLOW As Integer  = &H000082EC
' Public Const TRANSFORM_FEEDBACK_STREAM_OVERFLOW As Integer  = &H000082ED
' Public Const ARB_compute_variable_group_size 1
' Public Const MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB As Integer  = &H00009344
' Public Const MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB As Integer  = &H000090EB
' Public Const MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB As Integer  = &H00009345
' Public Const MAX_COMPUTE_FIXED_GROUP_SIZE_ARB As Integer  = &H000091BF

Public Extern glCullFace(Mode As Integer)
Public Extern glFrontFace(Mode As Integer)
Public Extern glHint(iTarget As Integer, Mode As Integer)
Public Extern glLineWIdth(fWIdth As Single)
Public Extern glPointSize(fSize As Single)
Public Extern glPolygonMode(face As Integer, Mode As Integer)
Public Extern glScissor(x As Integer, y As Integer, iWIdth As Integer, iHeight As Integer)
Public Extern glTexParameterf(iTarget As Integer, iPname As Integer, fParam As Single)
Public Extern glTexParameterfv(iTarget As Integer, iPname As Integer, slxParams As Float[])
Public Extern glTexParameteri(iTarget As Integer, iPname As Integer, iParam As Integer)
Public Extern glTexParameteriv(iTarget As Integer, iPname As Integer, inxParams As Integer[])
Public Extern glTexImage1D(iTarget As Integer, iLevel As Integer, iInternalFormat As Integer, iWIdth As Integer, iBorder As Integer, iFormat As Integer, iType As Integer, pixels As Byte[]) ' verificar si funciona byte
Public Extern glTexImage2D(iTarget As Integer, iLevel As Integer, iInternalFormat As Integer, iWIdth As Integer, iHeight As Integer, iBorder As Integer, iFormat As Integer, iType As Integer, pixels As Byte[])
Public Extern glDrawBuffer(iBuff As Integer)
Public Extern glClear(GiMaskBitField As Integer)
Public Extern glClearColor(red As Single, green As Single, blue As Single, alpha As Single)
Public Extern glClearStencil(s As Integer)
Public Extern glClearDepth(depth As Float)
Public Extern glStencilMask(mask As Integer)
Public Extern glColorMask(red As Byte, green As Byte, blue As Byte, alpha As Byte)
Public Extern glDepthMask(flag As Byte)
Public Extern glDisable(cap As Integer)
Public Extern glEnable(cap As Integer)
Public Extern glFinish()
Public Extern glFlush()
Public Extern glBlendFunc(sFactor As Integer, dFactor As Integer)
Public Extern glLogicOp(opcode As Integer)
Public Extern glStencilFunc(func As Integer, ref As Integer, mask As Integer)
Public Extern glStencilOp(fail As Integer, zfail As Integer, zpass As Integer)
Public Extern glDepthFunc(func As Integer)
Public Extern glPixelStoref(iPname As Integer, fParam As Single)
Public Extern glPixelStorei(iPname As Integer, iParam As Integer)
Public Extern glReadBuffer(src As Integer)
Public Extern glReadPixels(x As Integer, y As Integer, iWIdth As Integer, iHeight As Integer, iFormat As Integer, iType As Integer, pixels As Byte[])
Public Extern glGetBooleanv(iPname As Integer, data As Byte[])
Public Extern glGetDoublev(iPname As Integer, data As Float[])
Public Extern glGetError() As Integer
Public Extern glGetsinglev(iPname As Integer, data As Single[])
Public Extern glGetIntegerv(iPname As Integer, data As Integer[])
Public Extern glGetString(name As Integer) As String
Public Extern glGetTexImage(iTarget As Integer, iLevel As Integer, iFormat As Integer, iType As Integer, pixels As Byte)
Public Extern glGetTexParameterfv(iTarget As Integer, iPname As Integer, params As Single[])
Public Extern glGetTexParameteriv(iTarget As Integer, iPname As Integer, params As Integer[])
Public Extern glGetTexLevelParameterfv(iTarget As Integer, iLevel As Integer, iPname As Integer, params As Single[])
Public Extern glGetTexLevelParameteriv(iTarget As Integer, iLevel As Integer, iPname As Integer, params As Integer[])
Public Extern glIsEnabled(cap As Integer) As Byte
Public Extern glDepthRange(n As Float, f As Float)
Public Extern glViewport(x As Integer, y As Integer, iWIdth As Integer, iHeight As Integer)

Public Extern glDrawArrays(Mode As Integer, first As Integer, iSize As Integer)
Public Extern glDrawElements(Mode As Integer, iSize As Integer, iType As Integer, indices As Byte[]) ' verificar si es byte
Public Extern glGetPointerv(iPname As Integer, params As Pointer)
Public Extern glPolygonOffset(factor As Single, units As Single)
Public Extern glCopyTexImage1D(iTarget As Integer, iLevel As Integer, internalformat As Integer, x As Integer, y As Integer, iWIdth As Integer, iBorder As Integer)
Public Extern glCopyTexImage2D(iTarget As Integer, iLevel As Integer, internalformat As Integer, x As Integer, y As Integer, iWIdth As Integer, iHeight As Integer, iBorder As Integer)
Public Extern glCopyTexSubImage1D(iTarget As Integer, iLevel As Integer, xoffset As Integer, x As Integer, y As Integer, iWIdth As Integer)
Public Extern glCopyTexSubImage2D(iTarget As Integer, iLevel As Integer, xoffset As Integer, yoffset As Integer, x As Integer, y As Integer, iWIdth As Integer, iHeight As Integer)
Public Extern glTexSubImage1D(iTarget As Integer, iLevel As Integer, xoffset As Integer, iWIdth As Integer, iFormat As Integer, iType As Integer, pixels As Byte[])
Public Extern glTexSubImage2D(iTarget As Integer, iLevel As Integer, xOffset As Integer, yOffset As Integer, iWIdth As Integer, iHeight As Integer, iFormat As Integer, iType As Integer, pixels As Byte[])
Public Extern glBindTexture(iTarget As Integer, texture As Integer)
Public Extern glDeleteTextures(n As Integer, textures As Integer[])
Public Extern glGenTextures(n As Integer, textures As Integer[])
Public Extern glIsTexture(texture As Integer) As Boolean

Public Extern glDrawRangeElements(Mode As Integer, start As Integer, iEnd As Integer, iSize As Integer, iType As Integer, indices As Byte[])
Public Extern glTexImage3D(iTarget As Integer, iLevel As Integer, iInternalFormat As Integer, iWIdth As Integer, iHeight As Integer, iDepth As Integer, iBorder As Integer, iFormat As Integer, iType As Integer, pixels As Byte[])
Public Extern glTexSubImage3D(iTarget As Integer, iLevel As Integer, xOffset As Integer, yOffset As Integer, zOffset As Integer, iWIdth As Integer, iHeight As Integer, iDepth As Integer, iFormat As Integer, iType As Integer, pixels As Byte[])
Public Extern glCopyTexSubImage3D(iTarget As Integer, iLevel As Integer, xOffset As Integer, yOffset As Integer, zOffset As Integer, x As Integer, y As Integer, iWIdth As Integer, iHeight As Integer)

Public Extern glActiveTexture(texture As Integer)
Public Extern glSampleCoverage(value As Single, invert As Byte)
Public Extern glCompressedTexImage3D(iTarget As Integer, iLevel As Integer, internalformat As Integer, iWIdth As Integer, iHeight As Integer, iDepth As Integer, iBorder As Integer, imagesize As Integer, data As Byte[])
Public Extern glCompressedTexImage2D(iTarget As Integer, iLevel As Integer, internalformat As Integer, iWIdth As Integer, iHeight As Integer, iBorder As Integer, imagesize As Integer, data As Byte[])
Public Extern glCompressedTexImage1D(iTarget As Integer, iLevel As Integer, internalformat As Integer, iWIdth As Integer, iBorder As Integer, imagesize As Integer, data As Byte[])
Public Extern glCompressedTexSubImage3D(iTarget As Integer, iLevel As Integer, xOffset As Integer, yOffset As Integer, zOffset As Integer, iWIdth As Integer, iHeight As Integer, iDepth As Integer, iFormat As Integer, imagesize As Integer, data As Byte[])
Public Extern glCompressedTexSubImage2D(iTarget As Integer, iLevel As Integer, xOffset As Integer, yOffset As Integer, iWIdth As Integer, iHeight As Integer, iFormat As Integer, imagesize As Integer, data As Byte[])
Public Extern glCompressedTexSubImage1D(iTarget As Integer, iLevel As Integer, xOffset As Integer, iWIdth As Integer, iFormat As Integer, imagesize As Integer, data As Byte[])
Public Extern glGetCompressedTexImage(iTarget As Integer, iLevel As Integer, img As Byte[])

Public Extern glBlendFuncSeparate(sFactorRGB As Integer, dFactorRGB As Integer, sFactorAlpha As Integer, dFactorAlpha As Integer)
Public Extern glMultiDrawArrays(Mode As Integer, first As Integer[], count As Integer[], drawcount As Integer)
Public Extern glMultiDrawElements(Mode As Integer, count As Integer[], iType As Integer, indices As Integer[][], drawcount As Integer)
Public Extern glPointParameterf(iPname As Integer, fParam As Single)
Public Extern glPointParameterfv(iPname As Integer, flxParams As Single[])
Public Extern glPointParameteri(iPname As Integer, iParam As Integer)
Public Extern glPointParameteriv(iPname As Integer, inxParams As Integer[])
Public Extern glBlendColor(red As Single, green As Single, blue As Single, alpha As Single)
Public Extern glBlendEquation(Mode As Integer)

Public Extern glGenQueries(n As Integer, Ids As Integer[])
Public Extern glDeleteQueries(n As Integer, Ids As Integer[])
Public Extern glIsQuery(Id As Integer) As Boolean
Public Extern glBeginQuery(iTarget As Integer, Id As Integer)
Public Extern glEndQuery(iTarget As Integer)
Public Extern glGetQueryiv(iTarget As Integer, iPname As Integer, params As Integer[])
Public Extern glGetQueryObjectiv(Id As Integer, iPname As Integer, params As Integer[])
Public Extern glGetQueryObjectuiv(Id As Integer, iPname As Integer, params As Integer[])
Public Extern glBindBuffer(iTarget As Integer, buffer As Integer)
Public Extern glDeleteBuffers(n As Integer, buffers As Pointer)

' Calling with (n as integer, VarPtr(inx.data))  with inx.count >= n
Public Extern glGenBuffers(n As Integer, buffers As Pointer)
Public Extern glIsBuffer(buffer As Integer) As Boolean
Public Extern glBufferData(iTarget As Integer, size As Long, data As Pointer, usage As Integer)
Public Extern glBufferSubData(iTarget As Integer, offset As Integer, size As Long, data As Pointer)
Public Extern glGetBufferSubData(iTarget As Integer, offset As Integer, size As Long, data As Pointer)
Public Extern glMapBuffer(iTarget As Integer, access As Integer) As Integer[]
Public Extern glUnmapBuffer(iTarget As Integer) As Boolean
Public Extern glGetBufferParameteriv(iTarget As Integer, iPname As Integer, params As Pointer)
Public Extern glGetBufferPointerv(iTarget As Integer, iPname As Integer, params As Pointer)

Public Extern glBlendEquationSeparate(ModeRGB As Integer, Modealpha As Integer)
Public Extern glDrawBuffers(n As Integer, buffers As Integer[])
Public Extern glStencilOpSeparate(face As Integer, sFail As Integer, dpFail As Integer, dpPass As Integer)
Public Extern glStencilFuncSeparate(face As Integer, func As Integer, ref As Integer, mask As Integer)
Public Extern glStencilMaskSeparate(face As Integer, mask As Integer)
Public Extern glAttachShader(program As Integer, shader As Integer)
Public Extern glBindAttribLocation(program As Integer, iIndex As Integer, name As String)
Public Extern glCompileShader(shader As Integer)
Public Extern glCreateProgram() As Integer
Public Extern glCreateShader(iType As Integer) As Integer
Public Extern glDeleteProgram(program As Integer)
Public Extern glDeleteShader(shader As Integer)
Public Extern glDetachShader(program As Integer, shader As Integer)
Public Extern glDisableVertexAttribArray(iIndex As Integer)
Public Extern glEnableVertexAttribArray(iIndex As Integer)
Public Extern glGetActiveAttrib(program As Integer, iIndex As Integer, BufSize As Integer, length As Integer[], size As Integer[], type As Integer[], name As String)
Public Extern glGetActiveUniform(program As Integer, iIndex As Integer, BufSize As Integer, length As Integer[], size As Integer[], type As Integer[], name As String)
Public Extern glGetAttachedShaders(program As Integer, MaxCount As Integer, count As Integer[], shaders As Integer[])
Public Extern glGetAttribLocation(program As Integer, name As String)
Public Extern glGetProgramiv(program As Integer, iPname As Integer, params As Integer[])
Public Extern glGetProgramInfoLog(program As Integer, BufSize As Integer, length As Integer[], infoLog As String)
Public Extern glGetShaderiv(shader As Integer, iPname As Integer, params As Integer[])
Public Extern glGetShaderInfoLog(shader As Integer, BufSize As Integer, legth As Integer[], infolog As String)
Public Extern glGetShaderSource(shader As Integer, BufSize As Integer, legth As Integer[], source As String)
Public Extern glGetUniformLocation(program As Integer, name As String)
Public Extern glGetUniformfv(program As Integer, location As Integer, params As Single[])
Public Extern glGetUniformiv(program As Integer, location As Integer, params As Integer[])
Public Extern glGetVertexAttribdv(iIndex As Integer, iPname As Integer, params As Float[])
Public Extern glGetVertexAttribfv(iIndex As Integer, iPname As Integer, params As Single[])
Public Extern glGetVertexAttribiv(iIndex As Integer, iPname As Integer, params As Integer[])
Public Extern glGetVertexAttribPointerv(iIndex As Integer, iPname As Integer, p As Pointer)
Public Extern glIsProgram(program As Integer) As Boolean
Public Extern glIsShader(shader As Integer) As Boolean
Public Extern glLinkProgram(program As Integer)
Public Extern glShaderSource(shader As Integer, iSize As Integer, ByRef Source As String, ByRef length As Integer)
Public Extern glUseProgram(program As Integer)
Public Extern glUniform1f(location As Integer, v0 As Single)
Public Extern glUniform2f(location As Integer, v0 As Single, v1 As Single)
Public Extern glUniform3f(location As Integer, v0 As Single, v1 As Single, v2 As Single)
Public Extern glUniform4f(location As Integer, v0 As Single, v1 As Single, v2 As Single, v3 As Single)
Public Extern glUniform1i(location As Integer, v0 As Integer)
Public Extern glUniform2i(location As Integer, v0 As Integer, v1 As Integer)
Public Extern glUniform3i(location As Integer, v0 As Integer, v1 As Integer, v2 As Integer)
Public Extern glUniform4i(location As Integer, v0 As Integer, v1 As Integer, v2 As Integer, v3 As Integer)
Public Extern glUniform1fv(location As Integer, iSize As Integer, value As Single[])
Public Extern glUniform2fv(location As Integer, iSize As Integer, value As Single[])
Public Extern glUniform3fv(location As Integer, iSize As Integer, value As Single[])
Public Extern glUniform4fv(location As Integer, iSize As Integer, value As Single[])
Public Extern glUniform1iv(location As Integer, iSize As Integer, value As Integer[])
Public Extern glUniform2iv(location As Integer, iSize As Integer, value As Integer[])
Public Extern glUniform3iv(location As Integer, iSize As Integer, value As Integer[])
Public Extern glUniform4iv(location As Integer, iSize As Integer, value As Integer[])
' Public Extern glUniformMatrix2fv(location As Integer, iSize As Integer, As Byte transpose, const GLsingle * value)
' Public Extern glUniformMatrix3fv(location As Integer, iSize As Integer, As Byte transpose, const GLsingle * value)
' Public Extern glUniformMatrix4fv(location As Integer, iSize As Integer, As Byte transpose, const GLsingle * value)
Public Extern glValIdateProgram(program As Integer)
' Public Extern glVertexAttrib1d(iIndex As Integer, x As Float)
' Public Extern glVertexAttrib1dv(iIndex As Integer, const As Float * v)
' Public Extern glVertexAttrib1f(iIndex As Integer, GLsingle x)
' Public Extern glVertexAttrib1fv(iIndex As Integer, const GLsingle * v)
' Public Extern glVertexAttrib1s(iIndex As Integer, GLshort x)
' Public Extern glVertexAttrib1sv(iIndex As Integer, const GLshort * v)
' Public Extern glVertexAttrib2d(iIndex As Integer, x As Float, As Float y)
' Public Extern glVertexAttrib2dv(iIndex As Integer, const As Float * v)
' Public Extern glVertexAttrib2f(iIndex As Integer, GLsingle x, GLsingle y)
' Public Extern glVertexAttrib2fv(iIndex As Integer, const GLsingle * v)
' Public Extern glVertexAttrib2s(iIndex As Integer, GLshort x, GLshort y)
' Public Extern glVertexAttrib2sv(iIndex As Integer, const GLshort * v)
' Public Extern glVertexAttrib3d(iIndex As Integer, x As Float, As Float y, As Float z)
' Public Extern glVertexAttrib3dv(iIndex As Integer, const As Float * v)
' Public Extern glVertexAttrib3f(iIndex As Integer, GLsingle x, GLsingle y, GLsingle z)
' Public Extern glVertexAttrib3fv(iIndex As Integer, const GLsingle * v)
' Public Extern glVertexAttrib3s(iIndex As Integer, GLshort x, GLshort y, GLshort z)
' Public Extern glVertexAttrib3sv(iIndex As Integer, const GLshort * v)
' Public Extern glVertexAttrib4Nbv(iIndex As Integer, const GLbyte * v)
' Public Extern glVertexAttrib4Niv(iIndex As Integer, const GLint * v)
' Public Extern glVertexAttrib4Nsv(iIndex As Integer, const GLshort * v)
' Public Extern glVertexAttrib4Nub(iIndex As Integer, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
' Public Extern glVertexAttrib4Nubv(iIndex As Integer, const GLubyte * v)
' Public Extern glVertexAttrib4Nuiv(iIndex As Integer, const GLuint * v)
' Public Extern glVertexAttrib4Nusv(iIndex As Integer, const GLushort * v)
' Public Extern glVertexAttrib4bv(iIndex As Integer, const GLbyte * v)
' Public Extern glVertexAttrib4d(iIndex As Integer, x As Float, As Float y, As Float z, As Float w)
' Public Extern glVertexAttrib4dv(iIndex As Integer, const As Float * v)
' Public Extern glVertexAttrib4f(iIndex As Integer, GLsingle x, GLsingle y, GLsingle z, GLsingle w)
' Public Extern glVertexAttrib4fv(iIndex As Integer, const GLsingle * v)
' Public Extern glVertexAttrib4iv(iIndex As Integer, const GLint * v)
' Public Extern glVertexAttrib4s(iIndex As Integer, GLshort x, GLshort y, GLshort z, GLshort w)
' Public Extern glVertexAttrib4sv(iIndex As Integer, const GLshort * v)
' Public Extern glVertexAttrib4ubv(iIndex As Integer, const GLubyte * v)
' Public Extern glVertexAttrib4uiv(iIndex As Integer, const GLuint * v)
' Public Extern glVertexAttrib4usv(iIndex As Integer, const GLushort * v)
' Public Extern glVertexAttribPointer(iIndex As Integer, size As Integer, iType As Integer, normalized As Boolean, stride As Integer, ipointer As Byte[]) ' FIXME: verificar

' Public Extern glUniformMatrix2x3fv(location As Integer, iSize As Integer, As Byte transpose, const GLsingle * value)
' Public Extern glUniformMatrix3x2fv(location As Integer, iSize As Integer, As Byte transpose, const GLsingle * value)
' Public Extern glUniformMatrix2x4fv(location As Integer, iSize As Integer, As Byte transpose, const GLsingle * value)
' Public Extern glUniformMatrix4x2fv(location As Integer, iSize As Integer, As Byte transpose, const GLsingle * value)
' Public Extern glUniformMatrix3x4fv(location As Integer, iSize As Integer, As Byte transpose, const GLsingle * value)
' Public Extern glUniformMatrix4x3fv(location As Integer, iSize As Integer, As Byte transpose, const GLsingle * value)

' Public Extern glColorMaski(iIndex As Integer, as byte r, as byte g, as byte b, as byte a)
' Public Extern glGetBooleani_v(iTarget As Integer, iIndex As Integer, as byte data as byte[])
' Public Extern glGetIntegeri_v(iTarget As Integer, iIndex As Integer, GLint data as byte[])
' Public Extern glEnablei(iTarget As Integer, iIndex As Integer)
' Public Extern glDisablei(iTarget As Integer, iIndex As Integer)
' GLAPI as byte APIENTRY glIsEnabledi(iTarget As Integer, iIndex As Integer)
' Public Extern glBeginTransformFeedback(as integer primitiveMode)
' Public Extern glEndTransformFeedback()
' Public Extern glBindBufferRange(iTarget As Integer, iIndex As Integer, buffer as integer, offset as integer, size as integer)
' Public Extern glBindBufferBase(iTarget As Integer, iIndex As Integer, buffer as integer)
' Public Extern glTransformFeedbackVaryings(program As Integer, iSize as Integer, const GLchar * const * varyings, iBuff as integerferMode)
' Public Extern glGetTransformFeedbackVarying(program As Integer, iIndex As Integer, BufSize As Integer, legth as integer[], GLsizei * size, as integer * type, name as string)
' Public Extern glClampColor(iTarget As Integer, as integer clamp)
' Public Extern glBeginConditionalRender(id as integer, Mode As Integer)
' Public Extern glEndConditionalRender()
' Public Extern glVertexAttribIPointer(iIndex As Integer, size as integer, iType As Integer, stride as integer, const * pointer)
' Public Extern glGetVertexAttribIiv(iIndex As Integer, iPname As Integer, params as integer[])
' Public Extern glGetVertexAttribIuiv(iIndex As Integer, iPname As Integer, params as integer[])
' Public Extern glVertexAttribI1i(iIndex As Integer, x As Integer)
' Public Extern glVertexAttribI2i(iIndex As Integer, x As Integer, y As Integer)
' Public Extern glVertexAttribI3i(iIndex As Integer, x As Integer, y As Integer, GLint z)
' Public Extern glVertexAttribI4i(iIndex As Integer, x As Integer, y As Integer, GLint z, GLint w)
' Public Extern glVertexAttribI1ui(iIndex As Integer, GLuint x)
' Public Extern glVertexAttribI2ui(iIndex As Integer, GLuint x, GLuint y)
' Public Extern glVertexAttribI3ui(iIndex As Integer, GLuint x, GLuint y, GLuint z)
' Public Extern glVertexAttribI4ui(iIndex As Integer, GLuint x, GLuint y, GLuint z, GLuint w)
' Public Extern glVertexAttribI1iv(iIndex As Integer, const GLint * v)
' Public Extern glVertexAttribI2iv(iIndex As Integer, const GLint * v)
' Public Extern glVertexAttribI3iv(iIndex As Integer, const GLint * v)
' Public Extern glVertexAttribI4iv(iIndex As Integer, const GLint * v)
' Public Extern glVertexAttribI1uiv(iIndex As Integer, const GLuint * v)
' Public Extern glVertexAttribI2uiv(iIndex As Integer, const GLuint * v)
' Public Extern glVertexAttribI3uiv(iIndex As Integer, const GLuint * v)
' Public Extern glVertexAttribI4uiv(iIndex As Integer, const GLuint * v)
' Public Extern glVertexAttribI4bv(iIndex As Integer, const GLbyte * v)
' Public Extern glVertexAttribI4sv(iIndex As Integer, const GLshort * v)
' Public Extern glVertexAttribI4ubv(iIndex As Integer, const GLubyte * v)
' Public Extern glVertexAttribI4usv(iIndex As Integer, const GLushort * v)
' Public Extern glGetUniformuiv(program As Integer, location as Integer, params as integer[])
' Public Extern glBindFragDataLocation(program As Integer, GLuint color, const name as string)
' Public Extern Function glGetFragDataLocation(program As Integer, const name as string)
' Public Extern glUniform1ui(location as Integer, GLuint v0)
' Public Extern glUniform2ui(location as Integer, GLuint v0, GLuint v1)
' Public Extern glUniform3ui(location as Integer, GLuint v0, GLuint v1, GLuint v2)
' Public Extern glUniform4ui(location as Integer, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
' Public Extern glUniform1uiv(location as Integer, iSize as Integer, const GLuint * value)
' Public Extern glUniform2uiv(location as Integer, iSize as Integer, const GLuint * value)
' Public Extern glUniform3uiv(location as Integer, iSize as Integer, const GLuint * value)
' Public Extern glUniform4uiv(location as Integer, iSize as Integer, const GLuint * value)
' Public Extern glTexParameterIiv(iTarget As Integer, iPname As Integer, inxParams as integer[])
' Public Extern glTexParameterIuiv(iTarget As Integer, iPname As Integer, const params as integer[])
' Public Extern glGetTexParameterIiv(iTarget As Integer, iPname As Integer, params as integer[])
' Public Extern glGetTexParameterIuiv(iTarget As Integer, iPname As Integer, params as integer[])
' Public Extern glClearBufferiv(iBuff as integerfer, GLint drawbuffer, value as integer[])
' Public Extern glClearBufferuiv(iBuff as integerfer, GLint drawbuffer, const GLuint * value)
' Public Extern glClearBufferfv(iBuff as integerfer, GLint drawbuffer, const GLsingle * value)
' Public Extern glClearBufferfi(iBuff as integerfer, GLint drawbuffer, GLsingle depth, GLint stencil)
' GLAPI const GLubyte * APIENTRY glGetStringi(as integer name, iIndex As Integer)
' GLAPI as byte APIENTRY glIsRenderbuffer(GLuint renderbuffer)
' Public Extern glBindRenderbuffer(iTarget As Integer, GLuint renderbuffer)
' Public Extern glDeleteRenderbuffers(n as Integer, const GLuint * renderbuffers)
' Public Extern glGenRenderbuffers(n as Integer, GLuint * renderbuffers)
' Public Extern glRenderbufferStorage(iTarget As Integer,internalformat as integer, iWidth As Integer, iHeight As Integer)
' Public Extern glGetRenderbufferParameteriv(iTarget As Integer, iPname As Integer, params as integer[])
' GLAPI as byte APIENTRY glIsFramebuffer(GLuint framebuffer)
' Public Extern glBindFramebuffer(iTarget As Integer, GLuint framebuffer)
' Public Extern glDeleteFramebuffers(n as Integer, const GLuint * framebuffers)
' Public Extern glGenFramebuffers(n as Integer, GLuint * framebuffers)
' GLAPI as integer APIENTRY glCheckFramebufferStatus(iTarget As Integer)
' Public Extern glFramebufferTexture1D(iTarget As Integer, as integer attachment, as integer textarget, texture as Integer, iLevel as integer)
' Public Extern glFramebufferTexture2D(iTarget As Integer, as integer attachment, as integer textarget, texture as Integer, iLevel as integer)
' Public Extern glFramebufferTexture3D(iTarget As Integer, as integer attachment, as integer textarget, texture as Integer, iLevel as integer, zOffset as integer)
' Public Extern glFramebufferRenderbuffer(iTarget As Integer, as integer attachment, as integer renderbuffertarget, GLuint renderbuffer)
' Public Extern glGetFramebufferAttachmentParameteriv(iTarget As Integer, as integer attachment, iPname As Integer, params as integer[])
' Public Extern glGenerateMipmap(iTarget As Integer)
' Public Extern glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GiMaskBitField as integer, as integer filter)
' Public Extern glRenderbufferStorageMultisample(iTarget As Integer, GLsizei samples,internalformat as integer, iWidth As Integer, iHeight As Integer)
' Public Extern glFramebufferTextureLayer(iTarget As Integer, as integer attachment, texture as Integer, iLevel as integer, GLint layer)
' GLAPI * APIENTRY glMapBufferRange(iTarget As Integer, offset as integer, GLsizeiptr length, GLbitfield access)
' Public Extern glFlushMappedBufferRange(iTarget As Integer, offset as integer, GLsizeiptr length)
' Public Extern glBindVertexArray(GLuint array)
' Public Extern glDeleteVertexArrays(n as Integer, const GLuint * arrays)
' Public Extern glGenVertexArrays(n as Integer, GLuint * arrays)
' GLAPI as byte APIENTRY glIsVertexArray(GLuint array)

' Public Extern glDrawArraysInstanced(Mode As Integer, first as integer, iSize as Integer, GLsizei instancecount)
' Public Extern glDrawElementsInstanced(Mode As Integer, iSize as Integer, iType As Integer, const * indices, GLsizei instancecount)
' Public Extern glTexBuffer(iTarget As Integer,internalformat as integer, buffer as integer)
' Public Extern glPrimitiveRestartIndex(iIndex As Integer)
' Public Extern glCopyBufferSubData(as integer readTarget, as integer writeTarget, GLintptr readOffset, GLintptr writeOffset, size as integer)
' Public Extern glGetUniformIndices(program As Integer, GLsizei uniformCount, const GLchar * const * uniformNames, GLuint * uniformIndices)
' Public Extern glGetActiveUniformsiv(program As Integer, GLsizei uniformCount, const GLuint * uniformIndices, iPname As Integer, params as integer[])
' Public Extern glGetActiveUniformName(program As Integer, GLuint uniformIndex, BufSize As Integer, legth as integer[], GLchar * uniformName)
' GLAPI GLuint APIENTRY glGetUniformBlockIndex(program As Integer, const GLchar * uniformBlockName)
' Public Extern glGetActiveUniformBlockiv(program As Integer, GLuint uniformBlockIndex, iPname As Integer, params as integer[])
' Public Extern glGetActiveUniformBlockName(program As Integer, GLuint uniformBlockIndex, BufSize As Integer, legth as integer[], GLchar * uniformBlockName)
' Public Extern glUniformBlockBinding(program As Integer, GLuint uniformBlockIndex, GLuint uniformBlockBinding)
'

' Public Extern glDrawElementsBaseVertex(Mode As Integer, iSize as Integer, iType As Integer, const * indices, GLint basevertex)
' Public Extern glDrawRangeElementsBaseVertex(Mode As Integer, start as integer, iEnd as integer , iSize as Integer, iType As Integer, const * indices, GLint basevertex)
' Public Extern glDrawElementsInstancedBaseVertex(Mode As Integer, iSize as Integer, iType As Integer, const * indices, GLsizei instancecount, GLint basevertex)
' Public Extern glMultiDrawElementsBaseVertex(Mode As Integer, const GLsizei * count, iType As Integer, const * const * indices, drawcount as integer, const GLint * basevertex)
' Public Extern glProvokingVertex(Mode As Integer)
' GLAPI GLsync APIENTRY glFenceSync(as integer condition, GLbitfield flags)
' GLAPI as byte APIENTRY glIsSync(GLsync sync)
' Public Extern glDeleteSync(GLsync sync)
' GLAPI as integer APIENTRY glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)
' Public Extern glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)
' Public Extern glGetInteger64v(iPname As Integer, GLint64 data as byte[])
' Public Extern glGetSynciv(GLsync sync, iPname As Integer, BufSize As Integer, legth as integer[], GLint * values)
' Public Extern glGetInteger64i_v(iTarget As Integer, iIndex As Integer, GLint64 data as byte[])
' Public Extern glGetBufferParameteri64v(iTarget As Integer, iPname As Integer, GLint64 * params)
' Public Extern glFramebufferTexture(iTarget As Integer, as integer attachment, texture as Integer, iLevel as integer)
' Public Extern glTexImage2DMultisample(iTarget As Integer, GLsizei samples,internalformat as integer, iWidth As Integer, iHeight As Integer, as byte fixedsamplelocations)
' Public Extern glTexImage3DMultisample(iTarget As Integer, GLsizei samples,internalformat as integer, iWidth As Integer, iHeight As Integer, iDepth as integer, as byte fixedsamplelocations)
' Public Extern glGetMultisamplefv(iPname As Integer, iIndex As Integer, GLsingle * val)
' Public Extern glSampleMaski(mask as integerNumber, GiMaskBitField as integer)

' Public Extern glBindFragDataLocationIndexed(program As Integer, GLuint colorNumber, iIndex As Integer, const name as string)
' Public Extern Function glGetFragDataIndex(program As Integer, const name as string)
' Public Extern glGenSamplers(iSize as Integer, GLuint * samplers)
' Public Extern glDeleteSamplers(iSize as Integer, const GLuint * samplers)
' GLAPI as byte APIENTRY glIsSampler(GLuint sampler)
' Public Extern glBindSampler(GLuint unit, GLuint sampler)
' Public Extern glSamplerParameteri(GLuint sampler, iPname As Integer, iParam As Integer)
' Public Extern glSamplerParameteriv(GLuint sampler, iPname As Integer, const GLint * param)
' Public Extern glSamplerParameterf(GLuint sampler, iPname As Integer, fParam As single)
' Public Extern glSamplerParameterfv(GLuint sampler, iPname As Integer, const GLsingle * param)
' Public Extern glSamplerParameterIiv(GLuint sampler, iPname As Integer, const GLint * param)
' Public Extern glSamplerParameterIuiv(GLuint sampler, iPname As Integer, const GLuint * param)
' Public Extern glGetSamplerParameteriv(GLuint sampler, iPname As Integer, params as integer[])
' Public Extern glGetSamplerParameterIiv(GLuint sampler, iPname As Integer, params as integer[])
' Public Extern glGetSamplerParameterfv(GLuint sampler, iPname As Integer, params as single[])
' Public Extern glGetSamplerParameterIuiv(GLuint sampler, iPname As Integer, params as integer[])
' Public Extern glQueryCounter(id as integer, iTarget As Integer)
' Public Extern glGetQueryObjecti64v(id as integer, iPname As Integer, GLint64 * params)
' Public Extern glGetQueryObjectui64v(id as integer, iPname As Integer, GLuint64 * params)
' Public Extern glVertexAttribDivisor(iIndex As Integer, GLuint divisor)
' Public Extern glVertexAttribP1ui(iIndex As Integer, iType As Integer, as byte normalized, GLuint value)
' Public Extern glVertexAttribP1uiv(iIndex As Integer, iType As Integer, as byte normalized, const GLuint * value)
' Public Extern glVertexAttribP2ui(iIndex As Integer, iType As Integer, as byte normalized, GLuint value)
' Public Extern glVertexAttribP2uiv(iIndex As Integer, iType As Integer, as byte normalized, const GLuint * value)
' Public Extern glVertexAttribP3ui(iIndex As Integer, iType As Integer, as byte normalized, GLuint value)
' Public Extern glVertexAttribP3uiv(iIndex As Integer, iType As Integer, as byte normalized, const GLuint * value)
' Public Extern glVertexAttribP4ui(iIndex As Integer, iType As Integer, as byte normalized, GLuint value)
' Public Extern glVertexAttribP4uiv(iIndex As Integer, iType As Integer, as byte normalized, const GLuint * value)
'

' Public Extern glMinSampleShading(value as single)
' Public Extern glBlendEquationi(GLuint buf, Mode As Integer)
' Public Extern glBlendEquationSeparatei(GLuint buf, Mode As IntegerRGB, Mode As IntegerAlpha)
' Public Extern glBlendFunci(GLuint buf, as integer src, as integer dst)
' Public Extern glBlendFuncSeparatei(GLuint buf, as integer srcRGB, as integer dstRGB, as integer srcAlpha, as integer dstAlpha)
' Public Extern glDrawArraysIndirect(Mode As Integer, const * indirect)
' Public Extern glDrawElementsIndirect(Mode As Integer, iType As Integer, const * indirect)
' Public Extern glUniform1d(location as Integer, x as float)
' Public Extern glUniform2d(location as Integer, x as float, as float y)
' Public Extern glUniform3d(location as Integer, x as float, as float y, as float z)
' Public Extern glUniform4d(location as Integer, x as float, as float y, as float z, as float w)
' Public Extern glUniform1dv(location as Integer, iSize as Integer, const as float * value)
' Public Extern glUniform2dv(location as Integer, iSize as Integer, const as float * value)
' Public Extern glUniform3dv(location as Integer, iSize as Integer, const as float * value)
' Public Extern glUniform4dv(location as Integer, iSize as Integer, const as float * value)
' Public Extern glUniformMatrix2dv(location as Integer, iSize as Integer, as byte transpose, const as float * value)
' Public Extern glUniformMatrix3dv(location as Integer, iSize as Integer, as byte transpose, const as float * value)
' Public Extern glUniformMatrix4dv(location as Integer, iSize as Integer, as byte transpose, const as float * value)
' Public Extern glUniformMatrix2x3dv(location as Integer, iSize as Integer, as byte transpose, const as float * value)
' Public Extern glUniformMatrix2x4dv(location as Integer, iSize as Integer, as byte transpose, const as float * value)
' Public Extern glUniformMatrix3x2dv(location as Integer, iSize as Integer, as byte transpose, const as float * value)
' Public Extern glUniformMatrix3x4dv(location as Integer, iSize as Integer, as byte transpose, const as float * value)
' Public Extern glUniformMatrix4x2dv(location as Integer, iSize as Integer, as byte transpose, const as float * value)
' Public Extern glUniformMatrix4x3dv(location as Integer, iSize as Integer, as byte transpose, const as float * value)
' Public Extern glGetUniformdv(program As Integer, location as Integer, as float * params)
' Public Extern Function glGetSubroutineUniformLocation(program As Integer, as integer shadertype, const name as string)
' GLAPI GLuint APIENTRY glGetSubroutineIndex(program As Integer, as integer shadertype, const name as string)
' Public Extern glGetActiveSubroutineUniformiv(program As Integer, as integer shadertype, iIndex As Integer, iPname As Integer, GLint * values)
' Public Extern glGetActiveSubroutineUniformName(program As Integer, as integer shadertype, iIndex As Integer, BufSize As Integer, legth as integer[], name as string)
' Public Extern glGetActiveSubroutineName(program As Integer, as integer shadertype, iIndex As Integer, BufSize As Integer, legth as integer[], name as string)
' Public Extern glUniformSubroutinesuiv(as integer shadertype, iSize as Integer, const GLuint * indices)
' Public Extern glGetUniformSubroutineuiv(as integer shadertype, location as Integer, params as integer[])
' Public Extern glGetProgramStageiv(program As Integer, as integer shadertype, iPname As Integer, GLint * values)
' Public Extern glPatchParameteri(iPname As Integer, GLint value)
' Public Extern glPatchParameterfv(iPname As Integer, const GLsingle * values)
' Public Extern glBindTransformFeedback(iTarget As Integer, id as integer)
' Public Extern glDeleteTransformFeedbacks(n as Integer, ids as integer[])
' Public Extern glGenTransformFeedbacks(n as Integer, GLuint * ids)
' GLAPI as byte APIENTRY glIsTransformFeedback(id as integer)
' Public Extern glPauseTransformFeedback()
' Public Extern glResumeTransformFeedback()
' Public Extern glDrawTransformFeedback(Mode As Integer, id as integer)
' Public Extern glDrawTransformFeedbackStream(Mode As Integer, id as integer, GLuint stream)
' Public Extern glBeginQueryIndexed(iTarget As Integer, iIndex As Integer, id as integer)
' Public Extern glEndQueryIndexed(iTarget As Integer, iIndex As Integer)
' Public Extern glGetQueryIndexediv(iTarget As Integer, iIndex As Integer, iPname As Integer, params as integer[])
'

' Public Extern glReleaseShaderCompiler()
' Public Extern glShaderBinary(iSize as Integer, const GLuint * shaders, as integer binaryformat, const * Binary , GLsizei length)
' Public Extern glGetShaderPrecisionFormat(as integer shadertype, as integer precisiontype, GLint * range, GLint * precision)
' Public Extern glDepthRangef(GLsingle n, GLsingle f)
' Public Extern glClearDepthf(GLsingle d)
' Public Extern glGetProgramBinary(program As Integer, BufSize As Integer, legth as integer[], as integer * binaryFormat, * Binary )
' Public Extern glProgramBinary(program As Integer, as integer binaryFormat, const * Binary , GLsizei length)
' Public Extern glProgramParameteri(program As Integer, iPname As Integer, GLint value)
' Public Extern glUseProgramStages(GLuint pipeline, GLbitfield stages, program As Integer)
' Public Extern glActiveShaderProgram(GLuint pipeline, program As Integer)
' GLAPI GLuint APIENTRY glCreateShaderProgramv(iType As Integer, iSize as Integer, const GLchar * const * strings)
' Public Extern glBindProgramPipeline(GLuint pipeline)
' Public Extern glDeleteProgramPipelines(n as Integer, const GLuint * pipelines)
' Public Extern glGenProgramPipelines(n as Integer, GLuint * pipelines)
' GLAPI as byte APIENTRY glIsProgramPipeline(GLuint pipeline)
' Public Extern glGetProgramPipelineiv(GLuint pipeline, iPname As Integer, params as integer[])
' Public Extern glProgramUniform1i(program As Integer, location as Integer, v0 as integer)
' Public Extern glProgramUniform1iv(program As Integer, location as Integer, iSize as Integer, value as integer[])
' Public Extern glProgramUniform1f(program As Integer, location as Integer, v0 as single)
' Public Extern glProgramUniform1fv(program As Integer, location as Integer, iSize as Integer, const GLsingle * value)
' Public Extern glProgramUniform1d(program As Integer, location as Integer, as float v0)
' Public Extern glProgramUniform1dv(program As Integer, location as Integer, iSize as Integer, const as float * value)
' Public Extern glProgramUniform1ui(program As Integer, location as Integer, GLuint v0)
' Public Extern glProgramUniform1uiv(program As Integer, location as Integer, iSize as Integer, const GLuint * value)
' Public Extern glProgramUniform2i(program As Integer, location as Integer, v0 as integer, v1 as integer)
' Public Extern glProgramUniform2iv(program As Integer, location as Integer, iSize as Integer, value as integer[])
' Public Extern glProgramUniform2f(program As Integer, location as Integer, v0 as single, v1 as single)
' Public Extern glProgramUniform2fv(program As Integer, location as Integer, iSize as Integer, const GLsingle * value)
' Public Extern glProgramUniform2d(program As Integer, location as Integer, as float v0, as float v1)
' Public Extern glProgramUniform2dv(program As Integer, location as Integer, iSize as Integer, const as float * value)
' Public Extern glProgramUniform2ui(program As Integer, location as Integer, GLuint v0, GLuint v1)
' Public Extern glProgramUniform2uiv(program As Integer, location as Integer, iSize as Integer, const GLuint * value)
' Public Extern glProgramUniform3i(program As Integer, location as Integer, v0 as integer, v1 as integer, v2 as integer)
' Public Extern glProgramUniform3iv(program As Integer, location as Integer, iSize as Integer, value as integer[])
' Public Extern glProgramUniform3f(program As Integer, location as Integer, v0 as single, v1 as single, v2 as single)
' Public Extern glProgramUniform3fv(program As Integer, location as Integer, iSize as Integer, const GLsingle * value)
' Public Extern glProgramUniform3d(program As Integer, location as Integer, as float v0, as float v1, as float v2)
' Public Extern glProgramUniform3dv(program As Integer, location as Integer, iSize as Integer, const as float * value)
' Public Extern glProgramUniform3ui(program As Integer, location as Integer, GLuint v0, GLuint v1, GLuint v2)
' Public Extern glProgramUniform3uiv(program As Integer, location as Integer, iSize as Integer, const GLuint * value)
' Public Extern glProgramUniform4i(program As Integer, location as Integer, v0 as integer, v1 as integer, v2 as integer, v3 as integer)
' Public Extern glProgramUniform4iv(program As Integer, location as Integer, iSize as Integer, value as integer[])
' Public Extern glProgramUniform4f(program As Integer, location as Integer, v0 as single, v1 as single, v2 as single, v3 as single)
' Public Extern glProgramUniform4fv(program As Integer, location as Integer, iSize as Integer, const GLsingle * value)
' Public Extern glProgramUniform4d(program As Integer, location as Integer, as float v0, as float v1, as float v2, as float v3)
' Public Extern glProgramUniform4dv(program As Integer, location as Integer, iSize as Integer, const as float * value)
' Public Extern glProgramUniform4ui(program As Integer, location as Integer, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
' Public Extern glProgramUniform4uiv(program As Integer, location as Integer, iSize as Integer, const GLuint * value)
' Public Extern glProgramUniformMatrix2fv(program As Integer, location as Integer, iSize as Integer, as byte transpose, const GLsingle * value)
' Public Extern glProgramUniformMatrix3fv(program As Integer, location as Integer, iSize as Integer, as byte transpose, const GLsingle * value)
' Public Extern glProgramUniformMatrix4fv(program As Integer, location as Integer, iSize as Integer, as byte transpose, const GLsingle * value)
' Public Extern glProgramUniformMatrix2dv(program As Integer, location as Integer, iSize as Integer, as byte transpose, const as float * value)
' Public Extern glProgramUniformMatrix3dv(program As Integer, location as Integer, iSize as Integer, as byte transpose, const as float * value)
' Public Extern glProgramUniformMatrix4dv(program As Integer, location as Integer, iSize as Integer, as byte transpose, const as float * value)
' Public Extern glProgramUniformMatrix2x3fv(program As Integer, location as Integer, iSize as Integer, as byte transpose, const GLsingle * value)
' Public Extern glProgramUniformMatrix3x2fv(program As Integer, location as Integer, iSize as Integer, as byte transpose, const GLsingle * value)
' Public Extern glProgramUniformMatrix2x4fv(program As Integer, location as Integer, iSize as Integer, as byte transpose, const GLsingle * value)
' Public Extern glProgramUniformMatrix4x2fv(program As Integer, location as Integer, iSize as Integer, as byte transpose, const GLsingle * value)
' Public Extern glProgramUniformMatrix3x4fv(program As Integer, location as Integer, iSize as Integer, as byte transpose, const GLsingle * value)
' Public Extern glProgramUniformMatrix4x3fv(program As Integer, location as Integer, iSize as Integer, as byte transpose, const GLsingle * value)
' Public Extern glProgramUniformMatrix2x3dv(program As Integer, location as Integer, iSize as Integer, as byte transpose, const as float * value)
' Public Extern glProgramUniformMatrix3x2dv(program As Integer, location as Integer, iSize as Integer, as byte transpose, const as float * value)
' Public Extern glProgramUniformMatrix2x4dv(program As Integer, location as Integer, iSize as Integer, as byte transpose, const as float * value)
' Public Extern glProgramUniformMatrix4x2dv(program As Integer, location as Integer, iSize as Integer, as byte transpose, const as float * value)
' Public Extern glProgramUniformMatrix3x4dv(program As Integer, location as Integer, iSize as Integer, as byte transpose, const as float * value)
' Public Extern glProgramUniformMatrix4x3dv(program As Integer, location as Integer, iSize as Integer, as byte transpose, const as float * value)
' Public Extern glValidateProgramPipeline(GLuint pipeline)
' Public Extern glGetProgramPipelineInfoLog(GLuint pipeline, BufSize As Integer, legth as integer[], GLchar * infoLog)
' Public Extern glVertexAttribL1d(iIndex As Integer, x as float)
' Public Extern glVertexAttribL2d(iIndex As Integer, x as float, as float y)
' Public Extern glVertexAttribL3d(iIndex As Integer, x as float, as float y, as float z)
' Public Extern glVertexAttribL4d(iIndex As Integer, x as float, as float y, as float z, as float w)
' Public Extern glVertexAttribL1dv(iIndex As Integer, const as float * v)
' Public Extern glVertexAttribL2dv(iIndex As Integer, const as float * v)
' Public Extern glVertexAttribL3dv(iIndex As Integer, const as float * v)
' Public Extern glVertexAttribL4dv(iIndex As Integer, const as float * v)
' Public Extern glVertexAttribLPointer(iIndex As Integer, size as integer, iType As Integer, stride as integer, const * pointer)
' Public Extern glGetVertexAttribLdv(iIndex As Integer, iPname As Integer, as float * params)
' Public Extern glViewportArrayv(GLuint first, iSize as Integer, const GLsingle * v)
' Public Extern glViewportIndexedf(iIndex As Integer, GLsingle x, GLsingle y, GLsingle w, GLsingle h)
' Public Extern glViewportIndexedfv(iIndex As Integer, const GLsingle * v)
' Public Extern glScissorArrayv(GLuint first, iSize as Integer, const GLint * v)
' Public Extern glScissorIndexed(iIndex As Integer, GLint left, GLint bottom, iWidth As Integer, iHeight As Integer)
' Public Extern glScissorIndexedv(iIndex As Integer, const GLint * v)
' Public Extern glDepthRangeArrayv(GLuint first, iSize as Integer, const as float * v)
' Public Extern glDepthRangeIndexed(iIndex As Integer, as float n, as float f)
' Public Extern glGetsinglei_v(iTarget As Integer, iIndex As Integer, GLsingle data as byte[])
' Public Extern glGetDoublei_v(iTarget As Integer, iIndex As Integer, as float data as byte[])
'

' Public Extern glDrawArraysInstancedBaseInstance(Mode As Integer, first as integer, iSize as Integer, GLsizei instancecount, GLuint baseinstance)
' Public Extern glDrawElementsInstancedBaseInstance(Mode As Integer, iSize as Integer, iType As Integer, const * indices, GLsizei instancecount, GLuint baseinstance)
' Public Extern glDrawElementsInstancedBaseVertexBaseInstance(Mode As Integer, iSize as Integer, iType As Integer, const * indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance)
' Public Extern glGetInternalformativ(iTarget As Integer,internalformat as integer, iPname As Integer, BufSize As Integer, params as integer[])
' Public Extern glGetActiveAtomicCounterBufferiv(program As Integer, buffer as integerIndex, iPname As Integer, params as integer[])
' Public Extern glBindImageTexture(GLuint unit, texture as Integer, iLevel as integer, as byte layered, GLint layer, as integer access, iFormat as integer)
' Public Extern glMemoryBarrier(GLbitfield barriers)
' Public Extern glTexStorage1D(iTarget As Integer, GLsizei levels,internalformat as integer, iWidth As Integer)
' Public Extern glTexStorage2D(iTarget As Integer, GLsizei levels,internalformat as integer, iWidth As Integer, iHeight As Integer)
' Public Extern glTexStorage3D(iTarget As Integer, GLsizei levels,internalformat as integer, iWidth As Integer, iHeight As Integer, iDepth as integer)
' Public Extern glDrawTransformFeedbackInstanced(Mode As Integer, id as integer, GLsizei instancecount)
' Public Extern glDrawTransformFeedbackStreamInstanced(Mode As Integer, id as integer, GLuint stream, GLsizei instancecount)

' Public Extern glClearBufferData(iTarget As Integer,internalformat as integer, iFormat as integer, iType As Integer, data as byte[])
' Public Extern glClearBufferSubData(iTarget As Integer,internalformat as integer, offset as integer, size as integer, iFormat as integer, iType As Integer, data as byte[])
' Public Extern glDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z)
' Public Extern glDispatchComputeIndirect(GLintptr indirect)
' Public Extern glCopyImageSubData(GLuint srcName, as integer srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, as integer dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)
' Public Extern glFramebufferParameteri(iTarget As Integer, iPname As Integer, iParam As Integer)
' Public Extern glGetFramebufferParameteriv(iTarget As Integer, iPname As Integer, params as integer[])
' Public Extern glGetInternalformati64v(iTarget As Integer,internalformat as integer, iPname As Integer, BufSize As Integer, GLint64 * params)
' Public Extern glInvalidateTexSubImage(texture as Integer, iLevel as integer, xOffset as integer, yOffset as integer, zOffset as integer, iWidth As Integer, iHeight As Integer, iDepth as integer)
' Public Extern glInvalidateTexImage(texture as Integer, iLevel as integer)
' Public Extern glInvalidateBufferSubData(buffer as integer, offset as integer, GLsizeiptr length)
' Public Extern glInvalidateBufferData(buffer as integer)
' Public Extern glInvalidateFramebuffer(iTarget As Integer, n as IntegerumAttachments, const as integer * attachments)
' Public Extern glInvalidateSubFramebuffer(iTarget As Integer, n as IntegerumAttachments, const as integer * attachments, x As Integer, y As Integer, iWidth As Integer, iHeight As Integer)
' Public Extern glMultiDrawArraysIndirect(Mode As Integer, const * indirect, drawcount as integer, stride as integer)
' Public Extern glMultiDrawElementsIndirect(Mode As Integer, iType As Integer, const * indirect, drawcount as integer, stride as integer)
' Public Extern glGetProgramInterfaceiv(program As Integer, as integer programInterface, iPname As Integer, params as integer[])
' GLAPI GLuint APIENTRY glGetProgramResourceIndex(program As Integer, as integer programInterface, const name as string)
' Public Extern glGetProgramResourceName(program As Integer, as integer programInterface, iIndex As Integer, BufSize As Integer, legth as integer[], name as string)
' Public Extern glGetProgramResourceiv(program As Integer, as integer programInterface, iIndex As Integer, GLsizei propCount, const as integer * props, BufSize As Integer, legth as integer[], params as integer[])
' Public Extern Function glGetProgramResourceLocation(program As Integer, as integer programInterface, const name as string)
' Public Extern Function glGetProgramResourceLocationIndex(program As Integer, as integer programInterface, const name as string)
' Public Extern glShaderStorageBlockBinding(program As Integer, GLuint storageBlockIndex, GLuint storageBlockBinding)
' Public Extern glTexBufferRange(iTarget As Integer,internalformat as integer, buffer as integer, offset as integer, size as integer)
' Public Extern glTexStorage2DMultisample(iTarget As Integer, GLsizei samples,internalformat as integer, iWidth As Integer, iHeight As Integer, as byte fixedsamplelocations)
' Public Extern glTexStorage3DMultisample(iTarget As Integer, GLsizei samples,internalformat as integer, iWidth As Integer, iHeight As Integer, iDepth as integer, as byte fixedsamplelocations)
' Public Extern glTextureView(texture as Integer, iTarget As Integer, GLuint origtexture,internalformat as integer, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers)
' Public Extern glBindVertexBuffer(GLuint bindingindex, buffer as integer, offset as integer, stride as integer)
' Public Extern glVertexAttribFormat(GLuint attribindex, size as integer, iType As Integer, as byte normalized, GLuint relativeoffset)
' Public Extern glVertexAttribIFormat(GLuint attribindex, size as integer, iType As Integer, GLuint relativeoffset)
' Public Extern glVertexAttribLFormat(GLuint attribindex, size as integer, iType As Integer, GLuint relativeoffset)
' Public Extern glVertexAttribBinding(GLuint attribindex, GLuint bindingindex)
' Public Extern glVertexBindingDivisor(GLuint bindingindex, GLuint divisor)
' Public Extern glDebugMessageControl(as integer source, iType As Integer, as integer severity, iSize as Integer, ids as integer[], as byte enabled)
' Public Extern glDebugMessageInsert(as integer source, iType As Integer, id as integer, as integer severity, GLsizei length, const GLchar * buf)
' Public Extern glDebugMessageCallback(GLDEBUGPROC callback, const * userParam)
' GLAPI GLuint APIENTRY glGetDebugMessageLog(iCount As Integer, BufSize As Integer, as integer * sources, as integer * types, GLuint * ids, as integer * severities, legth as integer[]s, GLchar * messageLog)
' Public Extern glPushDebugGroup(as integer source, id as integer, GLsizei length, const GLchar * message)
' Public Extern glPopDebugGroup()
' Public Extern glObjectLabel(as integer identifier, GLuint name, GLsizei length, const GLchar * label)
' Public Extern glGetObjectLabel(as integer identifier, GLuint name, BufSize As Integer, legth as integer[], GLchar * label)
' Public Extern glObjectPtrLabel(const * ptr, GLsizei length, const GLchar * label)
' Public Extern glGetObjectPtrLabel(const * ptr, BufSize As Integer, legth as integer[], GLchar * label)

' Public Extern glBufferStorage(iTarget As Integer, size as integer, data as byte[], GLbitfield flags)
' Public Extern glClearTexImage(texture as Integer, iLevel as integer, iFormat as integer, iType As Integer, data as byte[])
' Public Extern glClearTexSubImage(texture as Integer, iLevel as integer, xOffset as integer, yOffset as integer, zOffset as integer, iWidth As Integer, iHeight As Integer, iDepth as integer, iFormat as integer, iType As Integer, data as byte[])
' Public Extern glBindBuffersBase(iTarget As Integer, GLuint first, iSize as Integer, const buffers as integer[])
' Public Extern glBindBuffersRange(iTarget As Integer, GLuint first, iSize as Integer, const buffers as integer[], const GLintptr * offsets, const GLsizeiptr * sizes)
' Public Extern glBindTextures(GLuint first, iSize as Integer, const GLuint * textures)
' Public Extern glBindSamplers(GLuint first, iSize as Integer, const GLuint * samplers)
' Public Extern glBindImageTextures(GLuint first, iSize as Integer, const GLuint * textures)
' Public Extern glBindVertexBuffers(GLuint first, iSize as Integer, const buffers as integer[], const GLintptr * offsets, const GLsizei * strides)

' Public Extern glClipControl(as integer origin, as integer depth)
' Public Extern glCreateTransformFeedbacks(n as Integer, GLuint * ids)
' Public Extern glTransformFeedbackBufferBase(GLuint xfb, iIndex As Integer, buffer as integer)
' Public Extern glTransformFeedbackBufferRange(GLuint xfb, iIndex As Integer, buffer as integer, offset as integer, size as integer)
' Public Extern glGetTransformFeedbackiv(GLuint xfb, iPname As Integer, GLint * param)
' Public Extern glGetTransformFeedbacki_v(GLuint xfb, iPname As Integer, iIndex As Integer, GLint * param)
' Public Extern glGetTransformFeedbacki64_v(GLuint xfb, iPname As Integer, iIndex As Integer, GLint64 * param)
' Public Extern glCreateBuffers(n as Integer, buffers as integer[])
' Public Extern glNamedBufferStorage(buffer as integer, size as integer, data as byte[], GLbitfield flags)
' Public Extern glNamedBufferData(buffer as integer, size as integer, data as byte[], as integer usage)
' Public Extern glNamedBufferSubData(buffer as integer, offset as integer, size as integer, data as byte[])
' Public Extern glCopyNamedBufferSubData(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, size as integer)
' Public Extern glClearNamedBufferData(buffer as integer,internalformat as integer, iFormat as integer, iType As Integer, data as byte[])
' Public Extern glClearNamedBufferSubData(buffer as integer,internalformat as integer, offset as integer, size as integer, iFormat as integer, iType As Integer, data as byte[])
' GLAPI * APIENTRY glMapNamedBuffer(buffer as integer, as integer access)
' GLAPI * APIENTRY glMapNamedBufferRange(buffer as integer, offset as integer, GLsizeiptr length, GLbitfield access)
' GLAPI as byte APIENTRY glUnmapNamedBuffer(buffer as integer)
' Public Extern glFlushMappedNamedBufferRange(buffer as integer, offset as integer, GLsizeiptr length)
' Public Extern glGetNamedBufferParameteriv(buffer as integer, iPname As Integer, params as integer[])
' Public Extern glGetNamedBufferParameteri64v(buffer as integer, iPname As Integer, GLint64 * params)
' Public Extern glGetNamedBufferPointerv(buffer as integer, iPname As Integer, * * params)
' Public Extern glGetNamedBufferSubData(buffer as integer, offset as integer, size as integer, data as byte[])
' Public Extern glCreateFramebuffers(n as Integer, GLuint * framebuffers)
' Public Extern glNamedFramebufferRenderbuffer(GLuint framebuffer, as integer attachment, as integer renderbuffertarget, GLuint renderbuffer)
' Public Extern glNamedFramebufferParameteri(GLuint framebuffer, iPname As Integer, iParam As Integer)
' Public Extern glNamedFramebufferTexture(GLuint framebuffer, as integer attachment, texture as Integer, iLevel as integer)
' Public Extern glNamedFramebufferTextureLayer(GLuint framebuffer, as integer attachment, texture as Integer, iLevel as integer, GLint layer)
' Public Extern glNamedFramebufferDrawBuffer(GLuint framebuffer, iBuff as integer)
' Public Extern glNamedFramebufferDrawBuffers(GLuint framebuffer, n as Integer, const as integer * bufs)
' Public Extern glNamedFramebufferReadBuffer(GLuint framebuffer, as integer src)
' Public Extern glInvalidateNamedFramebufferData(GLuint framebuffer, n as IntegerumAttachments, const as integer * attachments)
' Public Extern glInvalidateNamedFramebufferSubData(GLuint framebuffer, n as IntegerumAttachments, const as integer * attachments, x As Integer, y As Integer, iWidth As Integer, iHeight As Integer)
' Public Extern glClearNamedFramebufferiv(GLuint framebuffer, iBuff as integerfer, GLint drawbuffer, value as integer[])
' Public Extern glClearNamedFramebufferuiv(GLuint framebuffer, iBuff as integerfer, GLint drawbuffer, const GLuint * value)
' Public Extern glClearNamedFramebufferfv(GLuint framebuffer, iBuff as integerfer, GLint drawbuffer, const GLsingle * value)
' Public Extern glClearNamedFramebufferfi(GLuint framebuffer, iBuff as integerfer, GLint drawbuffer, GLsingle depth, GLint stencil)
' Public Extern glBlitNamedFramebuffer(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GiMaskBitField as integer, as integer filter)
' GLAPI as integer APIENTRY glCheckNamedFramebufferStatus(GLuint framebuffer, iTarget As Integer)
' Public Extern glGetNamedFramebufferParameteriv(GLuint framebuffer, iPname As Integer, GLint * param)
' Public Extern glGetNamedFramebufferAttachmentParameteriv(GLuint framebuffer, as integer attachment, iPname As Integer, params as integer[])
' Public Extern glCreateRenderbuffers(n as Integer, GLuint * renderbuffers)
' Public Extern glNamedRenderbufferStorage(GLuint renderbuffer,internalformat as integer, iWidth As Integer, iHeight As Integer)
' Public Extern glNamedRenderbufferStorageMultisample(GLuint renderbuffer, GLsizei samples,internalformat as integer, iWidth As Integer, iHeight As Integer)
' Public Extern glGetNamedRenderbufferParameteriv(GLuint renderbuffer, iPname As Integer, params as integer[])
' Public Extern glCreateTextures(iTarget As Integer, n as Integer, GLuint * textures)
' Public Extern glTextureBuffer(texture as Integer,internalformat as integer, buffer as integer)
' Public Extern glTextureBufferRange(texture as Integer,internalformat as integer, buffer as integer, offset as integer, size as integer)
' Public Extern glTextureStorage1D(texture as Integer, GLsizei levels,internalformat as integer, iWidth As Integer)
' Public Extern glTextureStorage2D(texture as Integer, GLsizei levels,internalformat as integer, iWidth As Integer, iHeight As Integer)
' Public Extern glTextureStorage3D(texture as Integer, GLsizei levels,internalformat as integer, iWidth As Integer, iHeight As Integer, iDepth as integer)
' Public Extern glTextureStorage2DMultisample(texture as Integer, GLsizei samples,internalformat as integer, iWidth As Integer, iHeight As Integer, as byte fixedsamplelocations)
' Public Extern glTextureStorage3DMultisample(texture as Integer, GLsizei samples,internalformat as integer, iWidth As Integer, iHeight As Integer, iDepth as integer, as byte fixedsamplelocations)
' Public Extern glTextureSubImage1D(texture as Integer, iLevel as integer, xOffset as integer, iWidth As Integer, iFormat as integer, iType As Integer, pixels as byte[])
' Public Extern glTextureSubImage2D(texture as Integer, iLevel as integer, xOffset as integer, yOffset as integer, iWidth As Integer, iHeight As Integer, iFormat as integer, iType As Integer, pixels as byte[])
' Public Extern glTextureSubImage3D(texture as Integer, iLevel as integer, xOffset as integer, yOffset as integer, zOffset as integer, iWidth As Integer, iHeight As Integer, iDepth as integer, iFormat as integer, iType As Integer, pixels as byte[])
' Public Extern glCompressedTextureSubImage1D(texture as Integer, iLevel as integer, xOffset as integer, iWidth As Integer, iFormat as integer, imagesize as integer, data as byte[])
' Public Extern glCompressedTextureSubImage2D(texture as Integer, iLevel as integer, xOffset as integer, yOffset as integer, iWidth As Integer, iHeight As Integer, iFormat as integer, imagesize as integer, data as byte[])
' Public Extern glCompressedTextureSubImage3D(texture as Integer, iLevel as integer, xOffset as integer, yOffset as integer, zOffset as integer, iWidth As Integer, iHeight As Integer, iDepth as integer, iFormat as integer, imagesize as integer, data as byte[])
' Public Extern glCopyTextureSubImage1D(texture as Integer, iLevel as integer, xOffset as integer, x As Integer, y As Integer, iWidth As Integer)
' Public Extern glCopyTextureSubImage2D(texture as Integer, iLevel as integer, xOffset as integer, yOffset as integer, x As Integer, y As Integer, iWidth As Integer, iHeight As Integer)
' Public Extern glCopyTextureSubImage3D(texture as Integer, iLevel as integer, xOffset as integer, yOffset as integer, zOffset as integer, x As Integer, y As Integer, iWidth As Integer, iHeight As Integer)
' Public Extern glTextureParameterf(texture as Integer, iPname As Integer, fParam As single)
' Public Extern glTextureParameterfv(texture as Integer, iPname As Integer, const GLsingle * param)
' Public Extern glTextureParameteri(texture as Integer, iPname As Integer, iParam As Integer)
' Public Extern glTextureParameterIiv(texture as Integer, iPname As Integer, inxParams as integer[])
' Public Extern glTextureParameterIuiv(texture as Integer, iPname As Integer, const params as integer[])
' Public Extern glTextureParameteriv(texture as Integer, iPname As Integer, const GLint * param)
' Public Extern glGenerateTextureMipmap(texture as Integer)
' Public Extern glBindTextureUnit(GLuint unit, texture as Integer)
' Public Extern glGetTextureImage(texture as Integer, iLevel as integer, iFormat as integer, iType As Integer, BufSize As Integer, * pixels)
' Public Extern glGetCompressedTextureImage(texture as Integer, iLevel as integer, BufSize As Integer, * pixels)
' Public Extern glGetTextureLevelParameterfv(texture as Integer, iLevel as integer, iPname As Integer, params as single[])
' Public Extern glGetTextureLevelParameteriv(texture as Integer, iLevel as integer, iPname As Integer, params as integer[])
' Public Extern glGetTextureParameterfv(texture as Integer, iPname As Integer, params as single[])
' Public Extern glGetTextureParameterIiv(texture as Integer, iPname As Integer, params as integer[])
' Public Extern glGetTextureParameterIuiv(texture as Integer, iPname As Integer, params as integer[])
' Public Extern glGetTextureParameteriv(texture as Integer, iPname As Integer, params as integer[])
' Public Extern glCreateVertexArrays(n as Integer, GLuint * arrays)
' Public Extern glDisableVertexArrayAttrib(GLuint vaobj, iIndex As Integer)
' Public Extern glEnableVertexArrayAttrib(GLuint vaobj, iIndex As Integer)
' Public Extern glVertexArrayElementBuffer(GLuint vaobj, buffer as integer)
' Public Extern glVertexArrayVertexBuffer(GLuint vaobj, GLuint bindingindex, buffer as integer, offset as integer, stride as integer)
' Public Extern glVertexArrayVertexBuffers(GLuint vaobj, GLuint first, iSize as Integer, const buffers as integer[], const GLintptr * offsets, const GLsizei * strides)
' Public Extern glVertexArrayAttribBinding(GLuint vaobj, GLuint attribindex, GLuint bindingindex)
' Public Extern glVertexArrayAttribFormat(GLuint vaobj, GLuint attribindex, size as integer, iType As Integer, as byte normalized, GLuint relativeoffset)
' Public Extern glVertexArrayAttribIFormat(GLuint vaobj, GLuint attribindex, size as integer, iType As Integer, GLuint relativeoffset)
' Public Extern glVertexArrayAttribLFormat(GLuint vaobj, GLuint attribindex, size as integer, iType As Integer, GLuint relativeoffset)
' Public Extern glVertexArrayBindingDivisor(GLuint vaobj, GLuint bindingindex, GLuint divisor)
' Public Extern glGetVertexArrayiv(GLuint vaobj, iPname As Integer, GLint * param)
' Public Extern glGetVertexArrayIndexediv(GLuint vaobj, iIndex As Integer, iPname As Integer, GLint * param)
' Public Extern glGetVertexArrayIndexed64iv(GLuint vaobj, iIndex As Integer, iPname As Integer, GLint64 * param)
' Public Extern glCreateSamplers(n as Integer, GLuint * samplers)
' Public Extern glCreateProgramPipelines(n as Integer, GLuint * pipelines)
' Public Extern glCreateQueries(iTarget As Integer, n as Integer, GLuint * ids)
' Public Extern glGetQueryBufferObjecti64v(id as integer, buffer as integer, iPname As Integer, offset as integer)
' Public Extern glGetQueryBufferObjectiv(id as integer, buffer as integer, iPname As Integer, offset as integer)
' Public Extern glGetQueryBufferObjectui64v(id as integer, buffer as integer, iPname As Integer, offset as integer)
' Public Extern glGetQueryBufferObjectuiv(id as integer, buffer as integer, iPname As Integer, offset as integer)
' Public Extern glMemoryBarrierByRegion(GLbitfield barriers)
' Public Extern glGetTextureSubImage(texture as Integer, iLevel as integer, xOffset as integer, yOffset as integer, zOffset as integer, iWidth As Integer, iHeight As Integer, iDepth as integer, iFormat as integer, iType As Integer, BufSize As Integer, * pixels)
' Public Extern glGetCompressedTextureSubImage(texture as Integer, iLevel as integer, xOffset as integer, yOffset as integer, zOffset as integer, iWidth As Integer, iHeight As Integer, iDepth as integer, BufSize As Integer, * pixels)
' GLAPI as integer APIENTRY glGetGraphicsResetStatus()
' Public Extern glGetnCompressedTexImage(iTarget As Integer, GLint lod, BufSize As Integer, * pixels)
' Public Extern glGetnTexImage(iTarget As Integer, iLevel as integer, iFormat as integer, iType As Integer, BufSize As Integer, * pixels)
' Public Extern glGetnUniformdv(program As Integer, location as Integer, BufSize As Integer, as float * params)
' Public Extern glGetnUniformfv(program As Integer, location as Integer, BufSize As Integer, params as single[])
' Public Extern glGetnUniformiv(program As Integer, location as Integer, BufSize As Integer, params as integer[])
' Public Extern glGetnUniformuiv(program As Integer, location as Integer, BufSize As Integer, params as integer[])
' Public Extern glReadnPixels(x As Integer, y As Integer, iWidth As Integer, iHeight As Integer, iFormat as integer, iType As Integer, BufSize As Integer, data as byte[])
' Public Extern glTextureBarrier()

' Publicshader As IntegercializeShader(GLuint shader, const GLchar * pEntryPoint, GLuint numSpecializationConstants, const GLuint * pConstantIndex, const GLuint * pConstantValue)
' Public Extern glMultiDrawArraysIndirectCount(Mode As Integer, const * indirect, GLintptr drawcount, GLsizei maxdrawcount, stride as integer)
' Public Extern glMultiDrawElementsIndirectCount(Mode As Integer, iType As Integer, const * indirect, GLintptr drawcount, GLsizei maxdrawcount, stride as integer)
' Public Extern glPolygonOffsetClamp(GLsingle factor, GLsingle units, GLsingle clamp)
' Public Const GL_ARB_ES3_2_compatibility 1
' Public Const GL_PRIMITIVE_BOUNDING_BOX_ARB As Integer = &H92BE
' Public Const GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB As Integer = &H9381
' Public Const GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB As Integer = &H9382
' Public Extern glPrimitiveBoundingBoxARB(GLsingle minX, GLsingle minY, GLsingle minZ, GLsingle minW, GLsingle maxX, GLsingle maxY, GLsingle maxZ, GLsingle maxW)
' GLAPI GLuint64 APIENTRY glGetTextureHandleARB(texture as Integer)
' GLAPI GLuint64 APIENTRY glGetTextureSamplerHandleARB(texture as Integer, GLuint sampler)
' Public Extern glMakeTextureHandleResidentARB(GLuint64 handle)
' Public Extern glMakeTextureHandleNonResidentARB(GLuint64 handle)
' GLAPI GLuint64 APIENTRY glGetImageHandleARB(texture as Integer, iLevel as integer, as byte layered, GLint layer, iFormat as integer)
' Public Extern glMakeImageHandleResidentARB(GLuint64 handle, as integer access)
' Public Extern glMakeImageHandleNonResidentARB(GLuint64 handle)
' Public Extern glUniformHandleui64ARB(location as Integer, GLuint64 value)
' Public Extern glUniformHandleui64vARB(location as Integer, iSize as Integer, const GLuint64 * value)
' Public Extern glProgramUniformHandleui64ARB(program As Integer, location as Integer, GLuint64 value)
' Public Extern glProgramUniformHandleui64vARB(program As Integer, location as Integer, iSize as Integer, const GLuint64 * values)
' GLAPI as byte APIENTRY glIsTextureHandleResidentARB(GLuint64 handle)
' GLAPI as byte APIENTRY glIsImageHandleResidentARB(GLuint64 handle)
' Public Extern glVertexAttribL1ui64ARB(iIndex As Integer, GLuint64EXT x)
' Public Extern glVertexAttribL1ui64vARB(iIndex As Integer, const GLuint64EXT * v)
' Public Extern glGetVertexAttribLui64vARB(iIndex As Integer, iPname As Integer, GLuint64EXT * params)
' Public Const GL_ARB_cl_event 1
' Struct _cl_context
' Struct _cl_event
' Public Const GL_SYNC_CL_EVENT_ARB As Integer = &H8240
' Public Const GL_SYNC_CL_EVENT_COMPLETE_ARB As Integer = &H8241
'
' GLAPI GLsync APIENTRY glCreateSyncFromCLeventARB(struct _cl_context * context, struct _cl_event * Event , GLbitfield flags)

' Public Extern glDispatchComputeGroupSizeARB(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z)
'
' Public Const GL_ARB_debug_output 1
' typedef(APIENTRY * GLDEBUGPROCARB)(as integer source, iType As Integer, id as integer, as integer severity, GLsizei length, const GLchar * message, const * userParam)

' Public Extern glDebugMessageControlARB(as integer source, iType As Integer, as integer severity, iSize as Integer, ids as integer[], as byte enabled)
' Public Extern glDebugMessageInsertARB(as integer source, iType As Integer, id as integer, as integer severity, GLsizei length, const GLchar * buf)
' Public Extern glDebugMessageCallbackARB(GLDEBUGPROCARB callback, const * userParam)
' GLAPI GLuint APIENTRY glGetDebugMessageLogARB(iCount As Integer, BufSize As Integer, as integer * sources, as integer * types, GLuint * ids, as integer * severities, legth as integer[]s, GLchar * messageLog)
'
' Public Const GL_ARB_draw_buffers_blend 1
'
' Public Extern glBlendEquationiARB(GLuint buf, Mode As Integer)
' Public Extern glBlendEquationSeparateiARB(GLuint buf, Mode As IntegerRGB, Mode As IntegerAlpha)
' Public Extern glBlendFunciARB(GLuint buf, as integer src, as integer dst)
' Public Extern glBlendFuncSeparateiARB(GLuint buf, as integer srcRGB, as integer dstRGB, as integer srcAlpha, as integer dstAlpha)
'
' Public Const GL_ARB_draw_instanced 1
'
' Public Extern glDrawArraysInstancedARB(Mode As Integer, first as integer, iSize as Integer, GLsizei primcount)
' Public Extern glDrawElementsInstancedARB(Mode As Integer, iSize as Integer, iType As Integer, const * indices, GLsizei primcount)
'

' Public Extern glProgramParameteriARB(program As Integer, iPname As Integer, GLint value)
' Public Extern glFramebufferTextureARB(iTarget As Integer, as integer attachment, texture as Integer, iLevel as integer)
' Public Extern glFramebufferTextureLayerARB(iTarget As Integer, as integer attachment, texture as Integer, iLevel as integer, GLint layer)
' Public Extern glFramebufferTextureFaceARB(iTarget As Integer, as integer attachment, texture as Integer, iLevel as integer, face As Integer)
'
' Public Const GL_ARB_gl_spirv 1
' Public Const GL_SHADER_BINARY_FORMAT_SPIR_V_ARB As Integer = &H9551
' Public Const GL_SPIR_V_BINARY_ARB As Integer = &H9552
'
' Public Extern glSpecializeShadshader As Integershader, const GLchar * pEntryPoint, GLuint numSpecializationConstants, const GLuint * pConstantIndex, const GLuint * pConstantValue)
'

' Public Extern glUniform1i64ARB(location as Integer, GLint64 x)
' Public Extern glUniform2i64ARB(location as Integer, GLint64 x, GLint64 y)
' Public Extern glUniform3i64ARB(location as Integer, GLint64 x, GLint64 y, GLint64 z)
' Public Extern glUniform4i64ARB(location as Integer, GLint64 x, GLint64 y, GLint64 z, GLint64 w)
' Public Extern glUniform1i64vARB(location as Integer, iSize as Integer, const GLint64 * value)
' Public Extern glUniform2i64vARB(location as Integer, iSize as Integer, const GLint64 * value)
' Public Extern glUniform3i64vARB(location as Integer, iSize as Integer, const GLint64 * value)
' Public Extern glUniform4i64vARB(location as Integer, iSize as Integer, const GLint64 * value)
' Public Extern glUniform1ui64ARB(location as Integer, GLuint64 x)
' Public Extern glUniform2ui64ARB(location as Integer, GLuint64 x, GLuint64 y)
' Public Extern glUniform3ui64ARB(location as Integer, GLuint64 x, GLuint64 y, GLuint64 z)
' Public Extern glUniform4ui64ARB(location as Integer, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w)
' Public Extern glUniform1ui64vARB(location as Integer, iSize as Integer, const GLuint64 * value)
' Public Extern glUniform2ui64vARB(location as Integer, iSize as Integer, const GLuint64 * value)
' Public Extern glUniform3ui64vARB(location as Integer, iSize as Integer, const GLuint64 * value)
' Public Extern glUniform4ui64vARB(location as Integer, iSize as Integer, const GLuint64 * value)
' Public Extern glGetUniformi64vARB(program As Integer, location as Integer, GLint64 * params)
' Public Extern glGetUniformui64vARB(program As Integer, location as Integer, GLuint64 * params)
' Public Extern glGetnUniformi64vARB(program As Integer, location as Integer, BufSize As Integer, GLint64 * params)
' Public Extern glGetnUniformui64vARB(program As Integer, location as Integer, BufSize As Integer, GLuint64 * params)
' Public Extern glProgramUniform1i64ARB(program As Integer, location as Integer, GLint64 x)
' Public Extern glProgramUniform2i64ARB(program As Integer, location as Integer, GLint64 x, GLint64 y)
' Public Extern glProgramUniform3i64ARB(program As Integer, location as Integer, GLint64 x, GLint64 y, GLint64 z)
' Public Extern glProgramUniform4i64ARB(program As Integer, location as Integer, GLint64 x, GLint64 y, GLint64 z, GLint64 w)
' Public Extern glProgramUniform1i64vARB(program As Integer, location as Integer, iSize as Integer, const GLint64 * value)
' Public Extern glProgramUniform2i64vARB(program As Integer, location as Integer, iSize as Integer, const GLint64 * value)
' Public Extern glProgramUniform3i64vARB(program As Integer, location as Integer, iSize as Integer, const GLint64 * value)
' Public Extern glProgramUniform4i64vARB(program As Integer, location as Integer, iSize as Integer, const GLint64 * value)
' Public Extern glProgramUniform1ui64ARB(program As Integer, location as Integer, GLuint64 x)
' Public Extern glProgramUniform2ui64ARB(program As Integer, location as Integer, GLuint64 x, GLuint64 y)
' Public Extern glProgramUniform3ui64ARB(program As Integer, location as Integer, GLuint64 x, GLuint64 y, GLuint64 z)
' Public Extern glProgramUniform4ui64ARB(program As Integer, location as Integer, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w)
' Public Extern glProgramUniform1ui64vARB(program As Integer, location as Integer, iSize as Integer, const GLuint64 * value)
' Public Extern glProgramUniform2ui64vARB(program As Integer, location as Integer, iSize as Integer, const GLuint64 * value)
' Public Extern glProgramUniform3ui64vARB(program As Integer, location as Integer, iSize as Integer, const GLuint64 * value)
' Public Extern glProgramUniform4ui64vARB(program As Integer, location as Integer, iSize as Integer, const GLuint64 * value)
'
' Public Const GL_ARB_indirect_parameters 1
' Public Const GL_PARAMETER_BUFFER_ARB As Integer = &H80EE
' Public Const GL_PARAMETER_BUFFER_BINDING_ARB As Integer = &H80EF
'
' Public Extern glMultiDrawArraysIndirectCountARB(Mode As Integer, const * indirect, GLintptr drawcount, GLsizei maxdrawcount, stride as integer)
' Public Extern glMultiDrawElementsIndirectCountARB(Mode As Integer, iType As Integer, const * indirect, GLintptr drawcount, GLsizei maxdrawcount, stride as integer)
'
' Public Const GL_ARB_instanced_arrays 1
' Public Const GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB As Integer = &H88FE
'
' Public Extern glVertexAttribDivisorARB(iIndex As Integer, GLuint divisor)
'
' Public Const GL_ARB_internalformat_query2 1
' Public Const GL_SRGB_DECODE_ARB As Integer = &H8299
' Public Const GL_VIEW_CLASS_EAC_R11 As Integer = &H9383
' Public Const GL_VIEW_CLASS_EAC_RG11 As Integer = &H9384
' Public Const GL_VIEW_CLASS_ETC2_RGB As Integer = &H9385
' Public Const GL_VIEW_CLASS_ETC2_RGBA As Integer = &H9386
' Public Const GL_VIEW_CLASS_ETC2_EAC_RGBA As Integer = &H9387
' Public Const GL_VIEW_CLASS_ASTC_4x4_RGBA As Integer = &H9388
' Public Const GL_VIEW_CLASS_ASTC_5x4_RGBA As Integer = &H9389
' Public Const GL_VIEW_CLASS_ASTC_5x5_RGBA As Integer = &H938A
' Public Const GL_VIEW_CLASS_ASTC_6x5_RGBA As Integer = &H938B
' Public Const GL_VIEW_CLASS_ASTC_6x6_RGBA As Integer = &H938C
' Public Const GL_VIEW_CLASS_ASTC_8x5_RGBA As Integer = &H938D
' Public Const GL_VIEW_CLASS_ASTC_8x6_RGBA As Integer = &H938E
' Public Const GL_VIEW_CLASS_ASTC_8x8_RGBA As Integer = &H938F
' Public Const GL_VIEW_CLASS_ASTC_1 As Integer = & H5_RGBA As Integer = &H9390
' Public Const GL_VIEW_CLASS_ASTC_1 As Integer = & H6_RGBA As Integer = &H9391
' Public Const GL_VIEW_CLASS_ASTC_1 As Integer = & H8_RGBA As Integer = &H9392
' Public Const GL_VIEW_CLASS_ASTC_1 As Integer = & H10_RGBA As Integer = &H9393
' Public Const GL_VIEW_CLASS_ASTC_12x10_RGBA As Integer = &H9394
' Public Const GL_VIEW_CLASS_ASTC_12x12_RGBA As Integer = &H9395
'
' Public Const GL_ARB_parallel_shader_compile 1
' Public Const GL_MAX_SHADER_COMPILER_THREADS_ARB As Integer = &H91B0
' Public Const GL_COMPLETION_STATUS_ARB As Integer = &H91B1
' typedef(APIENTRYP PFNGLMAXSHADERCOMPILERTHREADSARBPROC)(iCount As Integer)
'
' Public Extern glMaxShaderCompilerThreadsARB(iCount As Integer)
'
' Public Const GL_ARB_pipeline_statistics_query 1
' Public Const GL_VERTICES_SUBMITTED_ARB As Integer = &H82EE
' Public Const GL_PRIMITIVES_SUBMITTED_ARB As Integer = &H82EF
' Public Const GL_VERTEX_SHADER_INVOCATIONS_ARB As Integer = &H82F0
' Public Const GL_TESS_CONTROL_SHADER_PATCHES_ARB As Integer = &H82F1
' Public Const GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB As Integer = &H82F2
' Public Const GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB As Integer = &H82F3
' Public Const GL_FRAGMENT_SHADER_INVOCATIONS_ARB As Integer = &H82F4
' Public Const GL_COMPUTE_SHADER_INVOCATIONS_ARB As Integer = &H82F5
' Public Const GL_CLIPPING_INPUT_PRIMITIVES_ARB As Integer = &H82F6
' Public Const GL_CLIPPING_OUTPUT_PRIMITIVES_ARB As Integer = &H82F7
'
' Public Const GL_ARB_pixel_buffer_object 1
' Public Const GL_PIXEL_PACK_BUFFER_ARB As Integer = &H88EB
' Public Const GL_PIXEL_UNPACK_BUFFER_ARB As Integer = &H88EC
' Public Const GL_PIXEL_PACK_BUFFER_BINDING_ARB As Integer = &H88ED
' Public Const GL_PIXEL_UNPACK_BUFFER_BINDING_ARB As Integer = &H88EF
'
' Public Const GL_ARB_robustness 1
' Public Const GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB As Integer = &H00000004
' Public Const GL_LOSE_CONTEXT_ON_RESET_ARB As Integer = &H8252
' Public Const GL_GUILTY_CONTEXT_RESET_ARB As Integer = &H8253
' Public Const GL_INNOCENT_CONTEXT_RESET_ARB As Integer = &H8254
' Public Const GL_UNKNOWN_CONTEXT_RESET_ARB As Integer = &H8255
' Public Const GL_RESET_NOTIFICATION_STRATEGY_ARB As Integer = &H8256
' Public Const GL_NO_RESET_NOTIFICATION_ARB As Integer = &H8261
'
' GLAPI as integer APIENTRY glGetGraphicsResetStatusARB()
' Public Extern glGetnTexImageARB(iTarget As Integer, iLevel as integer, iFormat as integer, iType As Integer, BufSize As Integer, * img)
' Public Extern glReadnPixelsARB(x As Integer, y As Integer, iWidth As Integer, iHeight As Integer, iFormat as integer, iType As Integer, BufSize As Integer, data as byte[])
' Public Extern glGetnCompressedTexImageARB(iTarget As Integer, GLint lod, BufSize As Integer, * img)
' Public Extern glGetnUniformfvARB(program As Integer, location as Integer, BufSize As Integer, params as single[])
' Public Extern glGetnUniformivARB(program As Integer, location as Integer, BufSize As Integer, params as integer[])
' Public Extern glGetnUniformuivARB(program As Integer, location as Integer, BufSize As Integer, params as integer[])
' Public Extern glGetnUniformdvARB(program As Integer, location as Integer, BufSize As Integer, as float * params)
'
' Public Const GL_ARB_sample_locations 1
' Public Const GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB As Integer = &H933D
' Public Const GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB As Integer = &H933E
' Public Const GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB As Integer = &H933F
' Public Const GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB As Integer = &H9340
' Public Const GL_SAMPLE_LOCATION_ARB As Integer = &H8E50
' Public Const GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB As Integer = &H9341
' Public Const GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB As Integer = &H9342
' Public Const GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB As Integer = &H9343
'
' Public Extern glFramebufferSampleLocationsfvARB(iTarget As Integer, start as integer, iSize as Integer, const GLsingle * v)
' Public Extern glNamedFramebufferSampleLocationsfvARB(GLuint framebuffer, start as integer, iSize as Integer, const GLsingle * v)
' Public Extern glEvaluateDepthValuesARB()
'
' Public Const GL_ARB_sample_shading 1
' Public Const GL_SAMPLE_SHADING_ARB As Integer = &H8C36
' Public Const GL_MIN_SAMPLE_SHADING_VALUE_ARB As Integer = &H8C37
'
' Public Extern glMinSampleShadingARB(value as single)
'
' Public Const GL_ARB_shading_language_include 1
' Public Const GL_SHADER_INCLUDE_ARB As Integer = &H8DAE
' Public Const GL_NAMED_STRING_LENGTH_ARB As Integer = &H8DE9
' Public Const GL_NAMED_STRING_TYPE_ARB As Integer = &H8DEA
'
' Public Extern glNamedStringARB(iType As Integer, GLint namelen, const name as string, GLint stringlen, const GLchar * string)
' Public Extern glDeleteNamedStringARB(GLint namelen, const name as string)
' Public Extern glCompileShaderIncludeARB(GLuint shader, iSize as Integer, const GLchar * const * path, const GLinshader As Integer
' GLAPI as byte APIENTRY glIsNamedStringARB(GLint namelen, const name as string)
' Public Extern glGetNamedStringARB(GLint namelen, const name as string, BufSize As Integer, GLint * stringlen, GLchar * string)
' Public Extern glGetNamedStringivARB(GLint namelen, const name as string, iPname As Integer, params as integer[])
'
' Public Const GL_ARB_shading_language_packing 1
'
' Public Const GL_ARB_sparse_buffer 1
' Public Const GL_SPARSE_STORAGE_BIT_ARB As Integer = &H0400
' Public Const GL_SPARSE_BUFFER_PAGE_SIZE_ARB As Integer = &H82F8
'
' Public Extern glBufferPageCommitmentARB(iTarget As Integer, offset as integer, size as integer, as byte commit)
' Public Extern glNamedBufferPageCommitmentEXT(buffer as integer, offset as integer, size as integer, as byte commit)
' Public Extern glNamedBufferPageCommitmentARB(buffer as integer, offset as integer, size as integer, as byte commit)
'
' Public Const GL_ARB_sparse_texture 1
' Public Const GL_TEXTURE_SPARSE_ARB As Integer = &H91A6
' Public Const GL_VIRTUAL_PAGE_SIZE_INDEX_ARB As Integer = &H91A7
' Public Const GL_NUM_SPARSE_LEVELS_ARB As Integer = &H91AA
' Public Const GL_NUM_VIRTUAL_PAGE_SIZES_ARB As Integer = &H91A8
' Public Const GL_VIRTUAL_PAGE_SIZE_X_ARB As Integer = &H9195
' Public Const GL_VIRTUAL_PAGE_SIZE_Y_ARB As Integer = &H9196
' Public Const GL_VIRTUAL_PAGE_SIZE_Z_ARB As Integer = &H9197
' Public Const GL_MAX_SPARSE_TEXTURE_SIZE_ARB As Integer = &H9198
' Public Const GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB As Integer = &H9199
' Public Const GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB As Integer = &H919A
' Public Const GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB As Integer = &H91A9
'
' Public Extern glTexPageCommitmentARB(iTarget As Integer, iLevel as integer, xOffset as integer, yOffset as integer, zOffset as integer, iWidth As Integer, iHeight As Integer, iDepth as integer, as byte commit)
' Public Const GL_ARB_sparse_texture2 1
' Public Const GL_ARB_sparse_texture_clamp 1
' Public Const GL_ARB_spirv_extensions 1
' Public Const GL_ARB_stencil_texturing 1
' Public Const GL_ARB_sync 1
' Public Const GL_ARB_tessellation_shader 1
' Public Const GL_ARB_texture_barrier 1
' Public Const GL_ARB_texture_border_clamp 1
' Public Const GL_CLAMP_TO_BORDER_ARB As Integer = &H812D
' Public Const GL_ARB_texture_buffer_object 1
' Public Const GL_TEXTURE_BUFFER_ARB As Integer = &H8C2A
' Public Const GL_MAX_TEXTURE_BUFFER_SIZE_ARB As Integer = &H8C2B
' Public Const GL_TEXTURE_BINDING_BUFFER_ARB As Integer = &H8C2C
' Public Const GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB As Integer = &H8C2D
' Public Const GL_TEXTURE_BUFFER_FORMAT_ARB As Integer = &H8C2E
' typedef(APIENTRYP PFNGLTEXBUFFERARBPROC)(iTarget As Integer,internalformat as integer, buffer as integer)
' Public Extern glTexBufferARB(iTarget As Integer,internalformat as integer, buffer as integer)
' Public Const GL_ARB_texture_buffer_object_rgb32 1
' Public Const GL_ARB_texture_buffer_range 1
' Public Const GL_ARB_texture_compression_bptc 1
' Public Const GL_COMPRESSED_RGBA_BPTC_UNORM_ARB As Integer = &H8E8C
' Public Const GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB As Integer = &H8E8D
' Public Const GL_COMPRESSED_RGB_BPTC_SIGNED_single_ARB As Integer = &H8E8E
' Public Const GL_COMPRESSED_RGB_BPTC_UNSIGNED_single_ARB As Integer = &H8E8F
' Public Const GL_ARB_texture_compression_rgtc 1
' Public Const GL_ARB_texture_cube_map_array 1
' Public Const GL_TEXTURE_CUBE_MAP_ARRAY_ARB As Integer = &H9009
' Public Const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB As Integer = &H900A
' Public Const GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB As Integer = &H900B
' Public Const GL_SAMPLER_CUBE_MAP_ARRAY_ARB As Integer = &H900C
' Public Const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB As Integer = &H900D
' Public Const GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB As Integer = &H900E
' Public Const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB As Integer = &H900F
' Public Const GL_ARB_texture_filter_anisotropic 1
'
' Public Const GL_ARB_texture_filter_minmax 1
' Public Const GL_TEXTURE_REDUCTION_MODE_ARB As Integer = &H9366
' Public Const GL_WEIGHTED_AVERAGE_ARB As Integer = &H9367
'
' Public Const GL_ARB_texture_gather 1
' Public Const GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB As Integer = &H8E5E
' Public Const GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB As Integer = &H8E5F
' Public Const GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB As Integer = &H8F9F
'
' Public Const GL_ARB_transform_feedback_overflow_query 1
' Public Const GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB As Integer = &H82EC
' Public Const GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB As Integer = &H82ED

' ==============OTROS QUE NO ESTABAN (probablemente deprecados)=============================

Public Extern glEnableClientState(capacIdad As Integer)
Public Extern glDisableClientState(capacIdad As Integer)
Public Extern glVertexPointer(size As Integer, type As Integer, strIde As Long, data As Pointer)
Public Extern glNormalPointer(type As Integer, strIde As Long, data As Pointer)
Public Extern glColorPointer(size As Integer, type As Integer, strIde As Long, data As Pointer)

'' Clears the VBO from memory
'' Clears the VBO from memory
Public Sub VBOFlushAll()

    VBO_vertex.Clear
    VBO_colors.Clear
    VBO_normals.Clear
    VBO_pixels.Clear

    VBO_vertex = New Single[][]
    VBO_colors = New Single[][]
    VBO_normals = New Single[][]
    VBO_pixels = New Single[][]

End

'' Clears the VBO from memory
Public Sub VBOFlush(Id As Integer)

    VBO_vertex[id].Clear
    VBO_colors[id].Clear
    VBO_normals[id].Clear
    VBO_pixels[id].Clear

End

Public Sub Resize(drwContext As Object) ' only glArea for now

    ' establecemos adonde vamos a dibujar, porque puede ser en algun lugar mas chico de la misma glDrawingArea
    ' pero en general sera en todo el control
    ' 2022 la siguiente linea parece estar deprecada, pongo cualquiera o simplemente la comento y funciona igual
    'gl.Viewport(100, 100, drwContext.W / 2, drwContext.h / 2)

    If Not Me.Initialized Then Return  'Me.Init(drwContext)
    '    Debug "New GL Sheet Init:", drwContext.w, drwContext.H
    ' le avisamos a GL que queremos usar texturas
    gl.Enable(gl.TEXTURE_2D)

    ' borramos lo que haya dibujado
    gl.Clear(gl.DEPTH_BUFFER_BIT Or gl.COLOR_BUFFER_BIT)

    ' le decimos que queremos usar cosas 3D y lo que esta mas lejos quede tapado por lo que esta mas cerca, esto en 2D no es necesario
    gl.Enable(gl.DEPTH_TEST)

    ' no tengo idea, debe ser algo de AntiAlias
    gl.Enable(gl.SMOOTH)
    gl.Enable(gl.BLEND)
    gl.BlendFunc(GL.SRC_ALPHA, GL.ONE_MINUS_SRC_ALPHA)
    ' usaremos luces
    ' Gl.Enable(Gl.LIGHTING)
    ' Gl.Enable(Gl.LIGHT0)
    ' esto le dice que las normales las tiene que normalizar a 1
    Gl.Enable(Gl.NORMALIZE)

    ' las coordenadas que le pasemos deberan estar entre -1 y 1
    ' todo lo que sea > 1 NO SE MOSTRARA

    gl.MatrixMode(gl.PROJECTION)
    gl.LoadIdentity
    'Glu.Ortho2D(-drwContext.w / 2, drwContext.w / 2, -drwContext.h / 2, drwContext.h / 2)
    Gl.Ortho(-drwContext.w / 2, drwContext.w / 2, -drwContext.h / 2, drwContext.h / 2, 1, -1)

    gl.MatrixMode(gl.MODELVIEW)
    gl.LoadIdentity

End

Public Sub Init(drwContext As Object) ' only glArea for now

    'Resize(drwContext)
    Debug "Init OpenGL"

    Dim gbcolor As Integer
    Dim r, g, b, a As Float

    gbcolor = drwContext.background

    a = 1 - Color.GetAlpha(gbColor) / 255
    r = (Shr(gbColor, 16) And 255) / 255
    g = (Shr(gbColor, 8) And 255) / 255
    b = (gbColor And 255) / 255

    gl.ClearColor(r, g, b, a)

    ' line stipples

    Me.glFlush()
    Debug "libGL access: ok"
    Debug "Support VBO: " & gl.CheckExtensions("GL_ARB_vertex_buffer_object")
    Debug "Support GLSL: " & gl.CheckExtensions("GL_ARB_vertex_program")
    Debug "Shading version: " & GL.GetString(gl.SHADING_LANGUAGE_VERSION)
    Debug "GL version: " & GL.GetString(gl.VERSION)
    Debug "Chipset vendor: " & GL.GetString(gl.VENDOR)
    'gcd.debuginfo("Extensions" &  GL.GetString(gl.EXTENSIONS))
    Me.Initialized = True

End
'' Dibuja un rectangulo, relleno o vacio.
'' Puede dibujar un contorno del mismo de otro color->Bounding
'' Mode: 0=relleno, 1=relleno y recuadro, 2=solo recuadro

Public Sub Rectangle2D(x1 As Float, y1 As Float, w As Float, h As Float, Optional colour1 As Integer = Color.Blue, colour2 As Integer = -14, colour3 As Integer = -14, colour4 As Integer = -14, BoundingColor As Integer = Color.Blue, BoundingWIdth As Integer = 1, Dashes As Float[] = [], mode As Integer = 0)

    Dim c2, c3, c4 As Integer
    Dim flxVertex As New Float[]
    ' Quad esta obsoleto , reemplazo por dos triangulos
    If mode = 0 Or mode = 1 Then

        If colour2 = -14 Then c2 = colour1 Else c2 = colour2
        If colour3 = -14 Then c3 = colour1 Else c3 = colour3
        If colour4 = -14 Then c4 = colour1 Else c4 = colour4

        gl.begin(gl.TRIANGLES)

        Vertex2D(x1, y1, colour1)
        Vertex2D(x1 + w, y1, c2)
        Vertex2D(x1 + w, y1 + h, c3)

        Vertex2D(x1, y1, colour1)
        Vertex2D(x1 + w, y1 + h, c4)
        Vertex2D(x1, y1 + h, c3)

        gl.end

    End If

    If mode >= 1 Then                                      ' solo recuadro

        PolyLines([x1, y1, x1 + w, y1, x1 + w, y1 + h, x1, y1 + h, x1, y1], BoundingColor, BoundingWIdth, dashes)

    End If

End

'' Dibuja un rombo, relleno o vacio.
'' Puede dibujar un contorno del mismo de otro color->Bounding
'' Mode: 0=relleno, 1=relleno y recuadro, 2=solo recuadro
Public Sub Rombo2D(x1 As Float, y1 As Float, side As Float, Optional ColorLeft As Integer = Color.Blue, ColorRigth As Integer = Color.Blue, iDirection As Integer = 0, BoundingColor As Integer = Color.Blue, BoundingWIdth As Integer = 1, mode As Integer = 0, Rotation As Float = 0)

    Dim flxVertex As New Float[]
    ' Quad esta obsoleto , reemplazo por dos triangulos
    side /= 2
    If mode = 0 Or mode = 1 Then

        gl.begin(gl.TRIANGLES)

        Vertex2D(x1 - side, y1, ColorLeft)
        Vertex2D(x1, y1 + side, ColorLeft)
        Vertex2D(x1, y1 - side, ColorLeft)

        Vertex2D(x1 + side, y1, ColorRigth)
        Vertex2D(x1, y1 + side, ColorRigth)
        Vertex2D(x1, y1 - side, ColorRigth)

        gl.end

    End If

    If mode >= 1 Then                                      ' solo recuadro

        PolyLines([x1 - side, y1, x1, y1 + side, x1 + side, y1, x1, y1 - side, x1 - side, y1], BoundingColor)

    End If

End

'' Dibuja un serie de lineas
Fast Unsafe Public Function DrawLines(fVertices As Float[], Optional colour As Integer = 0, LineWIdth As Float = 1, dashes As Float[] = [])

    Dim i As Integer
    Dim r As Float, g As Float, b As Float
    Dim Vertices As Float[]

    'If gbcolor > 0 Then Stop
    r = (Shr(Colour, 16) And 255) / 256
    g = (Shr(Colour, 8) And 255) / 256
    b = (Colour And 255) / 256

    If fvertices.Count < 2 Then Return

    If InmediateMode Then

        gl.LineWIdth(LineWIdth) ' obsoleto en WebGL
        If dashes.Count > 0 Then
            Vertices = puntos.DashedLineStrip(fvertices, dashes, 1)
        Else

            Vertices = fvertices

        Endif

        gl.Begin(gl.Lines)
        gl.Color3f(r, g, b)
        For i = 0 To vertices.Max Step 2

            'glColorRGB(colour)
            gl.Vertex2f(vertices[i], vertices[i + 1])

        Next
        gl.end

    Else ' we as writing to an array
        For i = 0 To vertices.Max Step 2
            VBO_vertex[VBO_Id].Add(vertices[i])         'X
            VBO_vertex[VBO_Id].Add(vertices[i + 1])     'Y
            VBO_vertex[VBO_Id].Add(0)                   'Z

            VBO_colors[VBO_Id].Add(r)                    'R
            VBO_colors[VBO_Id].Add(g)                    'G
            VBO_colors[VBO_Id].Add(b)                    'B

            VBO_normals[VBO_Id].Add(0)                    'Normales apuntan al user
            VBO_normals[VBO_Id].Add(0)                    '
            VBO_normals[VBO_Id].Add(1)                    '

        Next

    End If

End

'' Dibuja un seria de polilinea
Fast Unsafe Public Function PolygonFilled(vertices As Float[], Optional colour As Integer = 0, FillColor As Integer = 0, LineWIdth As Float = 1, dashes As Float[])

    Dim i As Integer

    'glColorRGB(colour)
    gl.LineWIdth(LineWIdth) ' obsoleto en WebGL

    If dashes Then
        gl.LineStipple(LineStippleScales[dashes], LineStipples[dashes])
        gl.Enable(GL.LINE_STIPPLE)
    Else

        gl.Disable(GL.LINE_STIPPLE)

    Endif

    gl.Begin(gl.POLYGON)

    For i = 0 To vertices.Max Step 2
        glColorRGB(colour)
        gl.Vertex2f(vertices[i], vertices[i + 1])

    Next
    gl.end

End

'' Dibuja un seria de polilinea
Fast Unsafe Public Function Polygon(vertices As Float[], Optional colour As Integer = 0, LineWIdth As Float = 1, dashes As Float[])

    Dim i As Integer

    'glColorRGB(colour)
    gl.LineWIdth(LineWIdth) ' obsoleto en WebGL

    gl.Begin(gl.LINE_LOOP)

    For i = 0 To vertices.Max Step 2
        glColorRGB(colour)
        gl.Vertex2f(vertices[i], vertices[i + 1])

    Next
    gl.end

End
'' Dibuja un arco, suponiendo que el centro esta en 0,0 (despues de un Translate())
'' Siempre gira en sentido anti-horario
'' Las medidas de los angulo inicial y recorrido estan en RADIANES

Fast Unsafe Public Function ARC(radio As Float, start_angle As Float, length As Float, Optional tramos As Integer = 36, colour As Integer = 0, LineWIdth As Float = 1, dashes As Float[] = [])

    GL.Begin(gl.LINE_STRIP)
    Dim theta, angle_increment As Float

    'double max_angle = 2 * Math.PI
    'double angle_increment = Math.PI / 1000
    If tramos <= 0 Then tramos = 36
    If tramos > 360 Then tramos = 36

    angle_increment = Pi * 2 / tramos

    ' verifico los angulos
    ' If length < 0 Then angle_increment *= -1

    For theta = 0 To length Step angle_increment

        Vertex2D(radio * Cos(start_angle + theta), radio * Sin(start_angle + theta), colour)
    Next

    GL.End

End

Fast Unsafe Public Function ArcPoly(xCenter As Float, yCenter As Float, radio As Float, start_angle As Float, length As Float, Optional angle_increment As Float = Pi * 2 / 360) As Float[]

    Dim theta, x0, y0 As Float
    Dim flxPoly As New Float[]
    Dim i As Integer
    'double max_angle = 2 * Math.PI
    'double angle_increment = Math.PI / 1000
    'angle_increment = Pi * 2 / 360

    ' verifico los angulos
    ' If length < 0 Then angle_increment *= -1
    flxPoly.Resize(CInt(length / angle_increment) * 4)
    For theta = angle_increment To length Step angle_increment
        x0 = radio * Cos(start_angle + theta - angle_increment)
        y0 = radio * Sin(start_angle + theta - angle_increment)
        flxPoly[i] = x0 + xCenter
        Inc i
        flxPoly[i] = y0 + yCenter
        Inc i
        x0 = radio * Cos(start_angle + theta)
        y0 = radio * Sin(start_angle + theta)
        flxPoly[i] = x0 + xCenter
        Inc i
        flxPoly[i] = y0 + yCenter
        Inc i

    Next
    x0 = radio * Cos(start_angle + theta - angle_increment)
    y0 = radio * Sin(start_angle + theta - angle_increment)

    If flxPoly.Count = i Then
        flxPoly.Add(0)
        flxPoly.Add(0)
    Endif
    flxPoly[i] = x0 + xCenter
    Inc i
    flxPoly[i] = y0 + yCenter
    Inc i

    x0 = radio * Cos(start_angle + length)
    y0 = radio * Sin(start_angle + length)

    If flxPoly.Count = i Then
        flxPoly.Add(0)
        flxPoly.Add(0)
    Endif
    flxPoly[i] = x0 + xCenter
    Inc i
    flxPoly[i] = y0 + yCenter
    Inc i
    'If flxPoly.Count <> i Then Stop

    Return flxPoly

End

Fast Unsafe Public Function PolyLines(fVertices As Float[], Optional colour As Integer = 0, LineWIdth As Float = 1, dashes As Float[] = [])

    Dim i As Integer
    Dim vertices, vertices2 As Float[]
    Dim r As Float, g As Float, b As Float

    r = (Shr(Colour, 16) And 255) / 256
    g = (Shr(Colour, 8) And 255) / 256
    b = (Colour And 255) / 256

    If fvertices.Count < 2 Then Return
    gl.LineWIdth(LineWIdth) ' obsoleto en WebGL

    If dashes.count > 0 Then
        Vertices = puntos.DashedLineStrip(fvertices, dashes, 1)

        gl.Begin(gl.LINES)
        gl.Color3f(r, g, b)
        For i = 0 To vertices.Max Step 2
            '    glColorRGB(colour)
            gl.Vertex2f(vertices[i], vertices[i + 1])
        Next

    Else

        Vertices = fvertices
        gl.Begin(gl.LINE_STRIP)
        gl.Color3f(r, g, b)
        For i = 0 To vertices.Max Step 2
            'glColorRGB(colour)
            gl.Vertex2f(vertices[i], vertices[i + 1])
        Next

    End If

    gl.end

End

Fast Unsafe Public Function DrawTriangles(vertices As Float[], Optional colour As Integer = 0, FillColor As Integer = 0, LineWIdth As Float = 1, dashes As Float[] = [])

    Dim i As Integer

    'glColorRGB(colour)
    gl.LineWIdth(LineWIdth) ' obsoleto en WebGL

    If dashes.Count > 0 Then

        PolyLines(vertices, colour, linewIdth, dashes)

    Endif

    gl.Begin(gl.TRIANGLES)

    For i = 0 To vertices.Max Step 2
        glColorRGB(colour)
        gl.Vertex3f(vertices[i], vertices[i + 1], zLevel)

    Next
    gl.end

End

'' Dibuja un circulo

Public Function CIRCLE(center As Float[], radious As Float, Optional colour As Integer = 0, Filled As Boolean = False, LineWIdth As Float = 1, dashes As Float[] = [])

    Dim x, y, theta, angle_increment As Float
    Dim StepFactor As Integer = 2
    Dim vertices, fVertices As New Float[]

    gl.LineWIdth(LineWIdth) ' obsoleto en WebGL

    If filled Then
        GL.Begin(gl.POLYGON)
        angle_increment = Pi * 2 / 360  ' esto va de a un grado, que puede ser exagerado

        angle_increment *= StepFactor
        For theta = 0 To 2 * Pi Step angle_increment
            ' el punto considerando 0,0 al centro
            x = center[0] + radious * Cos(theta)
            y = center[1] + radious * Sin(theta)
            Vertex2D(x, y, Colour)
        Next
        gl.End
    Else

        angle_increment = Pi * 2 / 360  ' esto va de a un grado, que puede ser exagerado

        angle_increment *= StepFactor

        For theta = 0 To 2 * Pi Step angle_increment
            ' el punto considerando 0,0 al centro
            x = center[0] + radious * Cos(theta)
            y = center[1] + radious * Sin(theta)
            fvertices.Add(x)
            fvertices.Add(y)
        Next

        PolyLines(fVertices, colour, linewIdth, dashes)

    End If

End

Fast Unsafe Public Sub glColorRGB(gbColor As Integer)
    ' set the color to GL

    Dim r, g, b, a As Float

    a = 1 - Color.GetAlpha(gbColor) / 255
    r = (Shr(gbColor, 16) And 255) / 255
    g = (Shr(gbColor, 8) And 255) / 255
    b = (gbColor And 255) / 255
    gl.Color4f(r, g, b, a)

End

Fast Unsafe Public Function GetColorRGBA(gbColor As Integer) As Single[]
    ' set the color to GL

    Dim r, g, b, a As Float

    a = 1 - Color.GetAlpha(gbColor) / 255
    r = (Shr(gbColor, 16) And 255) / 255
    g = (Shr(gbColor, 8) And 255) / 255
    b = (gbColor And 255) / 255

    Return [r, g, b, a]

End

Public Sub ClearColor(iColor As Integer)

    Dim rgba As Single[]

    rgba = GetColorRGBA(iColor)
    gl.ClearColor(rgba[0], rgba[1], rgba[2], rgba[3])

End

Public Sub glMaterial(gbColor As Integer, Optional Alpha As Float = 0)
    ' set the color to GL

    Dim r As Float, g As Float, b As Float
    Dim MyColor As New Float[]

    'If gbcolor > 0 Then Stop
    r = (Shr(gbColor, 16) And 255) / 256
    g = (Shr(gbColor, 8) And 255) / 256
    b = (gbColor And 255) / 256
    MyColor = [r, g, b, Alpha]

    gl.Materialfv(gl.FRONT_AND_BACK, gl.AMBIENT_AND_DIFFUSE, MyColor)
    gl.Materialf(gl.FRONT_AND_BACK, gl.SHININESS, 45)

End

Public Sub glMaterialHierro(Optional Alpha As Float = 0)
    ' set the color to GL

    Dim r As Float, g As Float, b As Float
    Dim MyColor As New Float[]

    MyColor = [0.05375, 0.05, 0.06625, 1.0]

    gl.Materialfv(gl.FRONT_AND_BACK, gl.AMBIENT, MyColor)

    MyColor = [0.18275, 0.17, 0.22525]

    gl.Materialfv(gl.FRONT_AND_BACK, gl.DIFFUSE, MyColor)

    MyColor = [0.332741, 0.328634, 0.346435]

    gl.Materialfv(gl.FRONT_AND_BACK, gl.SPECULAR, MyColor)

    gl.Materialf(gl.FRONT_AND_BACK, gl.SHININESS, 0.3 * 128)

End

Public Sub glMaterialMadera(Optional Alpha As Float = 0)
    ' set the color to GL

    Dim r As Float, g As Float, b As Float
    Dim MyColor As New Float[]

    MyColor = [0.05, 0.05, 0.0, 1.0]

    gl.Materialfv(gl.FRONT_AND_BACK, gl.AMBIENT, MyColor)

    MyColor = [0.5, 0.5, 0.4]

    gl.Materialfv(gl.FRONT_AND_BACK, gl.DIFFUSE, MyColor)

    MyColor = [0.7, 0.7, 0.04]

    gl.Materialfv(gl.FRONT_AND_BACK, gl.SPECULAR, MyColor)

    gl.Materialf(gl.FRONT_AND_BACK, gl.SHININESS, 0.07815 * 128)

End

Public Sub glMaterialConcreto(Optional Alpha As Float = 0)
    ' set the color to GL

    Dim MyColor As New Float[]

    MyColor = [0.2, 0.2, 0.2, 1.0]

    gl.Materialfv(gl.FRONT_AND_BACK, gl.AMBIENT, MyColor)

    MyColor = [0.4, 0.4, 0.4]

    gl.Materialfv(gl.FRONT_AND_BACK, gl.DIFFUSE, MyColor)

    MyColor = [0.6, 0.6, 0.6]

    gl.Materialfv(gl.FRONT_AND_BACK, gl.SPECULAR, MyColor)

    gl.Materialf(gl.FRONT_AND_BACK, gl.SHININESS, 0.25 * 128)

End

Fast Unsafe Public Sub Vertex2D(x2d As Float, y2d As Float, Optional colour As Integer = Color.Red)
    '
    '
    '     '2020 el color va primero
    ' '

    If colour Then
        Me.glColorRGB(colour)

    Endif

    gl.Vertex2f(x2d, y2d)
    '

End

Fast Unsafe Public Sub Vertex3D(p As Punto3d, Optional colour4F As GLColorSt)
    '
    '
    '     '2020 el color va primero
    '
    '     If colour4F Then
    '         gl.Color4f(colour4F.r, colour4F.g, colour4F.b, colour4F.Alpha)
    '
    '     Endif
    '     gl.Vertex3f(p.x, p.y, p.z)
    '

End
'

Public Sub Normal3D(p As Punto3d)
    '
    '     gl.Normal3f(p.x, p.y, p.z)
    ' '

End

Public Sub Get2DpointFrom3Dworld(p1 As Punto3d, ByRef x2 As Float, ByRef y2 As Float, Optional ByRef z2 As Float)

    Dim modelmatrix As New Float[16]
    Dim projMatrix As New Float[16]
    Dim miMatrix As New Float[16]

    Dim vp As New Integer[4]

    Dim p2 As New Float[3]

    modelMatrix = gl.GetFloatv(GL.MODELVIEW_MATRIX)
    projMatrix = gl.GetFloatv(GL.PROJECTION_MATRIX)
    vp = gl.GetIntegerv(GL.VIEWPORT_)

    p2 = glu.Project(p1.x, p1.y, p1.z, modelMatrix, projMatrix, vp)

    If IsNull(p2) Then Return

    x2 = p2[0]
    y2 = p2[1]

    ' z<=1  --> el punto esta frente a la camara
    ' z> 1  ---> el punto es invisible
    z2 = p2[2]

End

'' Trnasforma un punto de la pantalla en un punto del espacio, que en realidad es un rayo en 3D
'' que en 2D es perpendicular a la pantalla
Public Sub Get3DpointFromScreen(Xscreen As Integer, Yscreen As Integer) As Float[]

    Dim modelmatrix As New Float[16]
    Dim projMatrix As New Float[16]
    Dim miMatrix As New Float[16]

    Dim vp As New Integer[4]

    Dim p2 As New Float[3]

    modelMatrix = gl.GetFloatv(GL.MODELVIEW_MATRIX)
    projMatrix = gl.GetFloatv(GL.PROJECTION_MATRIX)
    vp = gl.GetIntegerv(GL.VIEWPORT_)

    p2 = glu.UnProject(Xscreen, Yscreen, 0, modelMatrix, projMatrix, vp)

    If IsNull(p2) Then Return

    ' p2[2]
    ' z<=1  --> el punto esta frente a la camara
    ' z> 1  ---> el punto es invisible

    ' test
    'Debug "Screen", Xscreen, Yscreen, " -> Real ", p2[0], p2[1]

    Return p2

End

'' Establece la fuente con que se dibujaran los textos
Public Function SelectFont(FontName As String) As Boolean

    If glFont.Exist(FontName) Then
        ActualFont = glFont[FontName]
        Return True ' fuente encontrada

    Endif

    Return False  ' fuente no encontrada

End

'' Lee todas las fuentes del directorio provisto y devuelve un listado con sus nombres
Public Function LoadFonts(DirPath As String) As String[]
    ' This class loads all fonts available at startup
    ' LibreCAD format fonts come in this fashion

    ' #Format: LibreCAD Font 1
    ' #Creator: LibreCAD
    ' #Version: master
    ' #Name: Roman Complex
    ' #Encoding: UTF - 8
    ' #LetterSpacing: 3
    ' #WordSpacing: 6.75
    ' #LineSpacingFactor: 1
    ' #Author: Hershey fonts
    ' #Author: Adam Radlowski < adamr@informatyka.gdansk.pl > (Polish)
    ' #License: Public domain
    '
    ' [0021]!
    ' 0.428572, 9; 0, 8.14286
    ' 0, 8.14286; 0.428572, 2.99999
    ' 0.428572, 2.99999; 0.857143, 8.14286
    ' 0.857143, 8.14286; 0.428572, 9
    ' 0.428572, 8.14286; 0.428572, 5.57144
    ' 0.428572, 0.857143; 0, 0.428572
    ' 0, 0.428572; 0.428572, 0
    ' 0.428572, 0; 0.857143, 0.428572
    ' 0.857143, 0.428572; 0.428572, 0.857143
    '
    ' [0022]""
    ' 0.428572, 6.00001; 0, 5.57144
    ' 0, 5.571

    ' - Is there any documentation about the LFF file format?
    ' I coped this from a mail:
    '
    ' Attached a proposal of new fonts, and below a explanation:
    '
    ' [0041] A
    ' 0.0000,0.0000;3.0000,9.0000;6.0000,9.000          <---CADA LINEA ES UNA POLY INDEPENDIENTE DE LA ANTERIOR
    ' 1.0800,2.5500;4.7300,2.5500
    '
    ' line 1 => utf-8 code + letter (same as QCAD)
    ' line 2 & 3 =>sequence like polyline vertex with ";" seperating vertex
    ' and "," separating x,y coords
    '
    ' [0066] f
    ' 1.2873,0;1.2873,7.2945;A0.5590,3.4327,9.0000
    ' 0.000000,6.0000,3.0000,6.0000
    '
    ' line 2  =>sequence like polyline vertex with ";" seperating vertex and
    ' "," separating x,y coords, if vertex is prefixed with "A"
    ' the first field is a bulge
    '
    ' [00C1] Á
    ' C0041
    ' 2.000000,9.0000,4.0000,10.0000

    Dim sFilename As String, fFile As File, sData, sCoord, aVert, sCode As String
    Dim sPuntos As String[], Lista As New String[]
    Dim p1 As Integer
    Dim BulgeAdded As Boolean
    Dim sVert As String[]
    Dim fltb As Single[]
    Dim flt1, flt3 As Single[]
    Dim flt2 As Single

    For Each sFilename In Dir(DirPath, "*.lff")

        Dim fntNuevas As New LFFFonts

        fntNuevas.FileName = sFilename
        fntNuevas.WordSpacing = 6.75
        fntNuevas.LetterSpacing = 1'.25
        fntNuevas.LineSpacingFactor = 1
        fntNuevas.Letter = New Collection

        ffile = Open DirPath &/ sFilename For Input
        Do
            Line Input #fFile, sDAta
            If Left$(sData, 1) = "[" Then                           ' nueva letra
                Dim Letra As New Letters
                sCode = Replace(sData, "#", "")
                sCode = Replace(sCode, "[[", "[")
                sCode = Mid(sCode, 2, 4)
                letra.Code = Val("&H0000" & sCode)       ' [0021]!
                letra.FontGlyps = New Single[][]
                letra.FontBulges = New Single[][]

                While sdata <> ""
                    Line Input #fFile, sDAta                        ' 0.428572, 0.857143; 0, 0.428572
                    If Left(sData, 1) = "C" Then                       ' Copio datos de otra letra
                        Dim CopyCode As Integer
                        CopyCode = Val("&H0000" & Mid(sData, 2, 4))       ' C0021
                        'CopyCode = GetCodeIndex(fntNuevas, CopyCode)
                        flt1 = New Single[]
                        flt3 = New Single[]

                        For Each flt1 In fntNuevas.Letter[CopyCode].FontGlyps
                            letra.FontGlyps.Add(flt3)
                            For Each flt2 In flt1
                                flt3.Add(flt2)
                            Next
                        Next
                        flt3 = New Single[]
                        For Each flt1 In fntNuevas.Letter[CopyCode].FontBulges
                            letra.FontBulges.Add(flt3)
                            For Each flt2 In flt1
                                flt3.Add(flt2)
                            Next
                        Next

                    Else
                        flt1 = New Single[]
                        fltb = New Single[]

                        letra.FontGlyps.Add(flt1)
                        letra.FontBulges.Add(fltb)

                        sPuntos = Split(sDAta, ";")

                        For Each sCoord In sPuntos
                            sVert = Split(sCoord, ",")
                            BulgeAdded = False
                            For Each aVert In sVert
                                p1 = InStr(avert, "A")
                                If p1 > 0 Then

                                    ' Try letra.FontBulges.Add(CFloat(Mid$(aVert, p1 + 1)))
                                    Try fltb.Add(CSingle(Mid$(aVert, p1 + 1)))
                                    BulgeAdded = True

                                Else

                                    ' Try letra.FontGlyps.Add(CFloat(aVert))
                                    flt1.Add(CSingle(aVert))

                                Endif
                            Next
                            If Not BulgeAdded Then fltb.Add(0)
                        Next
                    End If
                Wend                                                ' fin de la letra
                fntNuevas.Letter.Add(letra, letra.Code)

            Endif                                                   ' ignoro todos los comentarios

        Loop Until Eof(fFile)
        fntNuevas.FontName = Utils.FileWithoutExtension(sFilename)
        glFont.Add(fntNuevas, fntNuevas.FontName)
        ActualFont = fntNuevas
        If fntNuevas.FontName = "unicode" Then UnicodeFont = fntNuevas

        Debug ("LeIdas " & fntNuevas.Letter.Count & " letras en " & sFilename)
        lista.Add(fntNuevas.FontName)

    Next

    Return lista

End

' '' Busca el codigo UTF y devuelve la posicion en el indice de letras
' Public Function GetCodeIndex(LaFont As FontSt, UTFcode As Integer) As Integer
'
'   Dim i As Integer
'
'   If Not LaFont Then Return 0
'
'   For i = 0 To LaFont.Letter.Max
'     If LaFont.Letter[i].Code = UTFcode Then Return i
'   Next
'
'   ' si estamos aca es porque no lo encontramos, buscamos en unicode
'   For i = 0 To UnicodeFont.Letter.Max
'     If UnicodeFont.Letter[i].Code = UTFcode Then Return -i
'   Next
'
' End

'' Grafica un texto en el contexto actual de acuerdo a los parametros pasados
'' Debe estar definida la Font con nombre y altura
''
'Fast Unsafe
Public Function DrawText(UTFstring As String, posX As Float, posY As Float, Optional angle As Float = 0, textH As Float = 1, colour As Integer = -14, linewIdth As Float = 1, rectW As Float = 0, rectH As Float = 0, alignHoriz As Integer = 0, alignVert As Integer = 0) As Boolean

    Dim i, iii, i2, UTFcode, LetterIndex As Integer, Xadvance As Float
    Dim fArcParams As New Single[]
    Dim Glyps, Bulges As New Single[]
    Dim TGlyps, TBulges As Single[][]
    Dim Ang, m1, m2, b, bx, by, mx, my, ang1, lt, alpha As Single
    Dim iBulge As Integer

    gl.PushMatrix                                                               ' para evitar peleas, guardo la matriz de trnasformacion
    gl.Translatef(posX, posY, 0)
    gl.Rotatef(angle, 0, 0, 1)                                                  ' en grados
    gl.Scalef(textH * FontScale, textH * FontScale, 1)
    If colour <> -14 Then Me.glColorRGB(colour)
    For i = 1 To String.Len(UTFstring)                                                 ' para cada letra
        UTFcode = String.Code(UTFstring, i)                                     ' obtengo el UTF code
        If UTFcode = 32 Then                                                    ' es un espacio
            gl.Translatef(ActualFont.WordSpacing, 0, 0)                       ' muevo el puntero a la siguiente posicion
        Else
            ' DEPRE LetterIndex = GetCodeIndex(ActualFont, UTFcode)                     ' obtengo el indice de la letra
            If ActualFont.Letter.Exist(UTFcode) Then
                TGlyps = ActualFont.Letter[UTFcode].FontGlyps
                TBulges = ActualFont.Letter[UTFcode].FontBulges

            Else If UnicodeFont.Letter.Exist(UTFcode) Then ' is unicode
                TGlyps = UnicodeFont.Letter[UTFcode].FontGlyps
                TBulges = UnicodeFont.Letter[UTFcode].FontBulges

            Else
                ' descarto la letra
                Continue

            End If

            ' con bulges
            '============================================================================
            iBulge = 0

            For Each Glyps In TGlyps
                Bulges = TBulges[iBulge]

                For i2 = 0 To Glyps.Count / 2 - 2

                    ' no todos los tramos pueden tener bulges
                    If Abs(Bulges[i2 + 1]) > 0.001 Then
                        ' ' FIXME: arc problem
                        ' Continue
                        ang1 = Ang(Glyps[(i2 + 1) * 2] - Glyps[i2 * 2], Glyps[(i2 + 1) * 2 + 1] - Glyps[i2 * 2 + 1])    ' angulo del tramo
                        Lt = puntos.distancia(Glyps[i2 * 2], Glyps[i2 * 2 + 1], Glyps[(i2 + 1) * 2], Glyps[(i2 + 1) * 2 + 1])
                        If Lt = 0 Then Continue
                        mx = (Glyps[(i2 + 1) * 2] + Glyps[i2 * 2]) / 2          ' punto medio del tramo
                        my = (Glyps[(i2 + 1) * 2 + 1] + Glyps[i2 * 2 + 1]) / 2
                        B = Bulges[i2 + 1] * Lt / 2
                        If Bulges[i2 + 1] < 0 Then alpha = Pi / 2 Else alpha = -Pi / 2
                        bx = mx + B * Cos(ang1 + alpha)                             ' Tercer punto del Bulge
                        by = my + B * Sin(ang1 + alpha)

                        ' aqui podria usar una rutina de arco entre 3 puntos
                        fArcParams = puntos.Arc3Point(Glyps[i2 * 2], Glyps[i2 * 2 + 1], bx, by, Glyps[(i2 + 1) * 2], Glyps[(i2 + 1) * 2 + 1])
                        ' traslado el centro
                        'If (Bulges[i2 + 1] > 0) Then Swap fArcParams[3], fArcParams[4]

                        gl.Translatef(fArcParams[0], fArcParams[1], 0)

                        ARC(fArcParams[2], fArcParams[3], fArcParams[4],, colour)
                        gl.Translatef(-fArcParams[0], -fArcParams[1], 0)
                        fArcParams = Null

                    Else    ' dibujo la linea normalmente

                        drawLines([Glyps[i2 * 2], Glyps[i2 * 2 + 1], Glyps[(i2 + 1) * 2], Glyps[(i2 + 1) * 2 + 1]], Colour)
                    End If

                Next
                For iii = 0 To Glyps.Max Step 2  ' calculo cuanto tiene que avanzar el puntero
                    If Glyps[iii] > Xadvance Then Xadvance = Glyps[iii]
                Next

                Inc iBulge
            Next
            gl.Translatef(Xadvance + ActualFont.LetterSpacing, 0, 0)                                       ' muevo el puntero a la siguiente posicion
            'Debug Xadvance
            Xadvance = 0
            '================================================================================

        End If
    Next
    gl.PopMatrix

End

'' Devuelve una poly con el texto en el contexto actual de acuerdo a los parametros pasados
'' Debe estar definida la Font con nombre y altura
Fast Unsafe Public Function DrawTextPoly(UTFstring As String, Optional textH As Float = 1, sRotationRad As Single = 0, sItalicAngle As Single = 0, fScaleX As Float = 1) As Float[]

    Dim i, iii, i2, UTFcode, LetterIndex As Integer, Xadvance, xMax As Float
    Dim fArcParams As New Single[]
    Dim Glyps, Bulges As New Single[]
    Dim TGlyps, TBulges As Single[][]
    Dim Ang, m1, m2, b, bx, by, mx, my, ang1, lt As Single
    Dim iBulge As Integer

    Dim dX, dY, alpha As Float ' donde tengo el cursor
    Dim flxArc, flxGlyps, flxAnswer As New Float[]

    'SelectFont("romant")
    ' gl.Scalef(textH * FontScale, textH * FontScale, 1)
    For i = 1 To String.Len(UTFstring)                                                 ' para cada letra
        UTFcode = String.Code(UTFstring, i)                                     ' obtengo el UTF code

        If UTFcode = 32 Then                                                    ' es un espacio
            Xadvance += ActualFont.WordSpacing                       ' muevo el puntero a la siguiente posicion

        Else
            ' DEPRE LetterIndex = GetCodeIndex(ActualFont, UTFcode)                     ' obtengo el indice de la letra
            If ActualFont.Letter.Exist(UTFcode) Then
                TGlyps = ActualFont.Letter[UTFcode].FontGlyps
                TBulges = ActualFont.Letter[UTFcode].FontBulges

            Else If UnicodeFont.Letter.Exist(UTFcode) Then ' is unicode
                TGlyps = UnicodeFont.Letter[UTFcode].FontGlyps
                TBulges = UnicodeFont.Letter[UTFcode].FontBulges

            Else
                ' descarto la letra
                Continue

            End If

            ' con bulges
            '============================================================================
            iBulge = 0

            For Each Glyps In TGlyps
                Bulges = TBulges[iBulge]

                For i2 = 0 To Glyps.Count / 2 - 2

                    ' no todos los tramos pueden tener bulges
                    If Abs(Bulges[i2 + 1]) > 0.001 Then
                        ' ' FIXME: arc problem
                        ' Continue
                        ang1 = Ang(Glyps[(i2 + 1) * 2] - Glyps[i2 * 2], Glyps[(i2 + 1) * 2 + 1] - Glyps[i2 * 2 + 1])    ' angulo del tramo
                        Lt = puntos.distancia(Glyps[i2 * 2], Glyps[i2 * 2 + 1], Glyps[(i2 + 1) * 2], Glyps[(i2 + 1) * 2 + 1])
                        If Lt = 0 Then Continue
                        mx = (Glyps[(i2 + 1) * 2] + Glyps[i2 * 2]) / 2          ' punto medio del tramo
                        my = (Glyps[(i2 + 1) * 2 + 1] + Glyps[i2 * 2 + 1]) / 2
                        B = Bulges[i2 + 1] * Lt / 2
                        If Bulges[i2 + 1] < 0 Then alpha = Pi / 2 Else alpha = -Pi / 2
                        bx = mx + B * Cos(ang1 + alpha)                             ' Tercer punto del Bulge
                        by = my + B * Sin(ang1 + alpha)

                        ' aqui podria usar una rutina de arco entre 3 puntos

                        fArcParams = puntos.Arc3Point(Glyps[i2 * 2], Glyps[i2 * 2 + 1], bx, by, Glyps[(i2 + 1) * 2], Glyps[(i2 + 1) * 2 + 1])

                        flxArc = ArcPoly(fArcParams[0] + Xadvance, fArcParams[1], fArcParams[2], fArcParams[3], fArcParams[4], Pi / 16)

                        flxAnswer.Insert(flxArc)

                        fArcParams.Clear
                        flxArc.Clear

                    Else    ' dibujo la linea normalmente

                        flxAnswer.Insert([Glyps[i2 * 2] + Xadvance, Glyps[i2 * 2 + 1], Glyps[(i2 + 1) * 2] + Xadvance, Glyps[(i2 + 1) * 2 + 1]])
                    End If

                Next
                For iii = 0 To Glyps.Max Step 2  ' calculo cuanto tiene que avanzar el puntero
                    If Glyps[iii] > xMax Then xMax = Glyps[iii]
                Next

                Inc iBulge
            Next
            Xadvance += xMax + ActualFont.LetterSpacing                                       ' muevo el puntero a la siguiente posicion

            xMax = 0
            '================================================================================

        End If
    Next

    puntos.Scale(flxAnswer, textH * FontScale * fScaleX, textH * FontScale)

    If sItalicAngle <> 0 Then

        For iii = 0 To flxAnswer.Max - 1 Step 2
            flxAnswer[iii] += flxAnswer[iii + 1] * Sin(Rad(sItalicAngle))
        Next

    Endif
    If sRotationRad <> 0 Then puntos.Rotate(flxAnswer, sRotationRad)
    Return flxAnswer

End

' AlingHoriz : 0=Rigth, 1=Center, 2=Left
' AlingVert: 0=Top, 1=Center, 2=Bottom
Public Function DrawText2(UTFstring As String, posX As Float, posY As Float, Optional angle As Float = 0, textH As Float = 1, colour As Integer = -14, BackColour As Integer = -1, linewIdth As Float = 1, italic As Boolean = False, rectW As Float = 0, rectH As Float = 0, alignHoriz As Integer = 0, alignVert As Integer = 0) As Boolean

    Dim flxText, tRect As New Float[]
    Dim sItalicAngle As Single, tX, tY, factorX, factorY As Float
    Dim fBorderExtension As Float = 3

    If italic Then sItalicAngle = 20

    flxText = DrawTextPoly(UTFstring, textH, angle, sItalicAngle)
    tRect = puntos.Limits(flxText)

    ' veo si tengo que comprimir en un ractangulo
    If (rectH > 0) And (rectW > 0) Then

        factorX = rectW / (tRect[2] - tRect[0])
        factorY = rectH / (tRect[3] - tRect[1])

        puntos.Scale(flxText, factorX, factorY)

    Else

        rectH = tRect[3] - tRect[1]
        rectW = tRect[2] - tRect[0]
    End If

    If alignHoriz = 1 Then tX = -rectW / 2
    If alignHoriz = 2 Then tX = -rectW

    If alignVert = 1 Then tY = -rectH / 2
    If alignVert = 2 Then tY = -rectH

    puntos.Translate(flxText, tx, ty)

    gl.MatrixMode(gl.PROJECTION)
    gl.PushMatrix

    gl.LoadIdentity()

    Gl.Ortho(0, fmain.gestru.w, 0, fmain.gestru.h, 0, 1)

    gl.MatrixMode(gl.MODELVIEW)
    gl.PushMatrix
    gl.LoadIdentity()
    gl.Translatef(posX, posY, 0)
    DrawLines(flxText, colour, linewIdth)
    Rectangle2D(tx - fBorderExtension, ty - fBorderExtension, rectW + fBorderExtension * 2, rectH + fBorderExtension * 2, BackColour,,,,,,, 0)

    gl.PopMatrix
    gl.MatrixMode(gl.PROJECTION)
    gl.PopMatrix

End

'' devuelve un rectangulo que contiene al texto
'' [ancho,alto]
Fast Unsafe Public Function TextExtends(UTFstring As String, Optional textH As Float = 1, sRotationRad As Single = 0, sItalicAngle As Single = 0) As Float[]

    Dim flxText, tRect As New Float[]

    flxText = DrawTextPoly(UTFstring, textH, sRotationRad, sItalicAngle)
    tRect = puntos.Limits(flxText)
    'tRect[1] *= textH * FontScale * 1.2

    Return tRect

End

'' Lee todas las texturas del directorio provisto y devuelve un listado con sus nombres
Public Function LoadTextures(DirPath As String) As String[]

    Dim sFilename As String, fFile As File, sCoord As String
    Dim Lista As New String[]

    Dim iTexture As Integer = 0
    Dim newTexture As TextureSt

    hText = Gl.GenTextures(1)

    For Each sFilename In Dir(DirPath, "*.png")

        newTexture = New TextureSt

        glTextures.Add(newTexture)

        newTexture.FileName = Left$(sFilename, -4)                          ' agrego el nombre de la textura a la lista que voy a retornar

        lista.Add(newTexture.FileName)

        newTexture.hImage = Image.Load(DirPath &/ sFilename)                                  ' cargo la imagen en memoria

        Gl.TexImage2D(newTexture.hImage)                                           ' genero un objeto OpenGL

        Gl.TexParameteri(Gl.TEXTURE_2D, Gl.TEXTURE_MIN_FILTER, Gl.NEAREST)  ' parametros basicos opengl

        Gl.TexParameteri(Gl.TEXTURE_2D, Gl.TEXTURE_MAG_FILTER, Gl.NEAREST)  ' parametros basicos opengl

        gl.BindTexture(gl.TEXTURE_2D, hText[iTexture])                      ' enlazo la textura a una handle

        newTexture.Id = hText[iTexture]

        Inc iTexture
        Break
    Next

    Debug ("LeIdas " & iTexture & " texturas en " & sFilename)

    Return lista

End

'' Dibuja un triangulo con una textura ya cargada

Public Sub TexturedTriangle2D(x1 As Float, y1 As Float, x2 As Float, y2 As Float, x3 As Float, y3 As Float, TextureId As Integer, Scale As Float)

    Gl.TexImage2D(glTextures[TextureId].hImage)                                           ' genero un objeto OpenGL
    gl.BindTexture(gl.TEXTURE_2D, hText[TextureId])                      ' enlazo la textura a una handle
    gl.begin(gl.TRIANGLES)

    gl.TexCoord2f(0, 0)

    gl.Vertex2f(x1, y1)

    gl.TexCoord2f((x2 - x1) / scale / 1000, (y2 - y1) / scale / 1000)

    gl.Vertex2f(x2, y2)

    gl.TexCoord2f((x3 - x1) / scale / 1000, (y3 - y1) / scale / 1000)

    gl.Vertex2f(x3, y3)

    gl.End

End

Public Function createVBO(data As Pointer, dataSizeBytes As Integer, usage As Integer) As Integer

    Dim e, Id As Integer = 0 ' 0 Is Reserved, glGenBuffersARB()will Return non - zero id If success
    Dim iParams As New Integer[1]

    glGenBuffers(1, VarPtr(Id))                                      'Create a vbo
    glBindBuffer(ARRAY_BUFFER, Id)                                   'activate vbo id To Use
    glBufferData(ARRAY_BUFFER, dataSizeBytes, data, usage)     'upload data To video card
    e = glGetError()
    Debug "Bufferdata:" & Hex(e)

    ' check data size In VBO Is Same As Input array, If Not Return 0 And delete VBO
    glGetBufferParameteriv(ARRAY_BUFFER, BUFFER_SIZE, iParams.Data)

    If (dataSizeBytes <> iParams[0]) Then
        glDeleteBuffers(1, VarPtr(Id))
        Id = 0
        Debug "[createVBO()] Data size is mismatch with input array"
    Else
        Debug "[createVBO()] Buffer created OK"
    End If

    Return Id ' Return VBO id

End

Public Function CheckExtension(sExtension As String) As Boolean

    Return (InStr(LCase(GLx.glGetString(EXTENSIONS)), LCase(sExtension)) > 0)

End

'El contexto debe estar creado para poder usar los Shaders
Public Function LoadShader(sVertexShaderFile As String, sFragmentShaderFile As String) As Integer

    Dim sShader, sInput As String
    Dim f As File
    Dim iShaderProgram, iVerShaderID, iFraShaderID As Integer
    ' verificamos si el sistema soporta shaders
    ' If Not gl.CheckExtensions("GL_ARB_vertex_program") Then
    '   Debug "No se pueden cargar Shaders"
    '
    '   Return 0
    ' End If

    If Not Exist(sVertexShaderFile) Then
        Debug "No existe el Vertex Shader"

        Return 0
    End If
    If Not Exist(sFragmentShaderFile) Then
        Debug "No existe el Vertex Shader"

        Return 0
    End If
    f = Open sVertexShaderFile For Input
    Do
        Input #f, sInput

        sShader &= sInput & gb.CrLf

    Loop Until f.Eof

    Close #f

    iVerShaderID = gl.CreateShader(gl.VERTEX_SHADER)
    If iVerShaderID = 0 Then Stop
    ' ' set the source code
    Gl.ShaderSource(iVerShaderID, sShader)
    ' ' compile
    gl.CompileShader(iVerShaderID)

    sShader = ""
    f = Open sFragmentShaderFile For Input
    Do
        Input #f, sInput

        sShader &= sInput & gb.CrLf

    Loop Until f.Eof

    Close #f

    iFraShaderID = gl.CreateShader(gl.FRAGMENT_SHADER)
    If iFRaShaderID = 0 Then Stop
    ' ' set the source code
    Gl.ShaderSource(iFraShaderID, sShader)
    ' ' compile
    gl.CompileShader(iFraShaderID)

    ishaderProgram = gl.CreateProgram()
    gl.AttachShader(ishaderProgram, iVerShaderID)
    gl.AttachShader(ishaderProgram, iFraShaderID)
    gl.LinkProgram(ishaderProgram)

    '
    Debug gl.GetShaderInfoLog(ishaderProgram)
    '
    ' ' una vez complilados, no se necesitan mas
    '
    gl.DeleteShader(iVerShaderID)
    gl.DeleteShader(iFraShaderID)

    Return iShaderProgram

End

Public Sub txtRendering2D(texto As String, x As Float, y As Float, Optional Altura As Single = 12, Optional _color As Long = Color.Blue, Optional _BackColor As Long = -1, Optional centradoH As Integer = 0, Optional centradoV As Integer = 0)

    ' this works in a Orthogonal projection

    Dim rectangulo As RectF

    Dim imagen As New Image, p As New Punto3d

    imagen.Resize(200, 200) 'so Paint.Begin gives no error

    Paint.Begin(imagen)

    Paint.Font.Size = Altura

    Paint.Brush = Paint.Color(_color)

    rectangulo = Paint.TextSize(texto)

    Paint.End

    rectangulo.Height /= 1.25  ' correct the innecesary extra height

    'this can't go into the Paint loop

    imagen.resize(rectangulo.Width, rectangulo.Height)

    If _backcolor > 0 Then

        imagen.Fill(_BackColor)

    Else

        ' until I know how to make it transparente, it goes like this

        imagen.Fill(Color.White)

    End If

    EscalaGL = 1

    Paint.Begin(imagen)

    Paint.Font.Size = Altura

    Paint.Brush = Paint.Color(_color)

    Paint.Text(texto, 0, rectangulo.Height * 0.85) 'locate the text at the bottom + 15% so it's vertically centered in the box

    Paint.Fill

    Paint.End

    'imagen.Save("imagen.png")  ' this is to check the Paint worked (and works!) (re checckeado 02/06/16)

    ' allignment to the 3D point p

    If centradoH = 1 Then x -= rectangulo.Width * EscalaGL

    If centradoH = 2 Then x -= rectangulo.Width / 2 * EscalaGL

    If centradoV = 1 Then y -= rectangulo.Height * EscalaGL

    If centradoV = 2 Then y -= rectangulo.Height / 2 * EscalaGL

    gl.MatrixMode(gl.PROJECTION)
    gl.PushMatrix

    gl.LoadIdentity()

    Gl.Ortho(0, fmain.gestru.w, 0, fmain.gestru.h, 0, 1)

    gl.MatrixMode(gl.MODELVIEW)
    gl.PushMatrix
    gl.LoadIdentity()

    Gl.TexImage2D(imagen)

    Gl.TexParameteri(Gl.TEXTURE_2D, Gl.TEXTURE_MIN_FILTER, Gl.NEAREST)

    Gl.TexParameteri(Gl.TEXTURE_2D, Gl.TEXTURE_MAG_FILTER, Gl.NEAREST)

    gl.BindTexture(gl.TEXTURE_2D, hText[0])

    Gl.Begin(Gl.QUADS)

    gl.color3f(1, 1, 1)

    Gl.TexCoordf(0.0, 1.0) ' Bottom Left OF The Texture AND Quad

    Gl.Vertex2f(x, y)

    Gl.TexCoordf(1.0, 1.0) ' Bottom Right OF The Texture AND Quad

    Gl.Vertex2f(x + rectangulo.Width * EscalaGL, y)

    Gl.TexCoordf(1.0, 0.0) ' Top Right OF The Texture AND Quad

    Gl.Vertex2f(x + rectangulo.Width * EscalaGL, y + rectangulo.Height * EscalaGL)

    Gl.TexCoordf(0.0, 0.0) ' Top Left OF The Texture AND Quad

    Gl.Vertex2f(x, y + rectangulo.Height * EscalaGL)

    Gl.End()

    gl.PopMatrix
    gl.MatrixMode(gl.PROJECTION)
    gl.PopMatrix

End

Public Sub DrawText3D(texto As String, pr As Punto3d, Optional Altura As Single = 12, Optional _color As Long = Color.Blue, Optional _BackColor As Long = -1, Optional centradoH As Integer = 0, Optional centradoV As Integer = 0)

    Dim x As Float, y As Float, z As Float

    glx.Get2DpointFrom3Dworld(pr, ByRef x, ByRef y, ByRef z)

    If z <= 1 Then DrawText2(texto, x, y, 0, altura, _color, _backcolor,,,,, centradoH, centradoV)

End

Public Sub LucesOn()

    Gl.Lightfv(Gl.LIGHT0, Gl.AMBIENT_AND_DIFFUSE, [1.0, 1.0, 1.0, 0.5])

    Gl.Lightfv(Gl.LIGHT0, Gl.POSITION, [GLCam.camera.Position.x, GLCam.camera.Position.y, -GLCam.camera.Position.z, 1])

    Gl.Enable(Gl.LIGHTING)
    Gl.Enable(Gl.LIGHT0)

    Gl.Enable(Gl.NORMALIZE) ' esto sirve para normalizar los vectores normales , o sea que sean de largo = 1

End

Public Sub LucesOff()

    Gl.Disable(Gl.LIGHTING)
    Gl.disable(Gl.LIGHT0)

    Gl.disable(Gl.NORMALIZE) ' esto sirve para normalizar los vectores normales , o sea que sean de largo = 1

End Sub
